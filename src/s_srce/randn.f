*RANDN
      REAL FUNCTION RANDN(JD)
C***BEGIN PROLOGUE  RANDN (ORIGINALLY RNOR)
C***DATE WRITTEN   810915
C***REVISION DATE  900315
C***CATEGORY NO.  L6A14
C***KEYWORDS  RANDOM NUMBERS, UNIFORM RANDOM NUMBERS
C***AUTHOR    KAHANER, DAVID
C             APPLIED AND COMPUTATIONAL MATHEMATICS DIVISTION, NIST
C
C             MARSAGLIA, GEORGE
C             COMPUTER SCIENCE DEPT., WASH STATE UNIV
C
C             MODIFIED BY -
C             DONALDSON, JANET
C             APPLIED AND COMPUTATIONAL MATHEMATICS DIVISTION, NIST
C
C***PURPOSE  GENERATES QUASI NORMAL RANDOM NUMBERS, WITH MEAN ZERO AND
C             UNIT STANDARD DEVIATION, AND CAN BE USED WITH ANY COMPUTER
C             WITH INTEGERS AT LEAST AS LARGE AS 32767.
C***DESCRIPTION
C
C       RANDN GENERATES QUASI NORMAL RANDOM NUMBERS WITH ZERO MEAN AND
C       UNIT STANDARD DEVIATION.
C       IT CAN BE USED WITH ANY COMPUTER WITH INTEGERS AT LEAST AS
C       LARGE AS 32767.
C
C
C   USE
C       FIRST TIME....
C                   Z = RANDN(JD)
C                     HERE JD IS ANY  N O N - Z E R O  INTEGER.
C                     THIS CAUSES INITIALIZATION OF THE PROGRAM
C                     AND THE FIRST RANDOM NUMBER TO BE RETURNED AS Z.
C       SUBSEQUENT TIMES...
C                   Z = RANDN(0)
C                     CAUSES THE NEXT RANDOM NUMBER TO BE RETURNED AS Z.
C
C=======================================================================
C
C    NOTE: USERS WHO WISH TO TRANSPORT THIS PROGRAM TO OTHER
C           COMPUTERS SHOULD READ THE FOLLOWING ....
C
C   MACHINE DEPENDENCIES...
C      MDIG = A LOWER BOUND ON THE NUMBER OF BINARY DIGITS AVAILABLE
C              FOR REPRESENTING INTEGERS, INCLUDING THE SIGN BIT.
C              THIS MUST BE AT LEAST 16, BUT CAN BE INCREASED IN
C              LINE WITH REMARK A BELOW.
C
C   REMARKS...
C     A. THIS PROGRAM CAN BE USED IN TWO WAYS:
C        (1) TO OBTAIN REPEATABLE RESULTS ON DIFFERENT COMPUTERS,
C            SET 'MDIG' TO THE SMALLEST OF ITS VALUES ON EACH, OR,
C        (2) TO ALLOW THE LONGEST SEQUENCE OF RANDOM NUMBERS TO BE
C            GENERATED WITHOUT CYCLING (REPEATING) SET 'MDIG' TO THE
C            LARGEST POSSIBLE VALUE.
C     B. THE SEQUENCE OF NUMBERS GENERATED DEPENDS ON THE INITIAL
C          INPUT 'JD' AS WELL AS THE VALUE OF 'MDIG'.
C          IF MDIG=16 ONE SHOULD FIND THAT
C            THE FIRST EVALUATION
C              Z=RANDN(87) GIVES  Z=-.40079207...
C            THE SECOND EVALUATION
C              Z=RANDN(0) GIVES   Z=-1.8728870...
C            THE THIRD EVALUATION
C              Z=RANDN(0) GIVES   Z=1.8216004...
C            THE FOURTH EVALUATION
C              Z=RANDN(0) GIVES   Z=.69410355...
C            THE THOUSANDTH EVALUATION
C              Z=RANDN(0) GIVES   Z=.96782424...
C
C***REFERENCES  MARSAGLIA & TSANG, "A FAST, EASILY IMPLEMENTED
C                 METHOD FOR SAMPLING FROM DECREASING OR
C                 SYMMETRIC UNIMODAL DENSITY FUNCTIONS", TO BE
C                 PUBLISHED IN SIAM J SISC 1983.
C***ROUTINES CALLED  I1MACH,XERROR
C***END PROLOGUE  RANDN
C
C  VARIABLE DECLARATIONS
C
C  SCALAR ARGUMENTS
      INTEGER
     +   JD
C
C  LOCAL SCALARS
      REAL
     +   AA,B,C,C1,C2,ONE,P5,PC,RMAX,S,X,XN,Y
      INTEGER
     +   I,I1,J,J0,J1,JSEED,K0,K1,M1,M2,MDIG
C
C  LOCAL ARRAYS
      REAL
     +   V(65),W(65)
      INTEGER
     +   M(17)
C
C  EXTERNAL FUNCTIONS
      REAL
     +   RANDU
      INTEGER
     +   I1MACH
      EXTERNAL RANDU,I1MACH
C
C  EXTERNAL SUBROUTINES
      EXTERNAL XERROR
C
C  INTRINSIC FUNCTIONS
      INTRINSIC ABS,EXP,LOG,MIN,MOD,REAL,SIGN
C
C  SAVE STATEMENT
      SAVE I1,J1,M,M1,M2,RMAX
C
      DATA AA,B,C,RMAX/12.37586E0,0.4878992E0,12.67706E0,3.0518509E-5/
      DATA C1,C2,PC,XN/0.9689279E0,1.301198E0,0.1958303E-1,2.776994E0/
      DATA (V(I),I=1,15)/0.3409450E0,0.4573146E0,0.5397793E0,
     +     0.6062427E0,0.6631691E0,0.7136975E0,0.7596125E0,0.8020356E0,
     +     0.8417227E0,0.8792102E0,0.9148948E0,0.9490791E0,0.9820005E0,
     +     1.0138492E0,1.0447810E0/
      DATA (V(I),I=16,30)/1.0749254E0,1.1043917E0,1.1332738E0,
     +     1.1616530E0,1.1896010E0,1.2171815E0,1.2444516E0,1.2714635E0,
     +     1.2982650E0,1.3249008E0,1.3514125E0,1.3778399E0,1.4042211E0,
     +     1.4305929E0,1.4569915E0/
      DATA (V(I),I=31,45)/1.4834526E0,1.5100121E0,1.5367061E0,
     +     1.5635712E0,1.5906454E0,1.6179680E0,1.6455802E0,1.6735255E0,
     +     1.7018503E0,1.7306045E0,1.7598422E0,1.7896223E0,1.8200099E0,
     +     1.8510770E0,1.8829044E0/
      DATA (V(I),I=46,60)/1.9155830E0,1.9492166E0,1.9839239E0,
     +     2.0198430E0,2.0571356E0,2.0959930E0,2.1366450E0,2.1793713E0,
     +     2.2245175E0,2.2725185E0,2.3239338E0,2.3795007E0,2.4402218E0,
     +     2.5075117E0,2.5834658E0/
      DATA (V(I),I=61,65)/2.6713916E0,2.7769943E0,2.7769943E0,
     +     2.7769943E0,2.7769943/
      DATA (W(I),I=1,20)/0.10405134E-04,0.13956560E-04,0.16473259E-04,
     +     0.18501623E-04,0.20238931E-04,0.21780983E-04,0.23182241E-04,
     +     0.24476931E-04,0.25688121E-04,0.26832186E-04,0.27921226E-04,
     +     0.28964480E-04,0.29969191E-04,0.30941168E-04,0.31885160E-04,
     +     0.32805121E-04,0.33704388E-04,0.34585827E-04,0.35451919E-04,
     +     0.36304851E-04/
      DATA (W(I),I=21,40)/0.37146564E-04,0.37978808E-04,0.38803170E-04,
     +     0.39621114E-04,0.40433997E-04,0.41243096E-04,0.42049621E-04,
     +     0.42854734E-04,0.43659562E-04,0.44465208E-04,0.45272764E-04,
     +     0.46083321E-04,0.46897980E-04,0.47717864E-04,0.48544128E-04,
     +     0.49377973E-04,0.50220656E-04,0.51073504E-04,0.51937936E-04,
     +     0.52815471E-04/
      DATA (W(I),I=41,60)/0.53707761E-04,0.54616606E-04,0.55543990E-04,
     +     0.56492112E-04,0.57463436E-04,0.58460740E-04,0.59487185E-04,
     +     0.60546402E-04,0.61642600E-04,0.62780711E-04,0.63966581E-04,
     +     0.65207221E-04,0.66511165E-04,0.67888959E-04,0.69353880E-04,
     +     0.70922996E-04,0.72618816E-04,0.74471933E-04,0.76525519E-04,
     +     0.78843526E-04/
      DATA (W(I),I=61,65)/0.81526890E-04,0.84749727E-04,0.84749727E-04,
     +     0.84749727E-04,0.84749727E-04/
      DATA M(1),M(2),M(3),M(4),M(5),M(6),M(7),M(8),M(9),M(10),M(11),
     +     M(12),M(13),M(14),M(15),M(16),M(17)/30788,23052,2053,19346,
     +     10646,19427,23975,19049,10949,19693,29746,26748,2796,23890,
     +     29168,31924,16499/
      DATA M1,M2,I1,J1/32767,256,5,17/
      DATA P5,ONE/0.5E0,1.0E0/
C
C FAST PART...
C
C
C***FIRST EXECUTABLE STATEMENT  RANDN
      IF (JD.NE.0) THEN
C  FILL
          MDIG = I1MACH(8) + 1
C
C  MODIFICATION SO SAME NUMBERS WILL BE GENERATED ON ALL MACHINES
C  WITH I1MACH(8) AT LEAST 31
C
          MDIG = MIN(MDIG,32)
C
C  BE SURE THAT MDIG AT LEAST 16...
          IF (MDIG.LT.16) CALL XERROR('RANDN--MDIG LESS THAN 16',23,1,2)
C
          M1 = 2** (MDIG-2) + (2** (MDIG-2)-1)
          M2 = 2** (MDIG/2)
          JSEED = MIN(ABS(JD),M1)
          IF (MOD(JSEED,2).EQ.0) JSEED = JSEED - 1
          K0 = MOD(9069,M2)
          K1 = 9069/M2
          J0 = MOD(JSEED,M2)
          J1 = JSEED/M2
          DO 10 I = 1,17
              JSEED = J0*K0
              J1 = MOD(JSEED/M2+J0*K1+J1*K0,M2/2)
              J0 = MOD(JSEED,M2)
              M(I) = J0 + M2*J1
   10     CONTINUE
          J1 = 17
          I1 = 5
          RMAX = ONE/REAL(M1)
C  SEED UNIFORM (0,1] GENERATOR.  (JUST A DUMMY CALL)
          RANDN = RANDU(JD)
          DO 20 I = 1,65
              W(I) = RMAX*V(I)
   20     CONTINUE
      END IF

      I = M(I1) - M(J1)
      IF (I.LT.0) I = I + M1
      M(J1) = I
      I1 = I1 - 1
      IF (I1.EQ.0) I1 = 17
      J1 = J1 - 1
      IF (J1.EQ.0) J1 = 17
      J = MOD(I,64) + 1
      RANDN = I*W(J+1)
      IF (((I/M2)/2)*2.EQ. (I/M2)) RANDN = -RANDN
      IF (ABS(RANDN).GT.V(J)) THEN
C  SLOW PART; AA IS A*F(0)
          X = (ABS(RANDN)-V(J))/ (V(J+1)-V(J))
          Y = RANDU(0)
          S = X + Y
          IF (S.LE.C2) THEN
              IF (S.LE.C1) THEN
                  RETURN
              ELSE IF (Y.LE.C-AA*EXP(-P5 * (B-B*X)**2)) THEN
                  IF (EXP(-P5*V(J+1)**2)+Y*PC/V(J+1).GT.
     +                EXP(-P5*RANDN**2)) THEN
   30                 CONTINUE
C TAIL PART; 3.855849 IS .5*XN**2
                      S = XN - LOG(RANDU(0))/XN
                      IF (3.855849E0+LOG(RANDU(0))-XN*S.GT.
     +                    -P5*S**2) GO TO 30
                      RANDN = SIGN(S,RANDN)
                  END IF
                  RETURN
              ELSE
              END IF
          END IF
          RANDN = SIGN(B-B*X,RANDN)
      END IF
      END
