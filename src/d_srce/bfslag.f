*BFSLAG
      SUBROUTINE BFSLAG(CCOV, LAGMAX, LAGS, N, NW, NWUSED, ICCOV,
     +   JCCOV, INDEX1, INDEX2)
C
C     LATEST REVISION  -  03/15/90  (JRD)
C
C     THIS ROUTINE COMPUTES THE LAG WINDOW TRUNCATION POINTS FOR
C     FOURIER BIVARIATE SPECTRUM ANALYSIS.
C
C     WRITTEN BY - JANET R. DONALDSON
C                  STATISTICAL ENGINEERING DIVISION
C                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
C
C     CREATION DATE  -  DECEMBER 2, 1985
C
C
C  VARIABLE DECLARATIONS
C
C  SCALAR ARGUMENTS
      INTEGER
     +   ICCOV,INDEX1,INDEX2,JCCOV,LAGMAX,N,NW,NWUSED
C
C  ARRAY ARGUMENTS
      DOUBLE PRECISION
     +   CCOV(ICCOV,JCCOV,*)
      INTEGER
     +   LAGS(*)
C
C  LOCAL SCALARS
      DOUBLE PRECISION
     +   COVMX,COVMXI,FAC11,FAC12,FAC21,FAC22,P95LIM
      INTEGER
     +   I,J,K,LAG,NWM1
C
C  INTRINSIC FUNCTIONS
      INTRINSIC ABS,MAX,DBLE,SQRT
C
C     VARIABLE DEFINITIONS (ALPHABETICALLY)
C
C     DOUBLE PRECISION CCOV(ICCOV,JCCOV,*)
C        THE COVARIANCES.
C     DOUBLE PRECISION COVMX
C        THE MAXIMUM COVARIANCE VALUE.
C     DOUBLE PRECISION COVMXI
C        THE MAXIMUM COVARIANCE VALUE FOR THE ITH LAG.
C     DOUBLE PRECISION FAC11, FAC12, FAC21, FAC22
C        FACTORS USED TO COMPUTE THE CORRELATION COEFFICIENTS.
C     INTEGER I
C        AN INDEX VARIABLE
C     INTEGER ICCOV
C        THE FIRST DIMENSION OF THE ARRAY CCOV.
C     INTEGER INDEX1, INDEX2
C        THE INDICES OF THE COVARIANCES OF THE TWO SERIES.
C     INTEGER J
C        AN INDEX VALUE.
C     INTEGER JCCOV
C        THE SECOND DIMENSION OF THE ARRAY CCOV.
C     INTEGER K
C        AN INDEX VALUE.
C     INTEGER LAG, LAGMAX
C        THE INDEXING VARIABLE INDICATING THE LAG VALUE OF THE
C        BIVARIATE COVARIANCE BEING COMPUTED AND THE MAXIMUM LAG
C        TO BE USED, RESPECTIVELY.
C     INTEGER LAGS(NW)
C        THE ARRAY USED TO STORE THE LAG WINDOW TRUCCATION
C        POINTS USED FOR EACH SET OF SPECTRUM VALUES.
C     INTEGER N
C        THE INTEGER NUMBER OF OBSERVATIONS IN EACH SERIES
C     INTEGER NW
C        THE NUMBER OF DIFFERENT BANDWIDTHS REQUESTED.
C     INTEGER NWM1, NWUSED
C        THE NUMBER OF DIFFERENT BANDWIDTHS MINUS 1, AND THE
C        ACTUAL NUMBER OF BANDWIDTHS ACTUALLY USED.
C     DOUBLE PRECISION P95LIM
C        THE 95 PERCENT CONFIDENT LIMIT FOR WHITE NOISE.
C
      LAGS(NW) = LAGMAX
      IF (LAGS(NW).LE.32) GO TO 30
C
C     COMPUTE 95 PERCENT CONFIDENCE LIMITS ON BIVARIATECOVARIANCES,
C     ASSUMING WHITE NOISE.
C
      P95LIM = 1.96D0/SQRT(DBLE(N))
C
      FAC11 = CCOV(1,INDEX1,INDEX1)
      FAC12 = SQRT(CCOV(1,INDEX1,INDEX1)*CCOV(1,INDEX2,INDEX2))
      FAC21 = FAC12
      FAC22 = CCOV(1,INDEX2,INDEX2)
C
C     CHECK FOR FIRST CVF EXCEEDING 95 PERCENT LIMIT ON WHITE NOISE
C
      DO 10 I=1,LAGMAX
         LAG = LAGMAX + 1 - I
         COVMXI = MAX(ABS(CCOV(LAG,INDEX1,INDEX1)*FAC11),ABS(CCOV(LAG,
     +      INDEX1,INDEX2)*FAC12),ABS(CCOV(LAG,INDEX2,INDEX1)*FAC21),
     +      ABS(CCOV(LAG,INDEX2,INDEX2)*FAC22))
         IF (COVMXI.GE.P95LIM) GO TO 30
         LAGS(NW) = LAGS(NW) - 1
   10 CONTINUE
C
C     IF NO ACVF EXCEEDS WHITE NOISE LIMITS, CHECK FOR LARGEST ACVF.
C
      LAGS(NW) = 1
      COVMX = ABS(CCOV(2,1,1)*FAC11)
      DO 20 LAG=1,LAGMAX
         COVMXI = MAX(ABS(CCOV(LAG,INDEX1,INDEX1)*FAC11),ABS(CCOV(LAG,
     +      INDEX1,INDEX2)*FAC12),ABS(CCOV(LAG,INDEX2,INDEX1)*FAC21),
     +      ABS(CCOV(LAG,INDEX2,INDEX2)*FAC22))
         IF (COVMXI.LE.COVMX) GO TO 20
         LAGS(NW) = LAG
         COVMX = COVMXI
   20 CONTINUE
C
C     COMPUTE LAG WINDOW TRUNCATION POINTS
C
   30 LAGS(NW) = LAGS(NW)*3.0D0/2.0D0
      IF (LAGS(NW).LT.32) LAGS(NW) = 32
      IF (LAGS(NW).GT.LAGMAX) LAGS(NW) = LAGMAX
      NWUSED = NW
      IF (NW.EQ.1) RETURN
      NWM1 = NW - 1
      DO 40 I=1,NWM1
         K = NW - I
         LAGS(K) = LAGS(K+1)/2
   40 CONTINUE
C
C     CHECK WHETHER ALL NW LAG WINDOW TRUNCATION POINTS CAN BE USED.
C
      NWUSED = NW
      IF (LAGS(1).GE.4) RETURN
C
C     RECONSTURCT -LAGS- VECTOR IF NOT ALL TRUNCATION POINTS ARE
C     TO BE USED
C
      DO 50 I=2,NW
         NWUSED = NWUSED - 1
         IF (LAGS(I).GE.4) GO TO 60
   50 CONTINUE
C
   60 DO 70 I=1,NWUSED
         J = NW - NWUSED + I
         LAGS(I) = LAGS(J)
   70 CONTINUE
C
      RETURN
      END
