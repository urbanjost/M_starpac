!SETESL
      subroutine setesl(n, ndiv, nfft)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS ROUTINE COMPUTES THE SMALLEST VALUE OF NFFT WHICH
!     EQUALS OR EXCEEDS N + 2, SUCH THAT NFFT - 2 IS
!     1. DIVISIBLE BY NDIV,
!     2. HAS NO MORE THAN 11 PRIME FACTORS,
!     3. HAS NO PRIME FACTOR GREATER THAN 23, AND
!     4. THE PRODUCT OF THE SQUARE FREE PRIME FACTORS OF
!        (NFFT-2)/NDIV DO NOT EXCEED 210 IF NDIV = 2, AND
!                                    105 IF NDIV = 4.
!     THE VALUE OF NFFT THUS MEET THE REQUIREMENTS OF
!     THE EXTENDED LENGTH OF THE SERIES REQUIRED FOR ANY ROUTINE
!     USING THE SINGLETON FFT PROVIDING THE PROPER VALUE OF NDIV
!     IS CHOSEN.
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 7, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   n,ndiv,nfft
!
!  LOCAL SCALARS
     integer&
     &   i,npf,nsfp
!
!  LOCAL ARRAYS
     integer&
     &   ipf(50),ipfexp(50)
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL FACTOR
!
!  INTRINSIC FUNCTIONS
      intrinsic mod
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     INTEGER I
!       AN INDEX VARIABLE.
!     INTEGER IPF(50), IPFEXP(50)
!        THE VECTORS OF PRIME FACTORS OF NFFT AND THEIR EXPONENTS,
!        RESPECTIVELY, WHERE THE LENGTH OF THESE VECTORS IS
!        SUFFICIENT TO ACCOMODATE THE PRIME FACTORS OF AN INTEGER
!        UP TO 2 ** 128 (APPROXIMATELY 10 ** 40).
!     INTEGER N
!        THE NUMBER UPON WHICH NFFT IS BASED.
!     INTEGER NDIV
!        A REQUIRED FACTOR OF NFFT - 2.
!     INTEGER NFFT
!        THE RETURNED VALUE WHICH MEETS THE ABOVE DESCRIPTION.
!     INTEGER NPF
!        THE NUMBER OF PRIME FACTORS IN NFFT.
!     INTEGER NSFP
!        THE PRODUCT OF THE NON SQUARE FACTORS.
!
      nfft = n
      if (nfft.le.0) return
      if (mod(nfft, ndiv) .ne. 0) nfft = nfft + ndiv - mod(nfft, ndiv)
      nfft = nfft - ndiv
   20 nfft = nfft + ndiv
      call factor(nfft/ndiv, npf, ipf, ipfexp)
      if ((npf.ge.11) .or. (ipf(npf).gt.23)) go to 20
      nsfp = 1
      if (ndiv.eq.4) nsfp = 2
      do 30 i = 1, npf
         if (mod(ipfexp(i), 2).eq.1) nsfp = nsfp * ipf(i)
   30 continue
      if (nsfp .ge. 210) go to 20
!
      nfft = nfft + 2
!
      return
!
      end
