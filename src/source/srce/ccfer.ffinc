!CCFER
     subroutine ccfer(nmsub, n, lagmax, ldstak, ldsmin, iccov, jccov,&
     &  inlppc, jnlppc, m, lyfft, nfft, iym, iymfft, isfft, islong)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS IS THE ERROR CHECKING ROUTINE FOR THE CCF FAMILY
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 2, 1985
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
    &   iccov,inlppc,iym,iymfft,jccov,jnlppc,lagmax,ldsmin,ldstak,&
     &   lyfft,m,n,nfft
     logical&
     &   isfft,islong
!
!  ARRAY ARGUMENTS
     character&
     &   nmsub(6)*1
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  LOCAL SCALARS
     integer&
     &   i
     logical&
     &   head
!
!  LOCAL ARRAYS
     logical&
     &   err(15)
     character&
    &   liccov(8)*1,linlpp(8)*1,liym(8)*1,liymff(8)*1,&
    &   ljccov(8)*1,ljnlpp(8)*1,llagmx(8)*1,llds(8)*1,&
    &   llgmx1(8)*1,llyfft(8)*1,lm(8)*1,ln(8)*1,lnfft(8)*1,&
     &   lnm1(8)*1,lone(8)*1,lthree(8)*1
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL EISGE,EISII
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     LOGICAL ERR(15)
!        VALUES INDICATING WHETHER AN ERROR WAS DETECTED (TRUE) OR NOT
!        (FALSE).
!     LOGICAL HEAD
!        A FLAG INDICATING WHETHER THE HEADING SHOULD BE PRINTED
!        (TRUE) OR NOT (FALSE).  IF A HEADING IS PRINTED, THE VALUE
!        OF HEAD WILL BE CHANGED TO FALSE.
!     INTEGER I
!        AN INDEX VARIABLE.
!     INTEGER ICCOV
!        THE FIRST DIMENSION OF THE ARRAY CCOV.
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED
!     INTEGER INLPPC
!        THE FIRST DIMENSION OF THE ARRAY NLPPC.
!     LOGICAL ISFFT
!        THE INDICATOR VARIABLE USED TO DESIGNATE WHETHER THE CALLING
!        ROUTINE HAS SUFFIX F (ISFFT = TRUE) OR NOT (ISFFT = FALSE)
!     LOGICAL ISLONG
!        THE INDICATOR VARIABLE USED TO DESIGNATE WHETHER THE CALLING
!        ROUTINE HAS SUFFIX S (ISLONG = TRUE) OR NOT (ISLONG = FALSE)
!     INTEGER IYM, IYMFFT
!        THE FIRST DIMENSION OF THE ARRAYS YM AND YMFFT, RESPECTIVELY.
!     INTEGER JCCOV, JNLPPC
!        THE SECOND DIMENSIONS OF THE ARRAYS CCOV AND NLPPC,
!        RESPECTIVELY.
!     INTEGER LAGMAX
!        THE MAXIMUM LAG VALUE REQUESTED.
!     INTEGER LDSMIN
!        THE MINIMUM LENGTH ALLOWED FOR THE ARRAY DSTAK.
!     INTEGER LDSTAK
!        THE LENGTH OF THE ARRAY DSTAK.
!     CHARACTER*1 LICCOV(8), LINLPP(8), LIYM(8), LIYMFF(8), LJCCOV(8),
!    *  LJNLPP(8), LLAGMX(8), LLDS(8), LLGMX1(8), LLYFFT(8),
!    *  LM(8), LN(8), LNFFT(8), LNM1(8), LONE(8), LTHREE(8)
!        THE ARRAY(S) CONTAINING THE NAME(S) OF INPUT PARAMETER(S)
!        CHECKED FOR ERRORS.
!     INTEGER M
!        THE NUMBER OF SERIES BEING ANALYZED
!     INTEGER N
!        THE INTEGER NUMBER OF OBSERVATIONS IN EACH SERIES
!     INTEGER NFFT
!        THE NUMBER OF OBSERVATIONS IN THE EXTENDED SERIES.
!     CHARACTER*1 NMSUB(6)
!        THE NAME OF THE SUBROUTINE CALLING THE ERROR CHECKING
!        SUBROUTINE.
!
!     SET UP NAME ARRAYS
!
     data&
    & liccov(1), liccov(2), liccov(3), liccov(4), liccov(5),&
     & liccov(6), liccov(7), liccov(8) /'I','C','C','O','V',' ',' ',' '/
     data&
    & linlpp(1), linlpp(2), linlpp(3), linlpp(4), linlpp(5),&
     & linlpp(6), linlpp(7), linlpp(8) /'I','N','L','P','P','C',' ',' '/
     data&
    & liym(1), liym(2), liym(3), liym(4), liym(5),&
     & liym(6), liym(7), liym(8) /'I','Y','M',' ',' ',' ',' ',' '/
     data&
    & liymff(1), liymff(2), liymff(3), liymff(4), liymff(5),&
     & liymff(6), liymff(7), liymff(8) /'I','Y','M','F','F','T',' ',' '/
     data&
    & ljccov(1), ljccov(2), ljccov(3), ljccov(4), ljccov(5),&
     & ljccov(6), ljccov(7), ljccov(8) /'J','C','C','O','V',' ',' ',' '/
     data&
    & ljnlpp(1), ljnlpp(2), ljnlpp(3), ljnlpp(4), ljnlpp(5),&
     & ljnlpp(6), ljnlpp(7), ljnlpp(8) /'J','N','L','P','P','C',' ',' '/
     data&
    & llagmx(1), llagmx(2), llagmx(3), llagmx(4), llagmx(5),&
     & llagmx(6), llagmx(7), llagmx(8) /'L','A','G','M','A','X',' ',' '/
     data&
    & llds(1), llds(2), llds(3), llds(4), llds(5),&
     & llds(6), llds(7), llds(8) /'L','D','S','T','A','K',' ',' '/
     data&
    & llgmx1(1), llgmx1(2), llgmx1(3), llgmx1(4), llgmx1(5),&
     & llgmx1(6), llgmx1(7), llgmx1(8) /'L','A','G','M','A','X','+','1'/
     data&
    & llyfft(1), llyfft(2), llyfft(3), llyfft(4), llyfft(5),&
     & llyfft(6), llyfft(7), llyfft(8) /'L','Y','F','F','T',' ',' ',' '/
     data&
    & lm(1), lm(2), lm(3), lm(4), lm(5),&
     & lm(6), lm(7), lm(8) /'M',' ',' ',' ',' ',' ',' ',' '/
     data&
    & ln(1), ln(2), ln(3), ln(4), ln(5),&
     & ln(6), ln(7), ln(8) /'N',' ',' ',' ',' ',' ',' ',' '/
     data&
    & lnm1(1), lnm1(2), lnm1(3), lnm1(4), lnm1(5),&
     & lnm1(6), lnm1(7), lnm1(8) /'(','N','-','1',')',' ',' ',' '/
     data&
    & lnfft(1), lnfft(2), lnfft(3), lnfft(4), lnfft(5),&
     & lnfft(6), lnfft(7), lnfft(8) /'N','F','F','T',' ',' ',' ',' '/
     data&
    & lone(1), lone(2), lone(3), lone(4), lone(5),&
     & lone(6), lone(7), lone(8) /'O','N','E',' ',' ',' ',' ',' '/
     data&
    & lthree(1), lthree(2), lthree(3), lthree(4), lthree(5),&
     & lthree(6), lthree(7), lthree(8) /'T','H','R','E','E',' ',' ',' '/
!
!     SET UP FOR ERROR CHECKING
!
      ierr = 0
      head = .true.
      do 10 i = 1, 15
        err(i) = .false.
   10 continue
!
!     CALL ERROR CHECKING ROUTINES
!
      call eisge(nmsub, ln, n, 3, 2, head, err(1), lthree)
!
      call eisge(nmsub, lm, m, 1, 2, head, err(2), lone)
!
      if (.not.err(1)) then
!
       call eisii(nmsub, llagmx, lagmax, 1, n-1, 1, head, err(3), lone,&
     &    lnm1)
!
        if (isfft) then
          if (islong) then
           call eisge(nmsub, liymff, iymfft, nfft, 3, head, err(4),&
     &        lnfft)
          else
           call eisge(nmsub, llyfft, lyfft, nfft, 3, head, err(4),&
     &        lnfft)
          end if
        else
          call eisge(nmsub, liym, iym, n, 3, head, err(4), ln)
        end if
!
        if (.not.err(3)) then
!
          if (islong) then
           call eisge(nmsub, liccov, iccov, lagmax+1, 3, head, err(5),&
     &        llgmx1)
           call eisge(nmsub, ljccov, jccov, m, 3, head, err(6),&
     &        llgmx1)
           call eisge(nmsub, linlpp, inlppc, lagmax+1, 3, head, err(7),&
     &        llgmx1)
           call eisge(nmsub, ljnlpp, jnlppc, m, 3, head, err(8),&
     &        llgmx1)
          end if
!
          call eisge(nmsub, llds, ldstak, ldsmin, 9, head, err(9), llds)
!
        end if
      end if
!
      do 20 i = 1, 15
        if (err(i)) ierr = 1
   20 continue
!
      return
!
      end
