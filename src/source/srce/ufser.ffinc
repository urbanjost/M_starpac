!UFSER
     subroutine ufser(nmsub, n, lagmax, lacov, nf, ispcf, nw,&
     &    lags, ldstak, ldsmin, lyfft, nfft, option)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS IS THE ERROR CHECKING ROUTINE FOR THE TIME SERIES
!     FOURIER UNIVARIATE SPECTRUM ANALYSIS ROUTINES.
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  JUNE 10, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   ispcf,lacov,lagmax,ldsmin,ldstak,lyfft,n,nf,nfft,nw
!
!  ARRAY ARGUMENTS
     integer&
     &   lags(*)
     logical&
     &   option(4)
     character&
     &   nmsub(6)*1
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  LOCAL SCALARS
     integer&
     &   i,nv
     logical&
     &   head
!
!  LOCAL ARRAYS
     logical&
     &   err(15)
     character&
    &   l1(8)*1,lispcf(8)*1,llacov(8)*1,llagmx(8)*1,llags(8)*1,&
    &   llds(8)*1,llgmx1(8)*1,llyfft(8)*1,ln(8)*1,lnf(8)*1,&
     &   lnm1(8)*1,lnw(8)*1
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL EISGE,EISII,EIVII
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     LOGICAL ERR(15)
!        VALUE(S) INDICATING WHETHER AN ERROR WAS DETECTED (TRUE) OR NOT
!        (FALSE).
!     LOGICAL HEAD
!        A FLAG INDICATING WHETHER THE HEADING SHOULD BE PRINTED
!        (TRUE) OR NOT (FALSE).  IF A HEADING IS PRINTED, THE VALUE
!        OF HEAD WILL BE CHANGED TO FALSE.
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST
!        IF ERR01, NO ERRORS WERE DETECTED
!        IF IERR .EQ. 1, ERRORS HAVE BEEN DETECTED
!     INTEGER ISPCF
!         THE ACTUAL FIRST DIMENSION OF THE SPECTRUM ARRAYS.
!     INTEGER LACOV
!        THE LENGTH OF THE VECTOR ACOV.
!     INTEGER LAGMAX
!        THE MAXIMUM LAG VALUE TO BE USED.
!     INTEGER LAGS(NW)
!        THE ARRAY USED TO SPECIFY THE LAG WINDOW TRUNCATION
!        POINTS USED FOR EACH SET OF SPECTRUM VALUES.
!     INTEGER LDSMIN
!        THE MINIMUM LENGTH ALLOWED FOR DSTAK.
!     INTEGER LDSTAK
!        THE LENGTH OF THE VECTOR DSTAK IN COMMON CSTAK.
!     CHARACTER*1 LISPCF(8), LLACOV(8), LLAGMX(8),
!    *   LLAGS(8), LLGMX1(8), LLDS(8), LN(8), LNF(8), LNM1(8),
!    *   LNW(8), LLYFFT(8), L1(8)
!        THE ARRAY(S) CONTAINING THE NAME(S) OF THE ARGUMENT(S)
!        CHECKED FOR ERRORS.
!     INTEGER LYFFT
!        THE LENGTH OF THE VECTOR YFFT.
!     INTEGER N
!        THE INTEGER NUMBER OF OBSERVATIONS IN THE SERIES.
!     INTEGER NF
!        THE NUMBER OF FREQUENCIES AT WHICH THE SPECTRUM IS
!        TO BE COMPUTED.
!     INTEGER NFFT
!        THE NUMBER OF OBSERVATIONS IN THE EXTENDED SERIES.
!     CHARACTER*1 NMSUB(6)
!        THE ARRAY CONTAINING THE NAME OF THE USER CALLED SUBROUTINE.
!     INTEGER NV
!        THE NUMBER OF VIOLATIONS FOUND WHEN CHECKING VECTOR LAGS.
!     INTEGER NW
!        THE ARGUMENT USED TO DETERMINE THE NUMBER OF DIFFERENT
!        BANDWIDTHS TO BE USED.
!     LOGICAL OPTION(4)
!        AN INDICATOR ARRAY USED TO DESIGNATE WHETHER ANY OF THE
!        FOUR POSSIBLE OPTIONS (F, M, V, OR S) HAVE BEEN USED (TRUE)
!        OR NOT (FALSE).
!
!     SET UP NAME ARRAYS
!
     data lispcf(1), lispcf(2), lispcf(3), lispcf(4), lispcf(5),&
    &   lispcf(6), lispcf(7), lispcf(8) /'I','S','P','C','F',' ',' ',&
     &   ' '/
     data llacov(1), llacov(2), llacov(3), llacov(4), llacov(5),&
    &   llacov(6), llacov(7), llacov(8) /'L','A','C','O','V',' ',' ',&
     &   ' '/
     data llagmx(1), llagmx(2), llagmx(3), llagmx(4), llagmx(5),&
    &   llagmx(6), llagmx(7), llagmx(8) /'L','A','G','M','A','X',' ',&
     &   ' '/
     data llags(1), llags(2), llags(3), llags(4), llags(5), llags(6),&
     &   llags(7), llags(8) /'L','A','G','S',' ',' ',' ',' '/
     data llgmx1(1), llgmx1(2), llgmx1(3), llgmx1(4), llgmx1(5),&
    &   llgmx1(6), llgmx1(7), llgmx1(8) /'L','A','G','M','A','X','+',&
     &   '1'/
     data llds(1), llds(2), llds(3), llds(4), llds(5), llds(6),&
     &   llds(7), llds(8) /'L','D','S','T','A','K',' ',' '/
     data ln(1), ln(2), ln(3), ln(4), ln(5), ln(6), ln(7), ln(8) /'N',&
     &   ' ',' ',' ',' ',' ',' ',' '/
     data lnf(1), lnf(2), lnf(3), lnf(4), lnf(5), lnf(6), lnf(7),&
     &   lnf(8) /'N','F',' ',' ',' ',' ',' ',' '/
     data lnm1(1), lnm1(2), lnm1(3), lnm1(4), lnm1(5), lnm1(6),&
     &   lnm1(7), lnm1(8) /'N','-','1',' ',' ',' ',' ',' '/
     data lnw(1), lnw(2), lnw(3), lnw(4), lnw(5), lnw(6), lnw(7),&
     &   lnw(8) /'N','W',' ',' ',' ',' ',' ',' '/
     data llyfft(1), llyfft(2), llyfft(3), llyfft(4), llyfft(5),&
    &   llyfft(6), llyfft(7), llyfft(8) /'L','Y','F','F','T',' ',' ',&
     &   ' '/
     data l1(1), l1(2), l1(3), l1(4), l1(5), l1(6), l1(7), l1(8) /'1',&
     &   ' ',' ',' ',' ',' ',' ',' '/
!
!     SET UP FOR ERROR CHECKING
!
      ierr = 0
      head = .true.
!
      do 10 i=1,15
         err(i) = .false.
   10 continue
!
!     CALL ERROR CHECKING ROUTINES
!
      call eisge(nmsub, ln, n, 17, 1, head, err(1), ln)
!
      if (option(4)) then
        call eisge(nmsub, lnf, nf, 1, 1, head, err(6), lnf)
       if (.not.err(6))&
     &     call eisge(nmsub, lispcf, ispcf, nf, 3, head, err(7), lnf)
        call eisge(nmsub, lnw, nw, 1, 1, head, err(8), lnw)
      end if
!
      if (.not.err(1)) then
        if (option(3)) then
         call eisii(nmsub, llagmx, lagmax, 1, n-1, 1, head, err(2),&
     &       l1, lnm1)
          if (.not.err(2)) then
            if (option(2)) then
             call eisge(nmsub, llacov, lacov, lagmax+1, 8, head,&
     &          err(3), llgmx1)
            else
             call eisge(nmsub, llacov, lacov, lagmax+1, 7, head,&
     &          err(3), llgmx1)
            end if
          end if
        end if
        if (.not.err(2)) then
         if (option(1))&
    &      call eisge(nmsub, llyfft, lyfft, nfft, 9, head, err(4),&
     &        llyfft)
!
          if (.not.err(8)) then
           if (option(4)) then
            if (option(3)) then
            call eivii(nmsub, llags, lags, nw, 1, lagmax, 0, head, 3,&
     &         nv, err(9), l1, llagmx)
            else
            call eivii(nmsub, llags, lags, nw, 1, n-1, 0, head, 3, nv,&
     &         err(9), l1, lnm1)
            end if
           end if
!
           if ((.not.err(6)) .and. (.not.err(9)))&
    &         call eisge(nmsub, llds, ldstak, ldsmin, 9, head, err(14),&
     &            llds)
          end if
        end if
      end if
!
      do 40 i=1,15
         if (err(i)) ierr = 1
   40 continue
!
      return
!
      end
