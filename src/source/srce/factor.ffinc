!FACTOR
      subroutine factor(n, npf, ipf, ipfexp)
!
!     Latest revision  -  03/15/90  (JRD)
!
!     This routine factors an input integer  "N"  and returns
!     the number of prime factors in  "NPF"  , The value of the
!     prime factors in the vector   "PF"  , and the exponent
!     of each of the prime factors in the vector  "IPFEXP"  .
!     the elements of   "IPF"  are stored in increasing order.
!     the length of the vectors is sufficient to accomodate
!     the prime factors of an integer up to 2 ** 128 (approximately
!     10 ** 40).
!
!     This routine is adapted from the factoring routine given
!     in ACM Algorithm 467 (CACM, 1973, Vol. 16, No. 11, Page 692-694).
!
!     Adapted by  -  Janet R. Donaldson
!                    Statistical Engineering Division
!                    National Bureau of Standards, Boulder, Colorado
!
!     Creation Date  -  October 23, 1980
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      integer n,npf
!
!  ARRAY ARGUMENTS
      integer ipf(50),ipfexp(50)
!
!  LOCAL SCALARS
      integer idiv,ifcur,iquot,npart
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     INTEGER IDIV, IFCUR
!        VARIOUS VARIABLES USED TO FACTOR    N   .
!     INTEGER IPF(50), IPFEXP(50)
!        THE VECTORS OF PRIME FACTORS OF   N   , AND THEIR EXPONENTS,
!        RESPECTIVELY.
!     INTEGER IQUOT
!        A VARIABLE USED TO FACTOR   N   .
!     INTEGER N
!        THE VALUE TO BE FACTORED.
!     INTEGER NPART
!        A VARIABLE USED TO FACTOR   N   .
!     INTEGER NPF
!        THE NUMBER OF FACTORS FOUND IN    N   .
!
!  DETERMINE THE FACTORS OF N
!
      npf = 0
      ifcur = 0
      npart = n
      idiv = 2
   10 continue
      iquot = npart/idiv
      if (npart.ne.idiv*iquot) go to 40
      if (idiv.le.ifcur) go to 20
      npf = npf + 1
      ipf(npf) = idiv
      ifcur = idiv
      ipfexp(npf) = 1
      go to 30
   20 continue
      ipfexp(npf) = ipfexp(npf) + 1
   30 continue
      npart = iquot
      go to 10
   40 continue
      if (iquot.le.idiv) go to 60
      if (idiv.ge.3) go to 50
      idiv = 3
      go to 10
   50 continue
      idiv = idiv + 2
      go to 10
   60 continue
      if (npart.le.1) return
      if (npart.le.ifcur) go to 70
      npf = npf + 1
      ipf(npf) = npart
      ipfexp(npf) = 1
      return
   70 continue
      ipfexp(npf) = ipfexp(npf) + 1
!
      end subroutine factor
