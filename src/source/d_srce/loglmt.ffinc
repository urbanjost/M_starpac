!LOGLMT
     subroutine loglmt (ilogy, ymn, ymx, ylabel, numrow, istep, dely,&
     &  ywidth, nlably, ydmn, ydmx)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     ADJUST PLOT LIMITS FOR LOG PLOTS, AND COMPUTE LOG AXIS LABELS
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 2, 1985
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   dely,ydmn,ydmx,ymn,ymx,ywidth
     integer&
     &   ilogy,istep,nlably,numrow
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   ylabel(20)
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   ynlog,yxlog
     integer&
     &   iyn,iynlog,iyx,iyxlog,j,k
!
!  INTRINSIC FUNCTIONS
      intrinsic log10,min,mod,nint,dble
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: DELY
!     INTEGER ILOGY, ISTEP, IYN, IYNLOG, IYX, IYXLOG, J, K
!     INTEGER NLABLY, NUMROW
!     REAL(KIND=WP) :: YLABEL(20)
!        THE Y-AXIS LABLES.
!     REAL(KIND=WP) :: YDMN, YDMX
!        THE Y-AXIS DATA LIMITS ACTUALLY USED.
!     REAL(KIND=WP) :: YMN, YMX
!        THE Y-AXIS PLOT LIMITS ACTUALLY USED.
!     REAL(KIND=WP) :: YNLOG, YWIDTH, YXLOG
!
      if (ilogy.eq.0) then
!
        ydmn = ymn
        ydmx = ymx
!
!       DETERMINE THE VALUE OF A DIVISION
!
        dely=ymx-ymn
        ywidth=dely/(numrow-1)
!
!       COMPUTE EVENLY SPACED LABELS FOR NON-LOG AXIS
!
        nlably = 0
        do 10 j = 1, numrow, istep
          nlably = nlably + 1
          ylabel(nlably) = ymx+(1-j)*ywidth
   10   continue
          if (mod(numrow,istep).eq.1) ylabel(nlably) = ymn
          if (ymx.eq.(-ymn) .and. mod(nlably,2).eq.1) then
             ylabel(nlably/2+1) = 0.0
          end if
      else
!
        ydmn = log10(ymn)
        ydmx = log10(ymx)
!
!       ADJUST AXIS LIMITS FOR LOG AXIS IF NECESSARY
!
        yxlog=log10(ymx)
        iyxlog=yxlog
        if (ymx.lt.1.0_wp) iyxlog=iyxlog-1
        ynlog=log10(ymn)
        if ((yxlog-ynlog).le.0.92082_wp) then
!
!         RANGE IS LESS THAN .9 DECADES
!
          iynlog=ynlog
          if (ymn.lt.1.0_wp) iynlog=iynlog-1
          if (iyxlog.le.iynlog) then
!
!           VALUES FALL IN THE SAME DECADE
!
            ynlog=iynlog
            yxlog=ynlog+1.0_wp
            iyxlog=yxlog
          else
!
!           VALUES FALL INTO TWO DECADES
!
            iyn=nint(ymn/(10.0_wp**iynlog))
            ynlog=min(log10(iyn*(10.0_wp**iynlog)),ynlog)
            yxlog=ynlog+1.0_wp
            iyxlog=yxlog
          end if
        end if
        ymx=yxlog
        ymn=ynlog
!
!       DETERMINE THE VALUE OF A DIVISION
!
        dely=ymx-ymn
        ywidth=dely/(numrow-1)
!
!       COMPUTE AXIS LABELS
!
        ylabel(1)=10.0_wp**yxlog
        iyx=ylabel(1)/(10.0_wp**iyxlog)
        k=2
        if (yxlog-ynlog.gt.3.0_wp) k=5
        if (yxlog-ynlog.gt.6.0_wp) k=10
!
        nlably = 1
!
        if (yxlog-ynlog.le.12.0_wp) then
!
!       SET NICE LABELS
!
          if (k.eq.10) iyx=1
          if (iyx.ne.1.and.(iyx-((iyx/k)*k)).ne.0) iyx=((iyx/k)*k)
          if (iyx.le.1) then
            iyx=10
            iyxlog=iyxlog-1
          end if
         if (ylabel(1)-iyx*(10.0_wp**iyxlog).gt.0.0_wp .and.&
    &     yxlog-(yxlog-ynlog)/(2.0_wp*(numrow-1)) .gt.&
     &     log10(dble(iyx))+iyxlog) iyx=iyx+k
          iyx=iyx-k
          if (iyx.le.0) then
            iyx=10
            iyxlog=iyxlog-1
          end if
          do 155 j=2,20
             nlably=nlably+1
             ylabel(nlably)=iyx*(10.0_wp**iyxlog)
             if (ylabel(nlably).le.10.0_wp**ynlog) go to 156
             iyx=iyx-k
             if (iyx.gt.0) go to 155
             iyx=10
             iyxlog=iyxlog-1
  155     continue
  156     ylabel(nlably)=10.0_wp**ynlog
        else
!
!         COMPUTE EVENLY SPACED LABELS
!
          do 160 j = istep, numrow, istep
            nlably = nlably + 1
            ylabel(nlably) = 10.0_wp**(ymx+(1.0_wp-j)*ywidth)
  160     continue
        end if
      end if
!
      return
      end
