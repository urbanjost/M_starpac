!LOGLMT
      SUBROUTINE LOGLMT (ILOGY, YMN, YMX, YLABEL, NUMROW, ISTEP, DELY,
     &  YWIDTH, NLABLY, YDMN, YDMX)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     ADJUST PLOT LIMITS FOR LOG PLOTS, AND COMPUTE LOG AXIS LABELS
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 2, 1985
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      REAL(KIND=WP) ::
     &   DELY,YDMN,YDMX,YMN,YMX,YWIDTH
      INTEGER
     &   ILOGY,ISTEP,NLABLY,NUMROW
!
!  ARRAY ARGUMENTS
      REAL(KIND=WP) ::
     &   YLABEL(20)
!
!  LOCAL SCALARS
      REAL(KIND=WP) ::
     &   YNLOG,YXLOG
      INTEGER
     &   IYN,IYNLOG,IYX,IYXLOG,J,K
!
!  INTRINSIC FUNCTIONS
      INTRINSIC LOG10,MIN,MOD,NINT,DBLE
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: DELY
!     INTEGER ILOGY, ISTEP, IYN, IYNLOG, IYX, IYXLOG, J, K
!     INTEGER NLABLY, NUMROW
!     REAL(KIND=WP) :: YLABEL(20)
!        THE Y-AXIS LABLES.
!     REAL(KIND=WP) :: YDMN, YDMX
!        THE Y-AXIS DATA LIMITS ACTUALLY USED.
!     REAL(KIND=WP) :: YMN, YMX
!        THE Y-AXIS PLOT LIMITS ACTUALLY USED.
!     REAL(KIND=WP) :: YNLOG, YWIDTH, YXLOG
!
      IF (ILOGY.EQ.0) THEN
!
        YDMN = YMN
        YDMX = YMX
!
!       DETERMINE THE VALUE OF A DIVISION
!
        DELY=YMX-YMN
        YWIDTH=DELY/(NUMROW-1)
!
!       COMPUTE EVENLY SPACED LABELS FOR NON-LOG AXIS
!
        NLABLY = 0
        DO 10 J = 1, NUMROW, ISTEP
          NLABLY = NLABLY + 1
          YLABEL(NLABLY) = YMX+(1-J)*YWIDTH
   10   CONTINUE
          IF (MOD(NUMROW,ISTEP).EQ.1) YLABEL(NLABLY) = YMN
          IF (YMX.EQ.(-YMN) .AND. MOD(NLABLY,2).EQ.1) THEN
             YLABEL(NLABLY/2+1) = 0.0
          END IF
      ELSE
!
        YDMN = LOG10(YMN)
        YDMX = LOG10(YMX)
!
!       ADJUST AXIS LIMITS FOR LOG AXIS IF NECESSARY
!
        YXLOG=LOG10(YMX)
        IYXLOG=YXLOG
        IF (YMX.LT.1.0_WP) IYXLOG=IYXLOG-1
        YNLOG=LOG10(YMN)
        IF ((YXLOG-YNLOG).LE.0.92082_WP) THEN
!
!         RANGE IS LESS THAN .9 DECADES
!
          IYNLOG=YNLOG
          IF (YMN.LT.1.0_WP) IYNLOG=IYNLOG-1
          IF (IYXLOG.LE.IYNLOG) THEN
!
!           VALUES FALL IN THE SAME DECADE
!
            YNLOG=IYNLOG
            YXLOG=YNLOG+1.0_WP
            IYXLOG=YXLOG
          ELSE
!
!           VALUES FALL INTO TWO DECADES
!
            IYN=NINT(YMN/(10.0_WP**IYNLOG))
            YNLOG=MIN(LOG10(IYN*(10.0_WP**IYNLOG)),YNLOG)
            YXLOG=YNLOG+1.0_WP
            IYXLOG=YXLOG
          END IF
        END IF
        YMX=YXLOG
        YMN=YNLOG
!
!       DETERMINE THE VALUE OF A DIVISION
!
        DELY=YMX-YMN
        YWIDTH=DELY/(NUMROW-1)
!
!       COMPUTE AXIS LABELS
!
        YLABEL(1)=10.0_WP**YXLOG
        IYX=YLABEL(1)/(10.0_WP**IYXLOG)
        K=2
        IF (YXLOG-YNLOG.GT.3.0_WP) K=5
        IF (YXLOG-YNLOG.GT.6.0_WP) K=10
!
        NLABLY = 1
!
        IF (YXLOG-YNLOG.LE.12.0_WP) THEN
!
!       SET NICE LABELS
!
          IF (K.EQ.10) IYX=1
          IF (IYX.NE.1.AND.(IYX-((IYX/K)*K)).NE.0) IYX=((IYX/K)*K)
          IF (IYX.LE.1) THEN
            IYX=10
            IYXLOG=IYXLOG-1
          END IF
          IF (YLABEL(1)-IYX*(10.0_WP**IYXLOG).GT.0.0_WP .AND.
     &     YXLOG-(YXLOG-YNLOG)/(2.0_WP*(NUMROW-1)) .GT.
     &     LOG10(DBLE(IYX))+IYXLOG) IYX=IYX+K
          IYX=IYX-K
          IF (IYX.LE.0) THEN
            IYX=10
            IYXLOG=IYXLOG-1
          END IF
          DO 155 J=2,20
             NLABLY=NLABLY+1
             YLABEL(NLABLY)=IYX*(10.0_WP**IYXLOG)
             IF (YLABEL(NLABLY).LE.10.0_WP**YNLOG) GO TO 156
             IYX=IYX-K
             IF (IYX.GT.0) GO TO 155
             IYX=10
             IYXLOG=IYXLOG-1
  155     CONTINUE
  156     YLABEL(NLABLY)=10.0_WP**YNLOG
        ELSE
!
!         COMPUTE EVENLY SPACED LABELS
!
          DO 160 J = ISTEP, NUMROW, ISTEP
            NLABLY = NLABLY + 1
            YLABEL(NLABLY) = 10.0_WP**(YMX+(1.0_WP-J)*YWIDTH)
  160     CONTINUE
        END IF
      END IF
!
      RETURN
      END
