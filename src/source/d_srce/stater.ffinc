!STATER
      SUBROUTINE STATER(NMSUB, WT, N, LDSTAK, WTS, NNZW, STACK, IERR)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS SUBROUTINE CHECKS INPUT PARAMETERS TO THE USER
!     CALLABLE MEMBERS OF THE STAT FAMILY OF ROUTINES
!     FOR ERRORS AND REPORTS ANY THAT IT FINDS, BESIDES
!     RETURNING A FLAG INDICATING THAT ERRORS HAVE BEEN
!     FOUND.
!
!     WRITTEN BY - JOHN E. KOONTZ
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS
!
!     CREATION DATE  -  MAY 17, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      INTEGER
     +   IERR,LDSTAK,N,NNZW
      LOGICAL
     +   STACK,WTS
!
!  ARRAY ARGUMENTS
      REAL(KIND=WP) ::
     +   WT(*)
      CHARACTER
     +   NMSUB(6)*1
!
!  LOCAL SCALARS
      INTEGER
     +   LDSMIN,NZW
      LOGICAL
     +   HEAD,IER1,IER2,IER3
!
!  LOCAL ARRAYS
      CHARACTER
     +   LLDS(8)*1,LN(8)*1,LTHREE(8)*1,LWT(8)*1
!
!  EXTERNAL SUBROUTINES
      EXTERNAL EISGE,ERVWT,LDSCMP
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     LOGICAL HEAD
!        A FLAG INDICATING WHETHER THE HEADING SHOULD BE PRINTED
!        (TRUE) OR NOT (FALSE).  IF A HEADING IS PRINTED, THE VALUE
!        OF HEAD WILL BE CHANGED TO FALSE.
!     INTEGER IERR
!        OUTPUT PARAMETER.  A FLAG INDICATING WHETHER OR
!        NOT AN ERROR HAS BEEN FOUND.  0 = OK, 1 = ERROR.
!     LOGICAL IER1
!        TRUE IF N .LT. 3
!     LOGICAL IER2
!        TRUE IF LDSTAK .LT. (N + 13)/2.0E0_WP
!     LOGICAL IER3
!        TRUE IF SOME WT .LT. 0.0E0_WP OR NNZW .LT. 3
!     INTEGER LDSMIN
!        MINIMUM LENGTH OF FRAMEWORK AREA IN DOUBLE
!        PRECISION ELEMENTS.
!     INTEGER LDSTAK
!        INPUT PARAMETER.  THE NUMBER OF LOCATIONS PROVIDED IN
!        THE FRAMEWORK AREA.
!     CHARACTER*1 LLDS(8), LN(8), LTHREE(8), LWT(8)
!        THE ARRAY(S) CONTAINING THE NAME(S) FO THE VARIALBE(S) CHECKED
!        FOR ERRORS
!     INTEGER N
!        INPUT PARAMETER.  THE NUMBER OF ELEMENTS IN Y AND WT.
!     CHARACTER*1 NMSUB(6)
!        THE NAME OF THE CALLING SUBROUTINE
!     INTEGER NNZW
!        OUTPUT PARAMETER.  IF WTS, THEN SET EQUAL TO THE
!        NUMBER OF VALUES IN WT WHICH ARE POSITIVE.  ELSE,
!        UNDEFINED.
!     INTEGER NZW
!        THE NUMBER OF ZERO WEIGHTS.
!     LOGICAL STACK
!        A FLAG INDICATING WHETHER THIS ROUTINE USES THE STACK (TRUE)
!        OR NOT (FALSE).
!     REAL(KIND=WP) :: WT(N)
!        INPUT PARAMETER.  THE VECTOR OF WEIGHTS CORRESPONDING
!        TO THE VECTOR Y.
!     LOGICAL WTS
!        INPUT PARAMETER.  A FLAG INDICATING WHETHER OR NOT
!        THERE IS REALLY A VECTOR WT (TRUE), OR ONLY A DUMMY PARAMETER
!        (FALSE).
!
!     INITIALIZE NAME VECTORS
!
      DATA LLDS(1), LLDS(2), LLDS(3), LLDS(4), LLDS(5), LLDS(6),
     +  LLDS(7), LLDS(8) / 'L', 'D', 'S', 'T', 'A', 'K', ' ', ' '/
      DATA     LN(1),    LN(2),    LN(3),    LN(4),    LN(5),    LN(6),
     +  LN(7), LN(8)  / 'N', ' ', ' ', ' ', ' ', ' ', ' ', ' '/
      DATA LTHREE(1),LTHREE(2),LTHREE(3),LTHREE(4),LTHREE(5),LTHREE(6),
     +  LTHREE(7), LTHREE(8) / 'T', 'H', 'R', 'E', 'E', ' ', ' ', ' '/
      DATA    LWT(1),   LWT(2),   LWT(3),   LWT(4),   LWT(5),   LWT(6),
     +  LWT(7), LWT(8) / 'W', 'T', ' ', ' ', ' ', ' ', ' ', ' '/
!
!     INITIALIZE ERROR FLAGS
!
      IER1 = .FALSE.
      IER2 = .FALSE.
      IER3 = .FALSE.
!
      IERR = 0
!
      HEAD = .TRUE.
!
!     CHECK TO SEE THAT THERE ARE AT LEAST THREE DATA POINTS.
!
      CALL EISGE(NMSUB, LN, N, 3, 2, HEAD, IER1, LTHREE)
!
!     CHECK TO SEE THAT AN AMOUNT OF WORK AREA EQUAL
!     IN LENGTH TO THE REQUIREMENTS OF THE PERMUTATION
!     VECTOR WILL BE AVAILABLE.
!
      IF (STACK) THEN
         CALL LDSCMP(1, 0, N, 0, 0, 0, 'D', 0, LDSMIN)
         CALL EISGE(NMSUB, LLDS, LDSTAK, LDSMIN, 9, HEAD, IER2, LLDS)
      END IF
!
!     IF THERE ARE WEIGHTS
!     CHECK TO SEE THAT AT LEAST THREE DATA ITEMS HAVE NONZERO WEIGHTS.
!
      NNZW = N
      IF (WTS) THEN
         CALL ERVWT(NMSUB, LWT, WT, N, 3, HEAD, NNZW, NZW, 1, IER3,
     +              LTHREE)
      END IF
!
!     SEE IF ANY ERRORS WERE FOUND.
!
      IF (IER1 .OR. IER2 .OR. IER3) IERR = 1
      RETURN
      END
