!VPLMT
     subroutine vplmt (ym, ymmiss, n, m, iym, ylb, yub, ymn,&
     &  ymx, error, nmsub, miss, nsampl)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS ROUTINE SETS THE PLOT LIMITS FOR VERTICAL PLOTS
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  JANUARY 21, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   ylb,ymn,ymx,yub
     integer&
     &   iym,m,n,nsampl
     logical&
     &   error,miss
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   ym(iym,m),ymmiss(m)
     character&
     &   nmsub(6)*1
!
!  LOCAL SCALARS
     integer&
     &   i,ii,iprt,j
     logical&
     &   head,setlmt
!
!  EXTERNAL FUNCTIONS
!      LOGICAL
!     +   MVCHK
!      EXTERNAL MVCHK
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL ADJLMT,EHDR,IPRINT
!
!  INTRINSIC FUNCTIONS
      intrinsic max,min
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     LOGICAL ERROR
!        A VALUE INDICATING WHETHER AN ERROR WAS DETECTED (TRUE)
!        OR NOT (FALSE).
!     LOGICAL HEAD
!        PRINT HEADING (HEAD=TRUE) OR NOT (HEAD=FALSE).
!     INTEGER I, II
!        INDEXING VARIABLES.
!     INTEGER IPRT
!        *
!     INTEGER IYM
!        ACTUAL ROW DIMENSION OF YM DECLARED IN THE USERS MAIN PROGRAM
!     INTEGER J
!        AN INDEX VARIABLE.
!     INTEGER M
!        THE NUMBER OF VECTORS IN YM
!     LOGICAL MISS
!        INDICATOR VARIABLE USED TO DESIGNATE WHETHER MISSING VALUES
!        MAY BE PRESENT (MISS = .TRUE.) OR NOT (MISS = .FALSE.)
!     INTEGER N
!        THE INTEGER NUMBER OF OBSERVATIONS .
!     CHARACTER*1 NMSUB(6)
!        THE CHARACTERS OF THE CALLING ROUTINES NAME.
!     INTEGER NSAMPL
!        *
!     LOGICAL SETLMT
!        AN INDICATOR VARIABLE USED TO DETERMINE IF STARTING VALUES
!        FOR XLB, XINC, YMN, YMX HAVE BEEN FOUND.
!     REAL(KIND=WP) :: YLB
!        THE USER SUPPLIED Y-AXIS LOWER BOUND.
!     REAL(KIND=WP) :: YM(IYM,M)
!        THE ARRAY CONTAINING THE DEPENDENT VARIABLE(S).
!     REAL(KIND=WP) :: YMMISS(M)
!        THE USER SUPPLIED CODE WHICH IS USED TO DETERMINE WHETHER OR
!        NOT AN OBSERVATION IS MISSING.
!        IF YM(I,J) = YMMISS(J), THE VALUE IS ASSUMED MISSING, OTHERWISE
!        IT IS NOT.
!     REAL(KIND=WP) :: YMN, YMX
!        THE Y-AXIS LOWER AND UPPER LIMITS ACTUALLY USED.
!     REAL(KIND=WP) :: YUB
!        THE USER SUPPLIED Y-AXIS UPPER BOUNDS.
!
      error = .false.
!
      if (ylb.lt.yub) then
!
!       SET LIMITS TO USER SPECIFIED VALUES
!
        ymn = ylb
        ymx = yub
!
      else
!
!       SET LIMITS TO RANGE OF VALUES WITHIN ANY USER SPECIFIED VALUES
!
        setlmt = .false.
        ii = 1
!
!       FIND FIRST VALUE TO BE PLOTTED
!
        do 20 i=1,n,nsampl
           do 10 j=1,m
              if (miss .and. mvchk(ym(i,j),ymmiss(j))) go to 10
             if ((ylb.lt.yub) .and. ((ym(i,j).lt.ylb) .or.&
     &           (yub.lt.ym(i,j)))) go to 10
              if (setlmt) then
                ymn = min(ymn, ym(i,j))
                ymx = max(ymx, ym(i,j))
              else
                ymn = ym(i,j)
                ymx = ym(i,j)
                setlmt = .true.
                ii = i + nsampl
              end if
   10      continue
           if (setlmt) go to 30
   20   continue
!
   30   if (ii.le.1) then
!
!         NO VALUES TO BE PLOTTED.  PRINT ERROR MESSAGE
!
          error = .true.
          call iprint(iprt)
          head = .true.
          call ehdr(nmsub,head)
          if (ylb.ge.yub) then
            write (iprt, 1010)
          else
            write (iprt, 1020)
          end if
          write (iprt, 1030)
!
        else
!
!         FIND LIMITS FROM REMAINING VALUES
!
          if (ii.le.n) then
            do 50 i=ii,n,nsampl
               do 40 j=1,m
                  if (miss .and. mvchk(ym(i,j),ymmiss(j))) go to 40
                 if ((ylb.lt.yub) .and. ((ym(i,j).lt.ylb) .or.&
     &               (yub.lt.ym(i,j)))) go to 40
                  ymn = min(ymn, ym(i,j))
                  ymx = max(ymx, ym(i,j))
   40          continue
   50       continue
          end if
        end if
!
!       ADJUST Y AXIS LIMITS IF EQUAL
!
        if (ymn .ge. ymx) call adjlmt(ymn, ymx)
!
      end if
!
      return
!
!     FORMAT STATEMENTS
!
1010 format (/&
     &   44h no non-missing plot coordinates were found.)
1020 format (/&
    &   40h no non-missing values were found within,&
     &   26h the user supplied limits.)
1030 format (/&
     &   30h the plot has been suppressed.)
      end
