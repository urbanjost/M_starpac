!AMEMN
     subroutine amemn(y, weight, nnzw, wt, lwt, xm, n, m, ixm, nrests,&
    & aprxdv, ifixd, par, pare, npar, res, page, wide,&
    & hlfrpt, stp, lstp, mit, stopss, stopp, scale, lscale, delta,&
    & ivaprx, iptout, ndigit, rsd, rests, sdpvi, sdresi, vcvl, lvcvl,&
     & d, iwork, iiwork, rwork, irwork, nlhdr, npare, pvt)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS IS THE CONTROLLING SUBROUTINE FOR PERFORMING NONLINEAR
!     LEAST SQUARES REGRESSION USING THE NL2 SOFTWARE PACKAGE
!     (IMPLEMENTING THE METHOD OF DENNIS, GAY AND WELSCH).
!     THIS SUBROUTINE WAS ADAPTED FROM SUBROUTINE NL2SOL.
!
!     REFERENCES
!
!     DENNIS, J.E., GAY, D.M., AND WELSCH, R.E. (1979), AN ADAPTIVE
!             NONLINEAR LEAST-SQUARES ALGORITHM, (BEING REVISED).
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  APRIL 2, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      real(kind=wp) :: delta,rsd,stopp,stopss
     integer iiwork,irwork,ivaprx,ixm,lscale,lstp,lvcvl,lwt,m,mit,n, ndigit,nnzw,npar,npare,nrests,sdpvi,sdresi,vcvl
      logical aprxdv,hlfrpt,page,weight,wide
!
!  ARRAY ARGUMENTS
     real(kind=wp) :: d(nrests,*),par(*),pare(*),pvt(*),res(*),rests(*),rwork(*), scale(*),stp(*),wt(*),xm(ixm,*),y(*)
      integer ifixd(*),iptout(*),iwork(*)
!
!  SUBROUTINE ARGUMENTS
       external nlhdr
!
!  SCALARS IN COMMON
      integer ierr
!
!  LOCAL SCALARS
     integer cnvcod,covmat,i,icnvcd,ivcvpt,qtr,rd,rdi,rsave,rsshlf,s, scl
      logical cmpdrv,done,head,newitr,prtsmy
!
!  LOCAL ARRAYS
      integer iskull(10)
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL AMDRV,AMEFIN,AMEISM,DRV,MDLTS3,NL2ITR,NLERR,NLINIT,NLITRP,NLSUPK,REPCK,DCOPY
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     LOGICAL APRXDV
!        THE VARIABLE USED TO INDICATE WHETHER NUMERICAL
!        APPROXIMATIONS TO THE DERIVATIVE WERE USED (TRUE) OR NOT
!        (FALSE).
!     LOGICAL CMPDRV
!        THE VARIABLE USED TO INDICATE WHETHER DERIVATIVES MUST BE
!        COMPUTED (TRUE) OR NOT (FALSE).
!     INTEGER CNVCOD
!        A VALUE USED TO CONTROL THE PRINTING OF ITERATION REPORTS.
!     INTEGER COVMAT
!        THE LOCATION IN IWORK OF THE STARTING LOCATION IN RWORK
!        OF THE BEGINNING OF THE VCV MATRIX.
!     REAL(KIND=WP) :: D(NRESTS,NPAR)
!        THE FORWARD DIFFERENCE QUOTIENT APPROXIMATION TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER.
!     REAL(KIND=WP) :: DELTA
!        THE MAXIMUM CHANGE ALLOWED IN THE MODEL PARAMETERS AT THE
!        FIRST ITERATION.
!     EXTERNAL DRV
!        THE NAME OF THE USER SUPPLIED SUBROUTINE WHICH COMPUTES THE
!        DERIVATIVE (JACOBIAN) MATRIX OF THE MODEL.
!     LOGICAL DONE
!        THE VARIABLE USED TO INDICATE WHETHER THIS IS THE FINAL
!        COMPUTATION OF THE JACOBIAN OR NOT.
!     LOGICAL HEAD
!        THE VARIABLE USED TO INDICATE WHETHER A HEADING IS TO BE
!        PRINTED DURING A GIVEN CALL TO THE ITERATION REPORT (TRUE)
!        OR NOT (FALSE).
!     LOGICAL HLFRPT
!        THE VARIABLE WHICH INDICATES WHETHER THE DERIVATIVE
!        CHECKING ROUTINE HAS ALREADY PRINTED PART OF THE
!        INITIAL SUMMARY (TRUE) OR NOT (FALSE).
!     INTEGER I
!        AN INDEXING VARIABLE.
!     INTEGER ICNVCD
!        THE LOCATION IN IWORK OF
!        THE CONVERGENCE CONDITION.
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST.
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED.
!        IF IERR .GE. 1, ERRORS WERE DETECTED.
!     INTEGER IFIXD(NPAR)
!        THE INDICATOR VALUES USED TO DESIGNATE WHETHER THE
!        PARAMETERS ARE TO BE OPTIMIZED OR ARE TO BE HELD FIXED.
!        IF IFIXED(I).NE.0, THEN PAR(I) WILL BE HELD FIXED.
!        IF IFIXED(I).EQ.0, THEN PAR(I) WILL BE OPTIMIZED.
!     INTEGER IIWORK
!        THE DIMENSION OF THE INTEGER WORK VECTOR IWORK.
!     INTEGER IPTOUT(NDIGIT)
!        THE VARIABLE USED TO CONTROL PRINTED OUTPUT FOR EACH SECTION.
!     INTEGER IRWORK
!        THE DIMENSION OF THE DOUBLE PRECISION WORK VECTOR RWORK.
!     INTEGER ISKULL(10)
!        AN ERROR MESSAGE INDICATOR VARIABLE.
!     INTEGER IVAPRX
!        AN INDICATOR VALUE USED TO DESIGNATE WHICH OPTION IS TO BE USED
!        TO COMPUTE THE VARIANCE COVARIANCE MATRIX (VCV), WHERE
!        IVAPRX LE 0 INDICATES THE THE DEFAULT OPTION WILL BE USED
!        IVAPRX EQ 1 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(TRANSPOSE(JACOBIAN)*JACOBIAN)
!                    USING BOTH THE MODEL SUBROUTINE THE USER SUPPLIED
!                    DERIVATIVE SUBROUTINE WHEN IT IS AVAILABLE
!        IVAPRX EQ 2 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(HESSIAN)
!                    USING BOTH THE MODEL SUBROUTINE THE USER SUPPLIED
!                    DERIVATIVE SUBROUTINE WHEN IT IS AVAILABLE
!        IVAPRX EQ 3 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(HESSIAN)*TRANSPOSE(JACOBIAN)*JACOBIAN
!                          *INVERSE(HESSIAN)
!                    USING BOTH THE MODEL SUBROUTINE THE USER SUPPLIED
!                    DERIVATIVE SUBROUTINE WHEN IT IS AVAILABLE
!        IVAPRX EQ 4 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(TRANSPOSE(JACOBIAN)*JACOBIAN)
!                    USING ONLY THE MODEL SUBROUTINE
!        IVAPRX EQ 5 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(HESSIAN)
!                    USING ONLY THE MODEL SUBROUTINE
!        IVAPRX EQ 6 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(HESSIAN)*TRANSPOSE(JACOBIAN)*JACOBIAN
!                          *INVERSE(HESSIAN)
!                    USING ONLY THE MODEL SUBROUTINE
!        IVAPRX GE 7 INDICATES THE DEFAULT OPTION WILL BE USED
!     INTEGER IVCVPT
!        AN INDICATOR VALUE USED TO DESIGNATE WHICH FORM OF THE
!        VARIANCE COVARIANCE MATRIX (VCV) IS BEING PRINTED, WHERE
!        IVCVPT = 1 INDICATES THE VCV WAS COMPUTED AS
!                   INVERSE(TRANSPOSE(JACOBIAN)*JACOBIAN)
!        IVCVPT = 2 INDICATES THE VCV WAS COMPUTED AS
!                   INVERSE(HESSIAN)
!        IVCVPT = 3 INDICATES THE VCV WAS COMPUTED AS
!                   INVERSE(HESSIAN)*TRANSPOSE(JACOBIAN)*JACOBIAN
!                       *INVERSE(HESSIAN)
!     INTEGER IWORK(IIWORK)
!        THE INTEGER WORK SPACE VECTOR USED BY THE NL2 SUBROUTINES.
!     INTEGER IXM
!        THE FIRST DIMENSION OF THE INDEPENDENT VARIABLE ARRAY.
!     INTEGER LSCALE
!        THE ACTUAL LENGTH OF THE VECTOR SCALE.
!     INTEGER LSTP
!        THE ACTUAL LENGTH OF THE VECTOR STP.
!     INTEGER LVCVL
!        THE LENGTH OF THE VECTOR CONTAINING
!        THE LOWER HALF OF THE VCV MATRIX, STORED ROW WISE.
!     INTEGER LWT
!        THE ACTUAL LENGTH OF THE VECTOR WT.
!     INTEGER M
!        THE NUMBER OF INDEPENDENT VARIABLES.
!     INTEGER MIT
!        THE MAXIMUM NUMBER OF ITERATIONS ALLOWED.
!     EXTERNAL MDLTS3
!        THE STARPAC FORMAT SUBROUTINE FOR COMPUTING THE ARIMA MODEL
!        RESIDUALS.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NDIGIT
!        THE NUMBER OF DIGITS IN THE PRINT CONTROL VALUE.
!     LOGICAL NEWITR
!        A FLAG USED TO INDICATE WHETHER A NEW ITERATION HAS BEEN
!        COMPLETED (TRUE) OR NOT (FALSE).
!     EXTERNAL NLHDR
!        THE NAME OF THE ROUTINE WHICH PRODUCES THE HEADING.
!     INTEGER NNZW
!        THE NUMBER OF NON ZERO WEIGHTS.
!     INTEGER NPAR
!        THE NUMBER OF PARAMETERS IN THE MODEL.
!     INTEGER NPARE
!        THE NUMBER OF PARAMETERS TO BE OPTIMIZED.
!     INTEGER NRESTS
!        THE MAXIMUM NUMBER OF RESIDUALS TO BE COMPUTED.
!     LOGICAL PAGE
!        THE VARIABLE USED TO INDICATE WHETHER A GIVEN SECTION OF
!        THE OUTPUT IS TO BEGIN ON A NEW PAGE (TRUE) OR NOT (FALSE).
!     REAL(KIND=WP) :: PAR(NPAR)
!        THE CURRENT ESTIMATES OF THE PARAMETERS.
!     REAL(KIND=WP) :: PARE(NPAR)
!        THE CURRENT ESTIMATES OF THE PARAMETERS, BUT ONLY
!        THOSE TO BE OPTIMIZED (NOT THOSE WHOSE VALUES ARE FIXED).
!     LOGICAL PRTSMY
!        THE VARIABLE USED TO INDICATE WHETHER THE SUMMARY
!        INFORMATION IS TO BE PRINTED (TRUE) OR NOT (FALSE).
!     REAL(KIND=WP) :: PVT(N)
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES.
!     INTEGER QTR
!        THE LOCATION IN IWORK OF THE STARTING LOCATION IN RWORK
!        THE ARRAY Q TRANSPOSE R.
!     INTEGER RD
!        THE LOCATION IN IWORK OF THE STARTING LOCATION IN RWORK OF
!        THE DIAGONAL ELEMENTS OF THE R MATRIX OF THE Q - R
!        FACTORIZATION OF D.
!     INTEGER RDI
!        THE LOCATION IN RWORK OF THE DIAGONAL ELEMENTS OF THE R
!        MATRIX OF THE Q - R FACTORIZATION OF D.
!     REAL(KIND=WP) :: RES(N)
!        THE RESIDUALS FROM THE FIT.
!     REAL(KIND=WP) :: RESTS(NRESTS)
!        THE RESIDUALS FROM THE ARIMA MODEL.
!     INTEGER RSAVE
!        THE LOCATION IN IWORK OF THE STARTING LOCATION IN RWORK
!        THE ARRAY RSAVE.
!     REAL(KIND=WP) :: RSD
!        THE VALUE OF THE RESIDUAL STANDARD DEVIATION AT THE SOLUTION.
!     INTEGER RSSHLF
!        THE LOCATION IN RWORK OF
!        HALF THE RESIDUAL SUM OF SQUARES.
!     REAL(KIND=WP) :: RWORK(IRWORK)
!        THE DOUBLE PRECISION WORK VECTOR USED BY THE NL2 SUBROUTINES.
!     INTEGER S
!        THE LOCATION IN IWORK OF THE STARTING LOCATION IN RWORK
!        THE ARRAY OF SECOND ORDER TERMS OF THE HESSIAN.
!     REAL(KIND=WP) :: SCALE(LSCALE)
!        THE TYPICAL SIZE OF THE PARAMETERS.
!     INTEGER SCL
!        THE INDEX IN RWORK OF THE 1ST VALUE OF THE USER SUPPLIED SCALE
!        VALUE.
!     INTEGER SDPVI
!        THE STARTING LOCATION IN RWORK OF
!        THE STANDARD DEVIATIONS OF THE PREDICTED VALUES.
!     INTEGER SDRESI
!        THE STARTING LOCATION IN RWORK OF THE
!        THE STANDARDIZED RESIDUALS.
!     REAL(KIND=WP) :: STOPP
!        THE STOPPING CRITERION FOR THE TEST BASED ON THE MAXIMUM SCALED
!        RELATIVE CHANGE IN THE ELEMENTS OF THE MODEL PARAMETER VECTOR
!        PREDICTED DECREASE IN THE RESIDUAL STANDARD DEVIATION (COMPUTED
!        BY STARPAC) TO THE CURRENT RESIDUAL SUM OF SQUARES ESTIMATE.
!     REAL(KIND=WP) :: STOPSS
!        THE STOPPING CRITERION FORTHE TEST BASED ON THE RATIO OF THE
!        PREDICTED DECREASE IN THE RESIDUAL SUM OF SQUARES (COMPUTED
!        BY STARPAC) TO THE CURRENT RESIDUAL SUM OF SQUARES ESTIMATE.
!     REAL(KIND=WP) :: STP(LSTP)
!        THE DUMMY STEP SIZE ARRAY.
!     INTEGER VCVL
!        THE STARTING LOCATION IN RWORK OF THE LOWER HALF OF THE
!        VCV MATRIX, STORED ROW WISE.
!     LOGICAL WEIGHT
!        THE VARIABLE USED TO INDICATE WHETHER WEIGHTED ANALYSIS IS TO
!        BE PERFORMED (TRUE) OR NOT (FALSE).
!     LOGICAL WIDE
!        THE VARIABLE USED TO INDICATE WHETHER THE HEADING SHOULD
!        BE FULL WIDTH (TRUE) OR NOT (FALSE).
!     REAL(KIND=WP) :: WT(LWT)
!        THE USER SUPPLIED WEIGHTS.
!     REAL(KIND=WP) :: XM(IXM,M)
!        THE ARRAY IN WHICH ONE ROW OF THE INDEPENDENT VARIABLE ARRAY
!        IS STORED.
!     REAL(KIND=WP) :: Y(N)
!        THE ARRAY OF THE DEPENDENT VARIABLE.
!
!     IWORK SUBSCRIPT VALUES
!
     data cnvcod /34/, icnvcd /1/, covmat /26/, qtr /49/, rd /51/, rsave /52/, s/53/
      data rsshlf /10/
!
!+++++++++++++++++++++++++++++++  BODY  ++++++++++++++++++++++++++++++++
!
!     INITIALIZE CONTROL PARAMETERS
!
     call nlinit (nrests, ifixd, par, npar, pare, npare, mit, stopss,&
    &   stopp, scale, lscale, delta, ivaprx, aprxdv, ivcvpt, iwork,&
     &   iiwork, rwork, irwork, scl)
!
      cmpdrv = .true.
      done = .false.
      head = .true.
      newitr = .false.
      prtsmy = (iptout(1).ne.0)
!
!     COMPUTE RESIDUALS
!
   10 call mdlts3(par, npar, xm, n, m, ixm, rests)
!
!     PRINT INITIAL SUMMARY
!
      if (.not.prtsmy) go to 30
     call ameism(nlhdr, page, wide, hlfrpt, npar, m, n, nnzw, weight,&
    &   ifixd, par, scale, lscale, iwork, iiwork, rwork, irwork, rests,&
     &   aprxdv, stp, lstp, npare)
      prtsmy = .false.
!
   30 continue
!
      if (.not.cmpdrv) go to 50
!
      cmpdrv = .false.
!
   40 continue
!
!     PRINT ITERATION REPORT IF DESIRED
!
     if ((iptout(2).ne.0) .and. newitr) call nlitrp(nlhdr, head, page,&
    &   wide, iptout(2), npar, nnzw, iwork, iiwork, rwork, irwork,&
     &   ifixd, pare, npare)
!
!  ***  COMPUTE JACOBIAN  ***
!
      if (done) call mdlts3(par, npar, xm, n, m, ixm, rests)
!
     call amdrv(mdlts3, drv, done, ifixd, par, npar, xm, n, m, ixm,&
     &  nrests, rests, d, weight, wt, lwt, stp, lstp, rwork(scl), npare)
!
      if (done) go to 70
!
!     COMPUTE NEXT ITERATION
!
  50 continue
     call nl2itr(rwork(scl), iwork, d(:,:), nrests, nrests, npare, rests, rwork, pare)
!
!     UNPACK PARAMETERS
!
      call nlsupk(pare, npare, par, ifixd, npar)
!
      newitr = (iwork(cnvcod).eq.0)
      if (iwork(1)-2) 10, 40, 60
!
   60 done = .true.
      go to 40
   70 continue
!
!     SET ERROR FLAGS, IF NECESSARY
!
      call nlerr(iwork(icnvcd), iskull)
!
!     FINISH COMPUTATIONS AND PRINT ANY DESIRED RESULTS
!
      call dcopy(n, rests(nrests-n+1), 1, res(1), 1)
      do 75 i = 1, n
         pvt(i) = y(i) - res(i)
   75 continue
      sdpvi = iwork(rsave)
      sdresi = iwork(qtr)
      vcvl = iwork(covmat)
      if (vcvl.ge.1) go to 80
!
      vcvl = iwork(s)
      if (ierr.ne.0) go to 80
      iskull(1) = 1
      iskull(7) = 1
      ierr = 7
!
   80 continue
!
      lvcvl = npare*(npare+1)/2
!
      rdi = iwork(rd)
!
!     REPCK IS CALLED TO AVOID MODIFICATION OF NLS CODE.  FUTURE
!     REVISIONS OF NLS CODE SHOULD INCLUDE MODIFICATIONS NECESSARY
!     TO ELIMINATE NEED TO REPACK D FOR ARIMA CODE.
!
      call repck(d, nrests, npar, n)
     call amefin(y, weight, nnzw, wt, lwt, xm, n, m, ixm, ifixd, par,&
     &   npar, npare, res, page, wide, iptout, ndigit, rwork(rsshlf),&
     &   rsd, pvt, rwork(sdpvi), rwork(sdresi), rwork(rdi),&
     &   rwork(vcvl), lvcvl, d, nlhdr, ivcvpt, iskull, nrests)
!
      end
