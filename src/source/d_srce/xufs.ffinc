!XUFS
      subroutine xufs(ldstak,typ)
      real(kind=wp),intent(in) :: typ
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     ROUTINE TO TEST THE FOURIER SPECTRUM ANALYSIS ROUTINES
!
!     SERIES Y IS THE FIRST 50 VALUES OF THE SERIES LISTED ON PAGE
!     318 OF JENKINS AND WATTS.  THE SPECTRUM OF THIS SERIES IS SHOWN
!     FOR VARIOUS BANDWIDTH ON PAGE 270 OF JENKINS AND WATTS.
!
!     SERIES Z IS THE WOLF SUNSPOT NUMBERS FROM 1700 TO 1960 AS
!     TABULATED BY WALDMEIER.  THE RAW AND SMOOTHED PERIODOGRAMS OF
!     TAPERED SERIES ARE SHOWN ON PAGES 95 AND 176, RESPECTIVELY, OF
!     BLOOMFIELD.
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 7, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   ldstak
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  ARRAYS IN COMMON
      real(kind=wp) :: dstak(12)
!
!  LOCAL SCALARS
      real(kind=wp) :: amiss,fmax,fmin,ymiss
     integer&
     &   i,iar,iprt,ispcf,j,lacov,lagmax,lds,lyfft,nf,nprt,nw,ny
!
!  LOCAL ARRAYS
     real(kind=wp) ::&
     &   acov(101),freq(300),phi(100),spcf(101,4),y(150),yfft(400)
     integer&
     &   lags(4),nlppa(101)
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL ACFMS,ACFS,IPRINT,NRAND,DCOPY,SETRV,UFS,UFSF,UFSFS,UFSM,
!     +   UFSMS,UFSMV,UFSMVS,UFSS,UFSV,UFSVS
!
!  COMMON BLOCKS
      common /cstak/dstak
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: ACOV(101)
!        THE AUTOCOVARIANCE VECTOR.
!     REAL(KIND=WP) :: AMISS
!         THE MISSING VALUE CODE FOR THE RETURNED ACVF ESTIMATES.
!     REAL(KIND=WP) :: DSTAK(12)
!        THE DOUBLE PRECISION VERSION OF THE /CSTAK/ WORK AREA.
!     REAL(KIND=WP) :: FMAX, FMIN
!        THE MAXIMUM AND MINIMUM FREQUENCIES AT WHICH THE
!        SPECTRUM IS TO BE COMPUTED.
!     REAL(KIND=WP) :: FREQ(300)
!        THE VECTOR OF FREQUENCIES AT WHICH THE SPECTRUM IS COMPUTED.
!     INTEGER I
!        AN INDEX VARIABLE
!     INTEGER IAR
!        THE ORDER OF THE AUTOREGRESSIVE MODEL TO BE USED.
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED
!        IF IERR .EQ. 1, ERRORS HAVE BEEN DETECTED
!     INTEGER IPRT
!        THE LOGICAL UNIT USED FOR PRINTED OUTPUT.
!     INTEGER ISPCF
!         THE ACTUAL DIMENSION FOR THE SPECTRUM ARRAYS.
!     INTEGER J
!        INDEX VARIABLE.
!     INTEGER LACOV
!        THE LENGTH OF THE VECTOR ACOV.
!     INTEGER LAGMAX
!        THE INDEXING VARIABLE INDICATING THE LAG VALUE OF THE
!        AUTOCOVARIANCE BEING COMPUTED AND THE MAXIMUM LAG TO BE USED,
!        RESPECTIVELY.
!     INTEGER LAGS(4)
!        THE ARRAY USED TO STORE THE LAG WINDOW TRUCCATION
!        POINTS USED FOR EACH SET OF SPECTRUM VALUES.
!     INTEGER LDS
!        THE LENGTH OF THE VECTOR DSTAK IN COMMON CSTAK.
!     INTEGER LYFFT
!        THE LENGTH OF THE VECTOR YFFT.
!     INTEGER NF
!        THE NUMBER OF FREQUENCIES AT WHICH THE SPECTRUM IS
!        TO BE COMPUTED.
!     INTEGER NLPPA(101)
!        THE NUMBERS OF LAGGED PRODUCT PAIRS USED FOR EACH ACVF.
!     INTEGER NPRT
!        A CODE USED TO SPECIFY THE TYPE OF PLOT, WHERE IF
!        NPRT = 0 THE PLOT IS SUPPRESSED, IF
!        NPRT = 2 THE PLOT IS DECIBELS/LINEAR, IF
!        NPRT = 2 THE PLOT IS LOG/LINEAR, IF
!        NPRT = 3 THE PLOT IS DECIBELS/LOG, AND IF
!        NPRT = 4 THE PLOT IS LOG/LOG.
!     INTEGER NW
!        THE NUMBER OF DIFFERENT LAG WINDOW TRUNCATION POINTS SPECIFIED,
!        AND THEREFORE, THE NUMBER OF PLOTS.
!     INTEGER NY
!        THE NUMBER OF OBSERVATIONS IN THE SERIES Y.
!     REAL(KIND=WP) :: PHI(100)
!        THE VECTOR OF THE ORDER IAR AUTOREGRESSIVE MODEL COEFFICIENTS.
!     REAL(KIND=WP) :: SPCF(101, 4)
!        THE ARRAYS IN WHICH THE FOURIER SPECTRUM IS STORED
!        FOR EACH LAG WINDOW.
!     REAL(KIND=WP) :: Y(150)
!         THE ARRAY CONTAINING THE TIME SERIES FROM JENKINS AND WATTS.
!     REAL(KIND=WP) :: YFFT(400)
!        THE VECTOR OF THE OBSERVED TIME SERIES TO BE ANALYZED USING
!        THE FFT.
!     REAL(KIND=WP) :: YMISS
!        THE USER SUPPLIED CODE WHICH IS USED TO DETERMINE WHETHER OR
!        NOT AN OBSERVATION IN THE SERIES IS MISSING.  IF Y(I) = YMISS,
!        THE VALUE IS ASSUMED MISSING, OTHERWISE IT IS NOT.
!
!
     data   y(  1), y(  2), y(  3), y(  4), y(  5), y(  6)&
     &    /-0.88_wp, -0.12_wp, -0.89_wp, -1.38_wp, -0.07_wp,  1.03_wp/
     data   y(  7), y(  8), y(  9), y( 10), y( 11), y( 12)&
     &    / 2.14_wp,  0.35_wp, -1.10_wp, -1.78_wp, -2.76_wp, -1.77_wp/
     data   y( 13), y( 14), y( 15), y( 16), y( 17), y( 18)&
     &    / 0.98_wp,  1.00_wp, -0.70_wp, -1.01_wp, -1.30_wp, -0.85_wp/
     data   y( 19), y( 20), y( 21), y( 22), y( 23), y( 24)&
     &    /-0.46_wp,  1.63_wp,  0.06_wp, -0.17_wp, -1.01_wp, -1.04_wp/
     data   y( 25), y( 26), y( 27), y( 28), y( 29), y( 30)&
     &    /-0.66_wp, -1.12_wp, -0.51_wp, -0.71_wp, -0.20_wp, -0.13_wp/
     data   y( 31), y( 32), y( 33), y( 34), y( 35), y( 36)&
     &    / 0.14_wp,  1.59_wp, -0.76_wp, -1.08_wp, -1.77_wp, -1.20_wp/
     data   y( 37), y( 38), y( 39), y( 40), y( 41), y( 42)&
     &    / 0.45_wp, -0.07_wp, -0.63_wp, -0.35_wp, -0.87_wp, -0.62_wp/
     data   y( 43), y( 44), y( 45), y( 46), y( 47), y( 48)&
     &    / 0.28_wp,  1.90_wp,  2.14_wp,  1.05_wp,  0.31_wp,  1.07_wp/
     data   y( 49), y( 50)&
     &    / 2.67_wp,  2.44_wp/
!
      call iprint(iprt)
!
!     CHECK ERROR HANDLING
!
!        TEST 1  -  MISCELANEOUS ERROR CHECKING
!
      write (iprt, 2000)
      ymiss = 1.16_wp
      lagmax = -1
      ny = -10
      lacov = 101
      lyfft = -11
      nw = -1
      nf = -5
      fmin = 0.5_wp
      fmax = 0.0_wp
      nprt = -1
      ispcf = -20
      lds = 0
      write(iprt, 1001)
      call ufs (y, ny)
      write (iprt, 1002) ierr
      write(iprt, 1003)
     call ufss(y, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
      write(iprt, 1019)
      call ufsf (yfft, ny, lyfft, lds)
      write (iprt, 1002) ierr
      write(iprt, 1020)
     call ufsfs(yfft, ny, lyfft, lds, nw, lags, nf, fmin, fmax, nprt,&
     &   spcf, ispcf, freq)
      write (iprt, 1002) ierr
      write(iprt, 1005)
      call ufsm (y, ymiss, ny)
      write (iprt, 1002) ierr
      write(iprt, 1006)
     call ufsms(y, ymiss, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
      write (iprt, 1007)
      call ufsv(acov, lagmax, ny)
      write (iprt, 1002) ierr
      write (iprt, 1008)
     call ufsvs (acov, lagmax, ny, nw, lags, nf,&
     &   fmin, fmax, nprt, spcf, ispcf, freq, lds)
      write (iprt, 1002) ierr
      write (iprt, 1021)
      call ufsmv(acov, nlppa, lagmax, ny)
      write (iprt, 1002) ierr
      write (iprt, 1022)
     call ufsmvs (acov, nlppa, lagmax, ny, nw, lags, nf,&
     &   fmin, fmax, nprt, spcf, ispcf, freq, lds)
      write (iprt, 1002) ierr
!
!        TEST 2  -  MISCELANEOUS ERROR CHECKING (CONTINUED)
!
      write (iprt, 2010)
      ymiss = 1.16_wp
      ny = 50
      lagmax = 55
      lyfft = -11
      nw = 2
      lags(1) = 0
      lags(2) = 50
      nf = 51
      fmin = 0.0_wp
      fmax = 0.5_wp
      nprt = 3
      ispcf = 20
      lds = 0
      write(iprt, 1003)
     call ufss(y, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
      write(iprt, 1019)
      call ufsf (yfft, ny, lyfft, lds)
      write (iprt, 1002) ierr
      write(iprt, 1020)
     call ufsfs(yfft, ny, lyfft, lds, nw, lags, nf, fmin, fmax, nprt,&
     &   spcf, ispcf, freq)
      write (iprt, 1002) ierr
      write(iprt, 1006)
     call ufsms(y, ymiss, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
      write (iprt, 1008)
     call ufsvs (acov, lagmax, ny, nw, lags, nf,&
     &   fmin, fmax, nprt, spcf, ispcf, freq, lds)
      write (iprt, 1002) ierr
      write (iprt, 1022)
     call ufsmvs (acov, nlppa, lagmax, ny, nw, lags, nf,&
     &   fmin, fmax, nprt, spcf, ispcf, freq, lds)
      write (iprt, 1002) ierr
!
!        TEST 3  -  LDS TOO SMALL
!
      write (iprt, 2030)
      ymiss = 1.16_wp
      ny = 50
      lagmax = 49
      lyfft = 400
      nw = 2
      lags(1) = 0
      lags(2) = 50
      nf = 51
      fmin = 0.0_wp
      fmax = 0.5_wp
      nprt = 3
      ispcf = 101
      lds = 0
      write(iprt, 1003)
     call ufss(y, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
      write(iprt, 1019)
      call ufsf (yfft, ny, lyfft, lds)
      write (iprt, 1002) ierr
      write(iprt, 1020)
     call ufsfs(yfft, ny, lyfft, lds, nw, lags, nf, fmin, fmax, nprt,&
     &   spcf, ispcf, freq)
      write (iprt, 1002) ierr
      write(iprt, 1006)
     call ufsms(y, ymiss, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
      write (iprt, 1008)
     call ufsvs (acov, lagmax, ny, nw, lags, nf,&
     &   fmin, fmax, nprt, spcf, ispcf, freq, lds)
      write (iprt, 1002) ierr
      write (iprt, 1022)
     call ufsmvs (acov, nlppa, lagmax, ny, nw, lags, nf,&
     &   fmin, fmax, nprt, spcf, ispcf, freq, lds)
      write (iprt, 1002) ierr
!
!        TEST 4  -  ALL DATA AND COVARIANCES MISSING
!
      write (iprt, 2040)
      ymiss = 1.16_wp
      ny = 50
      lagmax = 49
      lyfft = 400
      nw = 2
      lags(1) = 8
      lags(2) = 16
      nf = 51
      fmin = 0.0_wp
      fmax = 0.5_wp
      nprt = 3
      ispcf = 101
      lds = 700
      call setrv(yfft, ny, ymiss)
      call setrv(acov, lagmax, 0.0_wp)
      do 5 i = 1, lagmax
         nlppa(i) = 0
    5 continue
      write (iprt, 1005)
      call ufsm(yfft, ymiss, ny)
      write (iprt, 1002) ierr
      write(iprt, 1006)
     call ufsms(yfft, ymiss, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
      write (iprt, 1021)
      call ufsmv (acov, nlppa, lagmax, ny)
      write (iprt, 1002) ierr
      write (iprt, 1022)
     call ufsmvs (acov, nlppa, lagmax, ny, nw, lags, nf,&
     &   fmin, fmax, nprt, spcf, ispcf, freq, lds)
      write (iprt, 1002) ierr
!
!        TEST 5  -  EVERY OTHER VALUE MISSING
!
      write (iprt, 2050)
      ymiss = 1.16_wp
      ny = 50
      lagmax = 49
      lyfft = 400
      nw = 2
      lags(1) = 8
      lags(2) = 16
      nf = 51
      fmin = 0.0_wp
      fmax = 0.5_wp
      nprt = 3
      ispcf = 101
      lds = 700
      call setrv(yfft, ny, ymiss)
      do 10 i = 1, ny, 2
         yfft(i) = y(i)
   10 continue
      write (iprt, 1005)
      call ufsm(yfft, ymiss, ny)
      write (iprt, 1002) ierr
      write(iprt, 1006)
     call ufsms(yfft, ymiss, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
!
!     CHECK RESULTS FROM VALID CALL
!
      ymiss = 1.16_wp
      ny = 50
      lagmax = 49
      lyfft = 400
      nw = 2
      lags(1) = 8
      lags(2) = 16
      nf = 51
      fmin = 0.0_wp
      fmax = 0.5_wp
      nprt = 2
      ispcf = 101
      lds = ldstak
!
!     TEST OF UFS
!
      write(iprt, 2020)
      write(iprt, 1001)
      call ufs (y, ny)
      write (iprt, 1002) ierr
!
!     TEST OF UFSS
!
      write(iprt, 2020)
      write(iprt, 1003)
     call ufss(y, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
!
!     PRINT RETURNED VALUES FROM UFSS
!
      write (iprt, 1004) (freq(i), (spcf(i,j),j=1,nw), i=1,nf)
!
!     TEST OF UFSF
!
      write(iprt, 2020)
      write(iprt, 1019)
      call dcopy(ny, y, 1, yfft, 1)
      call ufsf (yfft, ny, lyfft, lds)
      write (iprt, 1002) ierr
!
!     TEST OF UFSFS
!
      write(iprt, 2020)
      write(iprt, 1020)
      call dcopy(ny, y, 1, yfft, 1)
     call ufsfs(yfft, ny, lyfft, lds, nw, lags, nf, fmin, fmax, nprt,&
     &   spcf, ispcf, freq)
      write (iprt, 1002) ierr
!
!     PRINT RETURNED VALUES FROM UFSFS
!
      write (iprt, 1004) (freq(i), (spcf(i,j),j=1,nw), i=1,nf)
!
!     TEST OF UFSM
!
      write(iprt, 2020)
      write(iprt, 1005)
      call ufsm (y, ymiss, ny)
      write (iprt, 1002) ierr
!
!     TEST OF UFSMS
!
      write(iprt, 2020)
      write(iprt, 1006)
     call ufsms(y, ymiss, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
!
!     PRINT RETURNED VALUES FROM UFSMS
!
      write (iprt, 1004) (freq(i), (spcf(i,j),j=1,nw), i=1,nf)
!
!     TEST OF UFSV
!
      write(iprt, 2020)
      call acfs (y, ny, lagmax, lacov, acov, iar, phi, 0, lds)
      write (iprt, 1007)
      call ufsv(acov, lagmax, ny)
      write (iprt, 1002) ierr
!
!     TEST OF UFSVS
!
      write(iprt, 2020)
      write (iprt, 1008)
     call ufsvs (acov, lagmax, ny, nw, lags, nf,&
     &   fmin, fmax, nprt, spcf, ispcf, freq, lds)
      write (iprt, 1002) ierr
!
!     PRINT RETURNED VALUES FROM UFSVS
!
      write (iprt, 1004) (freq(i), (spcf(i,j),j=1,nw), i=1,nf)
!
!     TEST OF UFSMV
!
      write(iprt, 2020)
     call acfms (y, ymiss, ny, lagmax, lacov, acov, amiss, nlppa,&
     &   0, lds)
      write (iprt, 1021)
      call ufsmv(acov, nlppa, lagmax, ny)
      write (iprt, 1002) ierr
!
!     TEST OF UFSMVS
!
      write(iprt, 2020)
      write (iprt, 1022)
     call ufsmvs (acov, nlppa, lagmax, ny, nw, lags, nf,&
     &   fmin, fmax, nprt, spcf, ispcf, freq, lds)
      write (iprt, 1002) ierr
!
!     PRINT RETURNED VALUES FROM UFSMVS
!
      write (iprt, 1004) (freq(i), (spcf(i,j),j=1,nw), i=1,nf)
!
!     MINIMUM PROBLEM SIZE
!
      ymiss = 1.16_wp
      ny = 17
      lagmax = 1
      lyfft = 400
      nw = 2
      lags(1) = 1
      lags(2) = 16
      nf = 1
      fmin = 0.0_wp
      fmax = 0.5_wp
      nprt = 2
      ispcf = 101
      lds = 700
!
!     TEST OF UFS
!
      write (iprt, 2060)
      write(iprt, 1001)
      call ufs (y, ny)
      write (iprt, 1002) ierr
!
!     TEST OF UFSS
!
      write(iprt, 2060)
      write(iprt, 1003)
     call ufss(y, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
!
!     PRINT RETURNED VALUES FROM UFSS
!
      write (iprt, 1004) (freq(i), (spcf(i,j),j=1,nw), i=1,nf)
!
!     CHECK HANDLING OF FMIN AND FMAX
!
      ymiss = 1.16_wp
      ny = 50
      lagmax = 49
      lyfft = 400
      nw = 2
      lags(1) = 8
      lags(2) = 16
      nf = 51
      fmin = 0.45_wp
      fmax = 0.5_wp
      nprt = 2
      ispcf = 101
      lds = 700
!
!     TEST OF UFSS
!
      write(iprt, 2070)
      write(iprt, 1003)
     call ufss(y, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
!
!     PRINT RETURNED VALUES FROM UFSS
!
      write (iprt, 1004) (freq(i), (spcf(i,j),j=1,nw), i=1,nf)
!
!     WHITE NOISE SPECTRUM
!
      ymiss = 1.16_wp
      call nrand(yfft, ny, 12345)
      ny = 50
      lagmax = 49
      lyfft = 400
      nw = 2
      lags(1) = 8
      lags(2) = 16
      nf = 51
      fmin = 0.0_wp
      fmax = 0.5_wp
      nprt = 2
      ispcf = 101
      lds = 700
!
!     TEST OF UFSS
!
      write(iprt, 2080)
      write(iprt, 1003)
     call ufss(yfft, ny, nw, lags, nf, fmin, fmax, nprt, spcf,&
     &   ispcf, freq, lds)
      write (iprt, 1002) ierr
!
!     PRINT RETURNED VALUES FROM UFSS
!
      write (iprt, 1004) (freq(i), (spcf(i,j),j=1,nw), i=1,nf)
!
      return
!
!     FORMAT STATEMENTS
!
 1001 format (12h test of ufs)
 1002 format (/8h ierr is, i5/)
 1003 format (13h test of ufss)
 1004 format (3(1x, e16.8))
 1005 format (13h test of ufsm)
 1006 format (14h test of ufsms)
 1007 format (13h test of ufsv)
 1008 format (14h test of ufsvs)
 1019 format (13h test of ufsf)
 1020 format (14h test of ufsfs)
 1021 format (14h test of ufsmv)
 1022 format (15h test of ufsmvs)
 2000 format (32h1check error handling  -  test 1)
 2010 format (32h1check error handling  -  test 2)
 2020 format (14h1valid problem)
 2030 format (14h1lds too small)
 2040 format (33h1all data and covariances missing)
 2050 format (31h1every other data value missing)
 2060 format (21h1minimum problem size)
 2070 format (32h1check handling of fmin and fmax)
 2080 format (21h1white noise spectrum)
      end
