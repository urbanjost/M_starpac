!FFTR
      subroutine fftr (yfft, n, nfft, iextnd, nf, ab, lab)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS IS THE USER CALLABLE ROUTINE FOR COMPUTING
!     THE FOURIER TRANSFORM OF A SERIES.
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 7, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   iextnd,lab,n,nf,nfft
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   ab(*),yfft(*)
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   yextnd
     integer&
     &   i,iprt,isn,n1,nfft1,nfft2
     logical&
     &   err01,err02,err03,head
!
!  LOCAL ARRAYS
     character&
     &   llab(8)*1,ln(8)*1,nmsub(6)*1
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL AMEAN,EISGE,ENFFT,FFT,IPRINT,REALTR
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: AB(LAB)
!        THE VECTOR OF THE NF REAL AND IMAGINARY COMPONENTS OF THE
!        FOURIER COEFFICIENTS.
!     LOGICAL ERR01, ERR02, ERR03
!        VALUE(S) INDICATING WHETHER AN ERROR WAS DETECTED (TRUE) OR NOT
!        (FALSE).
!     LOGICAL HEAD
!        A VARIABLE USED TO INDICATE WHETHER A HEADING IS NEEDED FOR
!        ERROR MESSAGES (TRUE) OR NOT (FALSE).
!     INTEGER I
!        AN INDEX VARIABLE.
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED
!        IF IERR .EQ. 1, ERRORS HAVE BEEN DETECTED
!     INTEGER IEXTND
!        THE INDICATOR VARIABLE USED TO DESIGNATE WHETHER ZERO
!        (IEXTND .EQ. 0) OR THE SERIES MEAN (IEXTND .NE. 0) IS TO BE
!        USED TO EXTEND THE SERIES.
!     INTEGER IPRT
!        THE LOGICAL UNIT USED FOR PRINTED OUTPUT.
!     INTEGER LAB
!        THE LENGTH OF THE VECTOR AB.
!     CHARACTER*1 LLAB(8), LN(8)
!        THE ARRAY(S) CONTAINING THE NAME(S) OF THE PARAMETER(S) CHECKED
!        FOR ERRORS.
!     INTEGER N
!        THE INTEGER NUMBER OF OBSERVATIONS.
!     INTEGER N1
!        THE VALUE N+1.
!     INTEGER NF
!        THE NUMBER OF FREQUENCIES AT WHICH THE PERIODOGRAM IS
!        TO BE COMPUTED.
!     INTEGER NFFT
!        THE EFFECTIVE LENGTH OF THE SERIES TO BE TRANSFORMED.
!     INTEGER NFFT1
!        THE EFFECTIVE SERIES LENGTH ACTUALLY USED.
!     INTEGER NFFT2
!        THE EFFECTIVE LENGTH OF THE SERIES STORED AS A COMPLEX
!        VARIABLE.
!     CHARACTER*1 NMSUB(6)
!        THE ARRAY CONTAINING THE NAME OF THIS SUBROUTINE.
!     REAL(KIND=WP) :: YEXTND
!        THE VALUE USED TO EXTEND THE SERIES.
!     REAL(KIND=WP) :: YFFT(N)
!        THE ARRAY CONTAINING THE OBSERVED TIME SERIES.
!
!     SET UP NAME ARRAYS
!
     data&
    &  nmsub(1),  nmsub(2),  nmsub(3),  nmsub(4),  nmsub(5),  nmsub(6)&
     & /     'F',       'F',       'T',       'R',       ' ',       ' '/
     data&
    &   llab(1),   llab(2),   llab(3),   llab(4),   llab(5),   llab(6)&
     & /     'L',       'A',       'B',       ' ',       ' ',       ' '/
     data&
    &   llab(7),   llab(8)&
     & /     ' ',       ' '/
     data&
    &     ln(1),     ln(2),     ln(3),     ln(4),     ln(5),     ln(6)&
     & /     'N',       ' ',       ' ',       ' ',       ' ',       ' '/
     data&
    &     ln(7),     ln(8)&
     & /     ' ',       ' '/
!
!     SET UP FOR ERROR CHECKING
!
      ierr = 0
      head = .true.
!
!     CALL ERROR CHECKING ROUTINES
!
      call eisge(nmsub, ln, n, 17, 1, head, err01, ln)
      if (err01) go to 5
!
      call enfft(nmsub, nfft, 2, n, lab, nfft1, head, err02 ) !LN
      nf = nfft1/2
!
      call eisge(nmsub, llab, lab, nfft1, 9, head, err03, llab)
!
      if (err02 .or. err03) go to 5
      go to 10
!
    5 continue
      ierr = 1
      call iprint (iprt)
      write (iprt, 1000)
      return
!
   10 continue
!
!     COPY THE INPUT SERIES TO AB, EXTENDING APPROPRIATELY.
!
      yextnd = 0.0_wp
      if (iextnd .ne. 0) call amean (yfft, n, yextnd)
!
      do 20 i = 1, n
         ab(i) = yfft(i)
   20 continue
!
      n1 = n+1
      do 30 i = n1, nfft1
         ab(i) = yextnd
   30 continue
!
      nfft2 = (nfft1-2) / 2
      isn = 2
!
      call fft (ab(1), ab(2), nfft2, nfft2, nfft2, isn)
      call realtr (ab(1), ab(2), nfft2, isn)
!
      return
!
!     FORMAT STATEMENTS
!
1000 format (/42h the correct form of the call statement is//&
     &   53h       call fftr (yfft, n, nfft, iextnd, nf, ab, lab))
      end
