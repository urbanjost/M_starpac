!UASER
     subroutine uaser(nmsub, n, acov, iar, phi, lagmax, lag, lacov,&
     &   nf, ldstak, ldsmin, lyfft, nfft, option)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS IS THE ERROR CHECKING ROUTINE FOR THE TIME SERIES
!     FOURIER UNIVARIATE SPECTRUM ANALYSIS ROUTINES.
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 2, 1985  (JRD)
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   iar,lacov,lag,lagmax,ldsmin,ldstak,lyfft,n,nf,nfft
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   acov(*),phi(*)
     logical&
     &   option(4)
     character&
     &   nmsub(6)*1
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  LOCAL SCALARS
     integer&
     &   i,nv
     logical&
     &   head
!
!  LOCAL ARRAYS
     logical&
     &   err(20)
     character&
    &   l1(8)*1,lacv(8)*1,lacv1m(8)*1,lacv1p(8)*1,liar(8)*1,&
    &   llacov(8)*1,llag(8)*1,llds(8)*1,llgmx(8)*1,llgmx1(8)*1,&
    &   llgmxm(8)*1,llgmxp(8)*1,llyfft(8)*1,ln(8)*1,lnf(8)*1,&
     &   lnm1(8)*1,lphi(8)*1
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL EISGE,EISII,ERVII
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,iabs
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: ACOV(LACOV)
!        THE AUTOCOVARIANCE FUNCTION.
!     LOGICAL ERR(20)
!        VALUE(S) INDICATING WHETHER AN ERROR WAS DETECTED (TRUE) OR NOT
!        (FALSE).
!     LOGICAL HEAD
!        A FLAG INDICATING WHETHER THE HEADING SHOULD BE PRINTED
!        (TRUE) OR NOT (FALSE).  IF A HEADING IS PRINTED, THE VALUE
!        OF HEAD WILL BE CHANGED TO FALSE.
!     INTEGER IAR
!        THE ORDER OF THE AUTOREGRESSIVE PROCESS CHOSEN.
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST
!        IF ERR01, NO ERRORS WERE DETECTED
!        IF IERR .EQ. 1, ERRORS HAVE BEEN DETECTED
!     INTEGER LACOV
!        THE LENGTH OF THE VECTOR ACOV.
!     INTEGER LAGMAX
!        THE MAXIMUM LAG VALUE TO BE USED.
!     INTEGER LAG
!        THE LAG WINDOW TRUNCATION POINT USED FOR A SPECIFIC WINDOW.
!     INTEGER LDSMIN
!        THE MINIMUM LENGTH ALLOWED FOR DSTAK.
!     INTEGER LDSTAK
!        THE LENGTH OF THE VECTOR DSTAK IN COMMON CSTAK.
!     CHARACTER*1 LACV(8), LACV1M(8), LACV1P(8),
!    *   LIAR(8), LLACOV(8), LLAG(8), LLGMX(8), LLGMXM(8),
!    *   LLGMXP(8),  LLGMX1(8), LLDS(8), LN(8), LNF(8), LNM1(8),
!    *   LLYFFT(8), LPHI(8), L1(8)
!        THE ARRAY(S) CONTAINING THE NAME(S) OF THE ARGUMENT(S)
!        CHECKED FOR ERRORS.
!     INTEGER LYFFT
!        THE LENGTH OF THE VECTOR YFFT.
!     INTEGER N
!        THE INTEGER NUMBER OF OBSERVATIONS IN THE SERIES.
!     INTEGER NF
!        THE NUMBER OF FREQUENCIES AT WHICH THE SPECTRUM IS
!        TO BE COMPUTED.
!     INTEGER NFFT
!        THE NUMBER OF OBSERVATIONS IN THE EXTENDED SERIES.
!     CHARACTER*1 NMSUB(6)
!        THE ARRAY CONTAINING THE NAME OF THE USER CALLED SUBROUTINE.
!     INTEGER NV
!        THE NUMBER OF VIOLATIONS FOUND WHEN CHECKING VECTOR LAGS.
!     LOGICAL OPTION(4)
!        AN INDICATOR ARRAY USED TO DESIGNATE WHETHER ANY OF THE
!        FOUR POSSIBLE OPTIONS (F, M, V, OR S) HAVE BEEN USED (TRUE)
!        OR NOT (FALSE).
!     REAL(KIND=WP) :: PHI(IAR)
!        THE ARRAY OF AUTOREGRESSIVE COEFFICIENTS FOR THE
!        SELECTED ORDER.
!
!
!     SET UP NAME ARRAYS
!
     data lacv(1), lacv(2), lacv(3), lacv(4), lacv(5), lacv(6),&
     &   lacv(7), lacv(8) /'A','C','O','V',' ',' ',' ',' '/
     data lacv1m(1), lacv1m(2), lacv1m(3), lacv1m(4), lacv1m(5),&
    &   lacv1m(6), lacv1m(7), lacv1m(8) /'-','A','C','O','V','(','1',&
     &   ')'/
     data lacv1p(1), lacv1p(2), lacv1p(3), lacv1p(4), lacv1p(5),&
    &   lacv1p(6), lacv1p(7), lacv1p(8) /'+','A','C','O','V','(','1',&
     &   ')'/
     data liar(1), liar(2), liar(3), liar(4), liar(5),&
    &   liar(6), liar(7), liar(8) /'I','A','R',' ',' ',' ',' ',&
     &   ' '/
     data llacov(1), llacov(2), llacov(3), llacov(4), llacov(5),&
    &   llacov(6), llacov(7), llacov(8) /'L','A','C','O','V',' ',' ',&
     &   ' '/
     data llag(1), llag(2), llag(3), llag(4), llag(5), llag(6),&
     &   llag(7), llag(8) /'L','A','G',' ',' ',' ',' ',' '/
     data llgmx(1), llgmx(2), llgmx(3), llgmx(4), llgmx(5),&
    &   llgmx(6), llgmx(7), llgmx(8) /'L','A','G','M','A','X',' ',&
     &   ' '/
     data llgmxm(1), llgmxm(2), llgmxm(3), llgmxm(4), llgmxm(5),&
    &   llgmxm(6), llgmxm(7), llgmxm(8) /'-','L','A','G','M','A','X',&
     &   ' '/
     data llgmxp(1), llgmxp(2), llgmxp(3), llgmxp(4), llgmxp(5),&
    &   llgmxp(6), llgmxp(7), llgmxp(8) /'+','L','A','G','M','A','X',&
     &   ' '/
     data llgmx1(1), llgmx1(2), llgmx1(3), llgmx1(4), llgmx1(5),&
    &   llgmx1(6), llgmx1(7), llgmx1(8) /'L','A','G','M','A','X','+',&
     &   '1'/
     data llds(1), llds(2), llds(3), llds(4), llds(5), llds(6),&
     &   llds(7), llds(8) /'L','D','S','T','A','K',' ',' '/
     data ln(1), ln(2), ln(3), ln(4), ln(5), ln(6), ln(7), ln(8) /'N',&
     &   ' ',' ',' ',' ',' ',' ',' '/
     data lnf(1), lnf(2), lnf(3), lnf(4), lnf(5), lnf(6), lnf(7),&
     &   lnf(8) /'N','F',' ',' ',' ',' ',' ',' '/
     data lnm1(1), lnm1(2), lnm1(3), lnm1(4), lnm1(5), lnm1(6),&
     &   lnm1(7), lnm1(8) /'N','-','1',' ',' ',' ',' ',' '/
     data llyfft(1), llyfft(2), llyfft(3), llyfft(4), llyfft(5),&
    &   llyfft(6), llyfft(7), llyfft(8) /'L','Y','F','F','T',' ',' ',&
     &   ' '/
     data lphi(1), lphi(2), lphi(3), lphi(4), lphi(5), lphi(6),&
     &   lphi(7), lphi(8) /'P','H','I',' ',' ',' ',' ',' '/
     data l1(1), l1(2), l1(3), l1(4), l1(5), l1(6), l1(7), l1(8) /'1',&
     &   ' ',' ',' ',' ',' ',' ',' '/
!
!     SET UP FOR ERROR CHECKING
!
!
      ierr = 0
      head = .true.
!
      do 10 i=1,20
         err(i) = .false.
   10 continue
!
!     CALL ERROR CHECKING ROUTINES
!
      call eisge(nmsub, ln, n, 17, 1, head, err(1), ln)
!
      if ((.not.option(3))) go to 15
!
     call ervii(nmsub, lacv, acov, lagmax+1, -abs(acov(1)),&
     &   abs(acov(1)), 0, head, 4, nv, err(15)) !, LACV1M, LACV1P)
!
     call eisii(nmsub, llgmx, lagmax, 1, n-1, 1, head, err(2),&
     &   l1, lnm1)
!
      if (option(2)) then
        call eisge(nmsub, llacov, lacov, lagmax+1, 8, head, err(3),&
     &   llgmx1)
      else
        call eisge(nmsub, llacov, lacov, lagmax+1, 7, head, err(3),&
     &   llgmx1)
      end if
!
  15 if (option(1) .and. (.not.err(1)))&
    &   call eisge(nmsub, llyfft, lyfft, nfft, 9, head, err(4),&
     &   llyfft)
!
     if (option(1) .and. (.not.option(4)))&
     &   call eisge(nmsub, llds, ldstak, ldsmin, 9, head, err(5), llds)
!
      if (option(4)) go to 30
!
      do 20 i=1,15
         if (err(i)) go to 50
   20 continue
!
      return
!
   30 continue
!
     call eisii(nmsub, liar, iar, -iabs(lagmax), iabs(lagmax), 1, head,&
     &   err(6), llgmxm, llgmxp)
!
     call ervii(nmsub, lphi, phi, iar, -1.0_wp, 1.0_wp, 0, head, 1, nv,&
     &   err(7)) !, L1, L1)
!
     if (.not.option(3))&
    &   call eisii(nmsub, llgmx, lagmax, 1, n-1, 1, head, err(2),&
     &   l1, lnm1)
!
     call eisii(nmsub, llag, lag, -iabs(lagmax), iabs(lagmax), 1, head,&
     &   err(8), llgmxm, llgmxp)
!
      call eisge(nmsub, lnf, nf, 1, 1, head, err(9), lnf)
!
      if (err(1) .or. err(2) .or. err(9)) go to 50
!
      call eisge(nmsub, llds, ldstak, ldsmin, 9, head, err(14), llds)
!
      do 40 i=1,15
         if (err(i)) go to 50
   40 continue
!
      return
!
   50 continue
      ierr = 1
      return
!
      end
