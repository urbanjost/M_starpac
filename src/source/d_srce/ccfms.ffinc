!CCFMS
     subroutine ccfms (ym, ymmiss, n, m, iym, lagmax, ccov,&
     &   cmiss, iccov, jccov, nlppc, inlppc, jnlppc, nprt, ldstak)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS IS THE USER CALLABLE ROUTINE FOR COMPUTING THE CROSS
!     CORRELATIONS AND COVARIANCES OF A MULTIVARIATE SERIES (LONG CALL).
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  NOVEMBER 21, 1980
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   cmiss
     integer&
     &   iccov,inlppc,iym,jccov,jnlppc,lagmax,ldstak,m,n,nprt
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   ccov(*),ym(*),ymmiss(*)
     integer&
     &   nlppc(*)
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  ARRAYS IN COMMON
      real(kind=wp) :: dstak(12)
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   fplm
     integer&
    &   i,ifp,io,iprt,iymfft,j,k,ldsmin,lglst,lglstj,lglstk,lyfft,&
     &   nall0,nfft,rhoc,sdrhoc,ymean,ymeanj,ymeank,ysd,ysdj,ysdk
     logical&
     &   isfft,islong,newpg
!
!  LOCAL ARRAYS
     real(kind=wp) ::&
     &   rstak(12)
     integer&
     &   istak(12)
     character&
     &   nmsub(6)*1
!
!  EXTERNAL FUNCTIONS
!      REAL(KIND=WP) ::
!     +   D1MACH
!      INTEGER
!     +   STKST
!      EXTERNAL D1MACH,STKST
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL ACVFM,CCFER,CCFMNM,CCFOUT,IPRINT,LDSCMP,STKCLR,STKSET
!
!  INTRINSIC FUNCTIONS
      intrinsic min,sqrt
!
!  COMMON BLOCKS
      common /cstak/dstak
      common /errchk/ierr
!
!  STATEMENT FUNCTIONS
     integer&
     &   i2,i3c,i3n
!
!  EQUIVALENCES
      equivalence (dstak(1),istak(1))
      equivalence (dstak(1),rstak(1))
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: CCOV(ICCOV, JCCOV, M)
!        THE CROSS COVARIANCE MATRIX.
!     REAL(KIND=WP) :: CMISS
!        THE MISSING VALUE CODE FOR THE CCVF ESTIMATES.
!     REAL(KIND=WP) :: DSTAK(12)
!        THE DOUBLE PRECISION VERSION OF THE /CSTAK/ WORK AREA.
!     REAL(KIND=WP) :: FPLM
!        THE FLOATING POINT LARGEST MAGNITUDE.
!     INTEGER ICCOV
!        THE ACTUAL FIRST DIMENSION OF THE ARRAY CCOV, AS
!        SPECIFIED IN THE USERS PROGRAM.
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED
!        IF IERR .EQ. 1, ERRORS HAVE BEEN DETECTED
!     INTEGER IFP
!        AN INDICATOR FOR STACK ALLOCATION TYPE, WHERE IFP=3 INDICATES
!        SINGLE PRECISION AND IFP=4 INDICATES DOUBLE PRECISION.
!     INTEGER INLPPC
!        THE ACTUAL FIRST DIMENSION OF THE ARRAY NLPPC AS SPECIFIEC
!        IN THE USERS PROGRAM.
!     INTEGER IO
!        A VARIABLE USED TO DETERMINE THE AMOUNT OF STORAGE REQUIRED,
!        BASED ON WHETHER PRINTED OUTPUT IS DESIRED.
!     INTEGER IPRT
!        THE UNIT NUMBER USED FOR OUTPUT.
!     LOGICAL ISFFT
!        THE INDICATOR VARIABLE USED TO DESIGNATE WHETHER THE CALLING
!        ROUTINE HAS SUFFIX F (ISFFT = TRUE) OR NOT (ISFFT = FALSE)
!     LOGICAL ISLONG
!        THE INDICATOR VARIABLE USED TO DESIGNATE WHETHER THE CALLING
!        ROUTINE HAS SUFFIX S (ISLONG = TRUE) OR NOT (ISLONG = FALSE)
!     INTEGER ISTAK(12)
!        THE INTEGER VERSION OF THE /CSTAK/ WORK AREA.
!     INTEGER IYM
!        THE ACTUAL FIRST DIMENSION OF THE MATRIX YM AS
!        SPECIFIED IN THE USERS PROGRAM.
!     INTEGER IYMFFT
!        THE ACTUAL FIRST DIMENSION OF THE MATRIX YMFFT AS
!        SPECIFIED IN THE USERS PROGRAM.
!     INTEGER I2
!        STATEMENT FUNCTION SPECIFYING THE DESIRED LOCATION WITHIN YM
!     INTEGER I3C
!        STATEMENT FUNCTION SPECIFYING THE DESIRED LOCATION WITHIN CCOV
!     INTEGER I3N
!        STATEMENT FUNCTION SPECIFYING THE DESIRED LOCATION WITHIN NLPPC
!     INTEGER J
!        THE INDEX OF -SERIES 1- IN THE ARRAY YM.
!     INTEGER JCCOV
!        THE ACTUAL SECOND DIMENSION OF THE ARRAY CCOV, AS
!        SPECIFIED IN THE USERS PROGRAM.
!     INTEGER JNLPPC
!        THE SECOND DIMENSION OF THE ARRAY NLPPC AS SPECIFIED
!        IN THE USERS PROGRAM.
!     INTEGER K
!        THE INDEX OF -SERIES 2- IN THE ARRAY YM.
!     INTEGER LAGMAX
!        THE MAXIMUM LAG VALUE REQUESTED.
!     INTEGER LDSMIN
!        THE MINIMUM LENGTH ALLOWED FOR THE ARRAY DSTAK.
!     INTEGER LDSTAK
!        THE LENGTH OF THE ARRAY DSTAK.
!     INTEGER LGLST, LGLSTJ, LGLSTK
!        THE STARTING LOCATION IN ISTAK FOR THE ARRAY LGLST,
!        AND THE LOCATIONS IN LGLST IN EHICH THE NUMBER OF THE
!        LAG OF THE LAST ACVF WHICH COULD BE COMPUTED FOR SERIES
!        J AND K, RESPECTIVELY, BEFORE A MISSNG ACVF (DUE TO MISSING
!        DATA).
!     INTEGER LYFFT
!        THE LENGTH OF THE VECTOR YFFT.
!     INTEGER M
!        THE NUMBER OF SERIES BEING COMPARED, IE THE
!        NUMBER OF COLUMNS OF DATA IN YM.
!     INTEGER N
!        THE INTEGER NUMBER OF OBSERVATIONS IN EACH SERIES
!     INTEGER NALL0
!        THE NUMBER OF OUTSTANDING STACK ALLOCATIONS
!     LOGICAL NEWPG
!        AN INDICATOR VARIABLE USED TO DETERMINE WHEN A NEW PAGE
!        IS APPROPRIATE FOR THE OUTPUT.
!     INTEGER NFFT
!        THE NUMBER OF OBSERVATIONS IN THE EXTENDED SERIES.
!     INTEGER NLPPC(INLPPC, JNLPPC, M)
!        THE ARRAY CONTAINING THE NUMBER OF LAGGED PRODUCT PAIRS
!        USED TO COMPUTE EACH ACVF ESTIMATE.
!     CHARACTER*1 NMSUB(6)
!        THE NAME OF THE SUBROUTINE CALLING THE ERROR CHECKING
!        SUBROUTINE.
!     INTEGER NPRT
!        THE INDICATOR VARIABLE USED TO SPEDIFY WHETHER OR NOT
!        PRINTED OUTPUT IS TO BE GIVEN, WHERE IF THE VALUE OF
!        NPRT IS ZERO, NO OUTPUT IS GIVEN.
!     INTEGER RHOC
!        THE STARTING LOCATION IN DSTAK OF THE ARRAY RHOC.
!     REAL(KIND=WP) :: RSTAK(12)
!        THE DOUBLE PRECISION VERSION OF THE /CSTAK/ WORK AREA.
!     INTEGER SDRHOC
!        THE STARTING LOCATION IN THE WORK AREA FOR SDRHOC.
!     REAL(KIND=WP) :: YM(IYM, M)
!        THE MATRIX CONTAINING THE OBSERVED TIME SERIES
!     INTEGER YMEAN, YMEANJ, YMEANK
!        THE STARTING LOCATION FOR THE ARRAY CONTAINING THE
!        MEANS OF EACH OF THE SERIES, AND THE LOCATION IN
!        THE ARRAY FOR THE MEAN OF THE JTH AND KTH SERIES,
!        RESPECTIVELY.
!     REAL(KIND=WP) :: YMMISS(M)
!        THE MISSING VALUE CODES FOR EACH OF THE SERIES IN YM.
!     INTEGER YSD, YSDJ, YSDK
!        THE STARTING LOCATION FOR THE ARRAY CONTAINING THE
!        STANDARD DEVIATIONS OF EACH OF THE SERIES, AND THE
!        LOCATION IN THE ARRAY FOR THE STANDARD DEVIATION OF
!        THE JTH AND KTH SERIES, RESPECTIVELY.
!
!     SET UP NAME ARRAYS
!
     data&
    &  nmsub(1),  nmsub(2),  nmsub(3),  nmsub(4),  nmsub(5),  nmsub(6)&
     & /     'C',       'C',       'F',       'M',       'S',       ' '/
!
      i2(i,j) = i + (j-1)*iym
      i3c(i,j,k) = i + (j-1)*iccov + (k-1)*jccov*iccov
      i3n(i,j,k) = i + (j-1)*inlppc + (k-1)*jnlppc*inlppc
!
!     SET UP FOR ERROR CHECKING
!
      ierr = 0
      lyfft = n + lagmax
      iymfft = lyfft
      nfft = n
      isfft = .false.
      islong = .true.
!
      io = 1
      if (nprt .eq. 0) io = 0
!
     call ldscmp(3+2*io, 0, m, 0, 0, 0, 'D',&
     &            2*m+io*(4*lagmax+2), ldsmin)
!
     call ccfer(nmsub, n, lagmax, ldstak, ldsmin, iccov, jccov,&
     &  inlppc, jnlppc, m, lyfft, nfft, iym, iymfft, isfft, islong)
!
!     CHECK WHETHER AN ERROR HAS BEEN DETECTED
!
      if (ierr.eq.0) then
!
        fplm = d1mach(2)
!
!       SET UP THE WORK AREA.
!
        call stkset (ldstak, 4)
        nall0 = stkst(1)

        ifp = 4
!
        ymean = stkget(m, ifp)
        ysd = stkget(m, ifp)
        lglst = stkget(m, 2)
        if (nprt.eq.0) then
          rhoc = ysd
          sdrhoc = ysd
        else
          rhoc = stkget(2*lagmax+1, ifp)
          sdrhoc = stkget(2*lagmax+1, ifp)
        end if
!
        if (ierr.eq.0) then
!
!         BEGIN LOOP FOR COMPUTATIONS
!
          newpg = .false.
!
          do 40 k = 1, m
!
             ymeank = ymean + k - 1
             ysdk = ysd + k - 1
             lglstk = lglst + k - 1
!
            call acvfm (ym(i2(1,k)), ymmiss(k), n, rstak(ymeank),&
    &                   ccov(i3c(1,k,k)), lagmax, istak(lglstk),&
     &                   nlppc(i3n(1,k,k)), lagmax+1)
             rstak(ysdk) = sqrt(ccov(i3c(1,k,k)) * n / (n - 1))
!
             if ((k-1).le.0) go to 40
!
             do 30 j = 1, (k-1)
!
                ymeanj = ymean + j - 1
                ysdj = ysd + j - 1
                lglstj = lglst + j - 1
!
               call ccfmnm (ym(i2(1,j)), ymmiss(j),&
    &                       ym(i2(1,k)), ymmiss(k),&
    &                       n,  lagmax, 2*lagmax+1,&
    &                       ccov(i3c(1,j,j)), ccov(i3c(1,k,k)),&
    &                       ccov(i3c(1,j,k)), ccov(i3c(1,k,j)), iccov,&
    &                       nlppc(i3n(1,j,j)), nlppc(i3n(1,k,k)),&
    &                       nlppc(i3n(1,j,k)), nlppc(i3n(1,k,j)),&
    &                       inlppc,&
    &                       rstak(ymeanj), rstak(ymeank), rstak(rhoc),&
    &                       rstak(sdrhoc),&
     &                       nprt, min(istak(lglstj), istak(lglstk)))
!
                if (nprt .eq. 0) go to 30
!
!         CALL ROUTINE TO PRINT OUT CORRELATIONS
!
               call ccfout (j, rstak(ymeanj), rstak(ysdj), n,&
    &                       nlppc(i3n(1,j,j)), k, rstak(ymeank),&
    &                       rstak(ysdk), n, nlppc(i3n(1,k,k)), lagmax,&
    &                       2*lagmax+1, rstak(rhoc), rstak(sdrhoc),&
    &                       .true., nlppc(i3n(1,j,k)),&
    &                       nlppc(i3n(1,k,j)),&
     &                       inlppc, ymmiss(j), ymmiss(k), newpg)
!
                newpg = .true.
!
   30        continue
   40     continue
!
          cmiss = fplm
        end if
!
        call stkclr(nall0)
      end if
!
      if (ierr.ne.0) then
!
!     PRINT PROPER CALL SEQUENCE AND RETURN
!
        ierr = 1
        call iprint (iprt)
        write (iprt, 1000)
      end if
!
      return
!
!     FORMAT STATEMENTS
!
1000 format(/42h the correct form of the call statement is//&
    &  '       CALL CCFMS (YM, YMMISS, N, M, IYM,'/&
    &  '      +            LAGMAX, CCOV, CMISS, ICCOV, JCCOV,'/&
     &  '      +            NLPPC, INLPPC, JNLPPC, NPRT, LDSTAK)')
      end
