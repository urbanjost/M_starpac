!XACF
      SUBROUTINE XACF(LDS,typ)
      real(kind=wp),intent(in) :: typ
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     ROUTINE TO TEST THE TIME SERIES CORRELATION SUBROUTINES
!
!     SERIES Y IS LISTED AS SERIES X1 ON PAGE 362 IN JENKINS AND WATTS.
!
!     SERIES YD IS LISTED AS SERIES G ON PAGE 531 OF BOX AND JENKINS.
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 2, 1985
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      INTEGER
     &   LDS
!
!  SCALARS IN COMMON
      INTEGER
     &   IERR
!
!  ARRAYS IN COMMON
      REAL(KIND=WP) :: DSTAK(12)
!
!  LOCAL SCALARS
      REAL(KIND=WP) ::
     &   AMISS,YMISS
      INTEGER
     &   I,IAR,IPRT,ITEST,LACOV,LAGMAX,LDSTAK,LYFFT,N,NFAC,NPRT,NYD
!
!  LOCAL ARRAYS
      REAL(KIND=WP) ::
     &   ACOV(21),PHI(21),Y(100),YD(150),YFFT(150)
      INTEGER
     &   IOD(2),ND(2),NLPPA(21)
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL ACF,ACFD,ACFF,ACFFS,ACFM,ACFMS,ACFS,IPRINT
!
!  COMMON BLOCKS
      COMMON /CSTAK/DSTAK
      COMMON /ERRCHK/IERR
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: ACOV(21)
!        THE AUTOCOVARIANCE VECTOR.
!     REAL(KIND=WP) :: AMISS
!        THE MISSING VALUE CODE FOR THE RETURNED ACVF ESTIMATES
!        (VECTOR ACOV).
!     REAL(KIND=WP) :: DSTAK(12)
!        THE DOUBLE PRECISION VERSION OF THE /CSTAK/ WORK AREA.
!     INTEGER I
!        AN INDEXING VARIABLE.
!     INTEGER IAR
!        THE ORDER OF THE AUTOREGRESSIVE PROCESS CHOSEN.
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED
!     INTEGER IOD(2)
!        THE ORDER OF EACH OF THE DIFFERENCE FACTORS.
!     INTEGER IPRT
!        THE UNIT NUMBER FOR PRINTED OUTPUT.
!     INTEGER ITEST
!        THE NUMBER OF THE TEST BEING RUN
!     INTEGER LACOV
!        THE LENGTH OF THE ACVF RELATED VECTORS.
!     INTEGER LAGMAX
!        THE MAXIMUM LAG VALUE REQUESTED.
!     INTEGER LDSTAK
!        THE LENGTH OF THE ARRAY DSTAK.
!     INTEGER LYFFT
!        THE LENGTH OF THE ARRAYS USED WHEN THE COMPUTATIONS ARE
!        PERFORMED BY THE FFT.
!     INTEGER N
!        THE INTEGER NUMBER OF OBSERVATIONS IN EACH SERIES
!     INTEGER ND(2)
!        THE ARRAY CONTAINING THE NUMBER OF TIMES THE DIFFERENCE
!        FACTORS ARE TO BE APPLIED.
!     INTEGER NFAC
!        THE NUMBER OF DIFFERENCE FACTORS.
!     INTEGER NLPPA(21)
!        THE ARRAY CONTAINING THE NUMBER OF LAGGED PRODUCT PAIRS
!        USED TO COMPUTE EACH ACVF ESTIMATE.
!     INTEGER NPRT
!        THE INDICATOR VARIABLE USED TO SPECIFY WHETHER OR NOT
!        PRINTED OUTPUT IS TO BE GIVEN, WHERE IF THE VALUE OF
!        NPRT IS ZERO, NO OUTPUT IS MADE.
!     INTEGER NYD
!        THE NUMBER OF OBSERVATIONS IN THE SERIES TO BE DIFFERENCED.
!     REAL(KIND=WP) :: PHI(21)
!        THE ARRAY OF AUTOREGRESSIVE COEFFICIENTS FOR THE SELECTED
!        ORDER.
!     REAL(KIND=WP) :: Y(100), YD(150)
!        THE VECTOR CONTAINING THE OBSERVED TIME SERIES
!     REAL(KIND=WP) :: YFFT(150)
!        THE VECTORS USED FOR STORING THE SERIES FOR THE ROUTINES
!        USING THE FFT.
!     REAL(KIND=WP) :: YMISS
!        THE MISSING VALUE CODES FOR SERIES Y AND YM.
!
      DATA    Y(  1),   Y(  2),   Y(  3),   Y(  4),   Y(  5),   Y(  6)
     &    / -2.07_WP, -1.15_WP,  0.69_WP, -0.46_WP, -1.49_WP, -0.70_WP/
      DATA    Y(  7),   Y(  8),   Y(  9),   Y( 10),   Y( 11),   Y( 12)
     &    / -1.07_WP, -0.69_WP,-0.68_WP, 1.27_WP,-1.05_WP,-0.05_WP/
      DATA    Y( 13),   Y( 14),   Y( 15),   Y( 16),   Y( 17),   Y( 18)
     &    / -0.84_WP,-0.62_WP,-0.49_WP,-1.29_WP,-0.49_WP,-1.06_WP/
      DATA    Y( 19),   Y( 20),   Y( 21),   Y( 22),   Y( 23),   Y( 24)
     &    / -0.38_WP,-0.52_WP,-0.13_WP, 1.30_WP, -1.51_WP,-0.43_WP/
      DATA    Y( 25),   Y( 26),   Y( 27),   Y( 28),   Y( 29),   Y( 30)
     &    / -1.33_WP,-0.78_WP, 0.31_WP,-0.95_WP,-0.90_WP, -0.30_WP/
      DATA    Y( 31),   Y( 32),   Y( 33),   Y( 34),   Y( 35),   Y( 36)
     &    / -1.02_WP,-0.53_WP, 0.15_WP, 1.40_WP,  1.22_WP, 0.59_WP/
      DATA    Y( 37),   Y( 38),   Y( 39),   Y( 40),   Y( 41),   Y( 42)
     &    /  0.70_WP,  1.70_WP,  2.78_WP, 1.98_WP, 1.39_WP, 1.85_WP/
      DATA    Y( 43),   Y( 44),   Y( 45),   Y( 46),   Y( 47),   Y( 48)
     &    /  2.60_WP,  0.51_WP, 2.77_WP, 1.16_WP, 1.07_WP,-0.48_WP/
      DATA    Y( 49),   Y( 50),   Y( 51),   Y( 52),   Y( 53),   Y( 54)
     &    / -0.52_WP, 0.37_WP, 0.00_WP, -1.99_WP,-1.75_WP, 0.70_WP/
      DATA    Y( 55),   Y( 56),   Y( 57),   Y( 58),   Y( 59),   Y( 60)
     &    /  0.73_WP, 1.16_WP, 0.06_WP,-0.02_WP, 1.10_WP, -0.35_WP/
      DATA    Y( 61),   Y( 62),   Y( 63),   Y( 64),   Y( 65),   Y( 66)
     &    / -1.67_WP,-1.57_WP, 1.16_WP, 1.84_WP, 3.35_WP, 0.40_WP/
      DATA    Y( 67),   Y( 68),   Y( 69),   Y( 70),   Y( 71),   Y( 72)
     &    /  0.45_WP, 1.30_WP,  0.93_WP, 1.17_WP,-1.74_WP,-1.28_WP/
      DATA    Y( 73),   Y( 74),   Y( 75),   Y( 76),   Y( 77),   Y( 78)
     &    / -0.07_WP, 1.50_WP,  0.53_WP, 0.20_WP, -0.42_WP, 1.18_WP/
      DATA    Y( 79),   Y( 80),   Y( 81),   Y( 82),   Y( 83),   Y( 84)
     &    /  0.82_WP, 1.50_WP,  2.92_WP, 1.18_WP, 1.23_WP, 3.16_WP/
      DATA    Y( 85),   Y( 86),   Y( 87),   Y( 88),   Y( 89),   Y( 90)
     &    /  0.79_WP, 0.68_WP, 1.14_WP, 1.02_WP, 1.02_WP,-0.71_WP/
      DATA    Y( 91),   Y( 92),   Y( 93),   Y( 94),   Y( 95),   Y( 96)
     &    / -0.17_WP,-1.50_WP, -0.26_WP,-0.38_WP, 0.93_WP,-0.33_WP/
      DATA    Y( 97),   Y( 98),   Y( 99),   Y(100)
     &    / -1.12_WP,-2.95_WP,-2.09_WP,-1.11_WP                   /
!
      DATA   YD(  1),  YD(  2),  YD(  3),  YD(  4),  YD(  5),  YD(  6)
     &    /  112.0_WP, 118.0_WP, 132.0_WP, 129.0_WP, 121.0_WP, 135.0_WP/
      DATA   YD(  7),  YD(  8),  YD(  9),  YD( 10),  YD( 11),  YD( 12)
     &    /  148.0_WP, 148.0_WP, 136.0_WP, 119.0_WP, 104.0_WP, 118.0_WP/
      DATA   YD( 13),  YD( 14),  YD( 15),  YD( 16),  YD( 17),  YD( 18)
     &    /  115.0_WP, 126.0_WP, 141.0_WP, 135.0_WP, 125.0_WP, 149.0_WP/
      DATA   YD( 19),  YD( 20),  YD( 21),  YD( 22),  YD( 23),  YD( 24)
     &    /  170.0_WP, 170.0_WP, 158.0_WP, 133.0_WP, 114.0_WP, 140.0_WP/
      DATA   YD( 25),  YD( 26),  YD( 27),  YD( 28),  YD( 29),  YD( 30)
     &    /  145.0_WP, 150.0_WP, 178.0_WP, 163.0_WP, 172.0_WP, 178.0_WP/
      DATA   YD( 31),  YD( 32),  YD( 33),  YD( 34),  YD( 35),  YD( 36)
     &    /  199.0_WP, 199.0_WP, 184.0_WP, 162.0_WP, 146.0_WP, 166.0_WP/
      DATA   YD( 37),  YD( 38),  YD( 39),  YD( 40),  YD( 41),  YD( 42)
     &    /  171.0_WP, 180.0_WP, 193.0_WP, 181.0_WP, 183.0_WP, 218.0_WP/
      DATA   YD( 43),  YD( 44),  YD( 45),  YD( 46),  YD( 47),  YD( 48)
     &    /  230.0_WP, 242.0_WP, 209.0_WP, 191.0_WP, 172.0_WP, 194.0_WP/
      DATA   YD( 49),  YD( 50),  YD( 51),  YD( 52),  YD( 53),  YD( 54)
     &    /  196.0_WP, 196.0_WP, 236.0_WP, 235.0_WP, 229.0_WP, 243.0_WP/
      DATA   YD( 55),  YD( 56),  YD( 57),  YD( 58),  YD( 59),  YD( 60)
     &    /  264.0_WP, 272.0_WP, 237.0_WP, 211.0_WP, 180.0_WP, 201.0_WP/
      DATA   YD( 61),  YD( 62),  YD( 63),  YD( 64),  YD( 65),  YD( 66)
     &    /  204.0_WP, 188.0_WP, 235.0_WP, 227.0_WP, 234.0_WP, 264.0_WP/
      DATA   YD( 67),  YD( 68),  YD( 69),  YD( 70),  YD( 71),  YD( 72)
     &    /  302.0_WP, 293.0_WP, 259.0_WP, 229.0_WP, 203.0_WP, 229.0_WP/
      DATA   YD( 73),  YD( 74),  YD( 75),  YD( 76),  YD( 77),  YD( 78)
     &    /  242.0_WP, 233.0_WP, 267.0_WP, 269.0_WP, 270.0_WP, 315.0_WP/
      DATA   YD( 79),  YD( 80),  YD( 81),  YD( 82),  YD( 83),  YD( 84)
     &    /  364.0_WP, 347.0_WP, 312.0_WP, 274.0_WP, 237.0_WP, 278.0_WP/
      DATA   YD( 85),  YD( 86),  YD( 87),  YD( 88),  YD( 89),  YD( 90)
     &    /  284.0_WP, 277.0_WP, 317.0_WP, 313.0_WP, 318.0_WP, 374.0_WP/
      DATA   YD( 91),  YD( 92),  YD( 93),  YD( 94),  YD( 95),  YD( 96)
     &    /  413.0_WP, 405.0_WP, 355.0_WP, 306.0_WP, 271.0_WP, 306.0_WP/
      DATA   YD( 97),  YD( 98),  YD( 99),  YD(100),  YD(101),  YD(102)
     &    /  315.0_WP, 301.0_WP, 356.0_WP, 348.0_WP, 355.0_WP, 422.0_WP/
      DATA   YD(103),  YD(104),  YD(105),  YD(106),  YD(107),  YD(108)
     &    /  465.0_WP, 467.0_WP, 404.0_WP, 347.0_WP, 305.0_WP, 336.0_WP/
      DATA   YD(109),  YD(110),  YD(111),  YD(112),  YD(113),  YD(114)
     &    /  340.0_WP, 318.0_WP, 362.0_WP, 348.0_WP, 363.0_WP, 435.0_WP/
      DATA   YD(115),  YD(116),  YD(117),  YD(118),  YD(119),  YD(120)
     &    /  491.0_WP, 505.0_WP, 404.0_WP, 359.0_WP, 310.0_WP, 337.0_WP/
      DATA   YD(121),  YD(122),  YD(123),  YD(124),  YD(125),  YD(126)
     &    /  360.0_WP, 342.0_WP, 406.0_WP, 396.0_WP, 420.0_WP, 472.0_WP/
      DATA   YD(127),  YD(128),  YD(129),  YD(130),  YD(131),  YD(132)
     &    /  548.0_WP, 559.0_WP, 463.0_WP, 407.0_WP, 362.0_WP, 405.0_WP/
      DATA   YD(133),  YD(134),  YD(135),  YD(136),  YD(137),  YD(138)
     &    /  417.0_WP, 391.0_WP, 419.0_WP, 461.0_WP, 472.0_WP, 535.0_WP/
      DATA   YD(139),  YD(140),  YD(141),  YD(142),  YD(143),  YD(144)
     &    /  622.0_WP, 606.0_WP, 508.0_WP, 461.0_WP, 390.0_WP, 432.0_WP/
!
      CALL IPRINT(IPRT)
      ITEST = 1
      LDSTAK = LDS
!
      N = 100
      LAGMAX = 20
      NPRT = 1
      LYFFT = 150
      LACOV = 21
      NYD = 144
      NFAC = 2
      ND(1) = 1
      ND(2) = 1
      IOD(1) = 12
      IOD(2) = 1
      YMISS = 1.16_WP
!
!     TEST OF ACF
!
    5 WRITE (IPRT,1000)
      CALL ACF(Y, N)
      WRITE (IPRT,1010) IERR
!
!     TEST OF ACFS
!
      WRITE (IPRT,1020)
      CALL ACFS(Y, N, LAGMAX, LACOV, ACOV, IAR, PHI, NPRT, LDSTAK)
      WRITE (IPRT,1010) IERR
!
!     PRINT STORAGE FROM ACFS
!
      IF (IERR.EQ.0) THEN
        WRITE (IPRT,1030) (ACOV(I),I=1,LAGMAX+1)
        WRITE (IPRT,1030) (PHI(I),I=1,IAR)
      END IF
!
!     TEST OF ACFD
!
      WRITE (IPRT,1040)
      CALL ACFD(YD, NYD, LAGMAX, NFAC, ND, IOD, LDSTAK)
      WRITE (IPRT,1010) IERR
!
!     TEST OF ACFM
!
      WRITE (IPRT,1050)
      CALL ACFM(Y, YMISS, N)
      WRITE (IPRT,1010) IERR
!
!     TEST OF ACFMS
!
      WRITE (IPRT,1120)
      CALL ACFMS(Y, YMISS, N, LAGMAX, LACOV, ACOV, AMISS, NLPPA, NPRT,
     &   LDSTAK)
      WRITE (IPRT,1010) IERR
!
!     PRINT STORAGE FROM ACFMS
!
      IF (IERR.EQ.0) THEN
        WRITE (IPRT,1030) (ACOV(I),I=1,LAGMAX+1)
        WRITE (IPRT,1140) (NLPPA(I),I=1,LAGMAX+1)
      END IF
!
!     COPY DATA INTO YFFT FOR ACFF
!
      DO 10 I=1,N
         YFFT(I) = Y(I)
   10 CONTINUE
!
!     TEST OF ACFF
!
      WRITE (IPRT,1090)
      CALL ACFF(YFFT, N, LYFFT, LDSTAK)
      WRITE (IPRT,1010) IERR
!
!     COPY DATA INTO YFFT FOR ACFFS
!
      DO 20 I=1,N
         YFFT(I) = Y(I)
   20 CONTINUE
!
!     TEST OF ACFFS
!
      WRITE (IPRT,1130)
      CALL ACFFS(YFFT, N, LYFFT, LDSTAK, LAGMAX, LACOV, ACOV, IAR, PHI,
     &   NPRT)
      WRITE (IPRT,1010) IERR
!
!     PRINT STORAGE FROM ACFFS
!
      IF (IERR.EQ.0) THEN
        WRITE (IPRT,1030) (ACOV(I),I=1,LAGMAX+1)
        WRITE (IPRT,1030) (PHI(I),I=1,IAR)
      END IF
!
      GO TO (100, 200, 300, 400), ITEST
!
!     TEST MINIMUM PROBLEM SIZE
!
  100 ITEST = ITEST + 1
      N = 13
      LAGMAX = 1
      NFAC = 1
      ND(1) = 1
      IOD(1) = 1
      GO TO 5
!
!     CHECK ERROR HANDLING
!
  200 ITEST = ITEST + 1
      N = 0
      LAGMAX = 20
      LYFFT = 0
      LACOV = 0
      NYD = 0
      NFAC = 1
      ND(1) = 0
      IOD(1) = 0
      GO TO 5
!
!     CHECK ERROR HANDLING
!
  300 ITEST = ITEST + 1
      N = 100
      LAGMAX = 0
      LYFFT = 0
      LACOV = 0
      NYD = 144
      NFAC = 0
      LDSTAK = 0
      GO TO 5
!
  400 RETURN
!
!     FORMAT STATEMENTS
!
 1000 FORMAT ('1TEST OF ACF')
 1010 FORMAT (8H IERR IS, I5)
 1020 FORMAT ('1', 12HTEST OF ACFS)
 1030 FORMAT (9F10.5)
 1040 FORMAT ('1', 12HTEST OF ACFD)
 1050 FORMAT ('1', 12HTEST OF ACFM)
 1090 FORMAT ('1', 12HTEST OF ACFF)
 1120 FORMAT ('1', 13HTEST OF ACFMS)
 1130 FORMAT ('1', 13HTEST OF ACFFS)
 1140 FORMAT (9I10)
      END
