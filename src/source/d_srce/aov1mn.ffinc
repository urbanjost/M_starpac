!AOV1MN
      SUBROUTINE AOV1MN(Y, TAG, N, TVALUE, TSIZE, TMEAN, TSD, NPRT,
     +   INDEX, SRANK, GPMIN, GPMAX, B10, RANKS, ITEMP, NG, NZW)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS SUBROUTINE COMPUTES A COMPREHENSIVE SET OF RESULTS FOR
!     ANALYSIS OF A ONE-WAY CLASSIFICATION WITH OPTIONAL PRINTED OUTPUT.
!     TAG VALUES CAN BE ANY VALUE WHERE ALL MEASUREMENTS WITH TAG
!     VALUES LESS THAN OR EQUAL TO ZERO ARE EXCLUDED FROM ANALYSIS.
!
!     ORIGINALLY WRITTEN FOR OMNITAB BY -
!       DAVID HOGBEN, STATISTICAL ENGINEERING DIVISION, NBS (10/25/69)
!
!     ADAPTED  BY -
!       JANET R. DONALDSON
!       STATISTICAL ENGINEERING DIVISION
!       NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  MAY 17, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      INTEGER
     +   N,NG,NPRT,NZW
!
!  ARRAY ARGUMENTS
      REAL(KIND=WP) ::
     +   B10(*),GPMAX(*),GPMIN(*),RANKS(*),SRANK(*),TAG(*),TMEAN(*),
     +   TSD(*),TSIZE(*),TVALUE(*),Y(*)
      INTEGER
     +   INDEX(*),ITEMP(*)
!
!  LOCAL SCALARS
      REAL(KIND=WP) ::
     +   AF,BF,BFRAT,BFSIG,BMS,BSS,C,CC,CFKW,DF,DFRAT,DFSIG,DMS,DSS,F,
     +   F1KW,F2KW,FMLC,FMUC,FNZW,FPLM,FSTAT,G1,GM,GR,HSTAT,IBAR,K0,
     +   MF,MKW,Q,RESSQ,RMLC,RMUC,RX,SBMS,SC,SFRAT,SFSIG,SIGKW,SLBF,
     +   SLCC,SMAX,SMIN,SMS,SNC,SOS,SQB,SQMS,SQOM,SQT,SSF,SSS,STMS,
     +   SUM,SWMS,T1,T2,T3,TIES,TMS,TSS,U1,U2,UMLC,UMUC,V1,V2,VKW,VLS,
     +   WMS,WSS,YBMAX,YBMIN,YMAX,YMIN
      INTEGER
     +   I,IPRT,ISZ,J,K,KK,KKK,L,M,M28,M3,M5,NN,NNE1,NZPNTR
      CHARACTER
     +   BLANK*1,HIGH*1,ISD*1,LOW*1,MEAN*1
!
!  LOCAL ARRAYS
      REAL(KIND=WP) ::
     +   STATS(15)
!
!  EXTERNAL FUNCTIONS
      REAL(KIND=WP) ::
     +   CDFF,PPFF,PPFT,D1MACH
      EXTERNAL CDFF,PPFF,PPFT,D1MACH
!
!  EXTERNAL SUBROUTINES
      EXTERNAL GENI,IPRINT,RANKO,SRTIR,SRTRI,SRTRRI
!
!  INTRINSIC FUNCTIONS
      INTRINSIC ABS,ANINT,INT,LOG,MAX,MIN,NINT,DBLE,SQRT
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: AF
!        A FOR F
!     REAL(KIND=WP) :: BF
!        BARTLETT F
!     REAL(KIND=WP) :: BFRAT
!        BETWEEN GROUPS F RATIO
!     REAL(KIND=WP) :: BFSIG
!        BETWEEN GROUPS SIGNIFICANCE LEVEL
!     CHARACTER*1 BLANK
!        HOLLERITH BLANK
!     REAL(KIND=WP) :: BMS
!        BETWEEN MS
!     REAL(KIND=WP) :: BSS
!        BETWEEN SS
!     REAL(KIND=WP) :: B10(NG)
!        *
!     REAL(KIND=WP) :: C
!        INTERMEDIATE RESULT STORAGE
!     REAL(KIND=WP) :: CC
!        COCHRANS C
!     REAL(KIND=WP) :: CFKW
!        CORRECTION FACTOR FOR KRUSKAL-WALLIS
!     REAL(KIND=WP) :: DF
!        D.F.
!     REAL(KIND=WP) :: DFRAT
!        DEVIATIONS ABOUT LINE F RATIO
!     REAL(KIND=WP) :: DFSIG
!        DEVIATIONS ABOUT LINE F SIGNIFICANCE LEVEL
!     REAL(KIND=WP) :: DMS
!        DEVIATIONS ABOUT LINE MS
!     REAL(KIND=WP) :: DSS
!        DEVIATIONS ABOUT LINE SS
!     REAL(KIND=WP) :: F
!        BETWEEN MEANS F-TEST
!     REAL(KIND=WP) :: FMLC
!        FIXED MODEL LOWER CONFIDENCE LIMIT FOR MEAN
!     REAL(KIND=WP) :: FMUC
!        FIXED MODEL UPPER CONFIDENCE LIMIT FOR MEAN
!     REAL(KIND=WP) :: FNZW
!        *
!     REAL(KIND=WP) :: FPLM
!        LARGEST SINGLE PRECISION MAGNITUDE OF MACHINE
!     REAL(KIND=WP) :: FSTAT
!        F STATISTIC ASSOCIATED WITH KRUSKAL-WALLIS H STATISTIC
!     REAL(KIND=WP) :: F1KW
!        F1 D.F. FOR KRUSKAL-WALLIS F
!     REAL(KIND=WP) :: F2KW
!        F2 D.F. FOR KRUSKAL-WALLIS F
!     REAL(KIND=WP) :: GM
!        GRAND MEAN, MEAN OF ALL OBSERVATIONS WITH POSITIVE
!        NON-ZERO TAGS
!     REAL(KIND=WP) :: GPMAX(NG)
!        THE VECTOR OF MAXIMUM OBSERVATIONS FOR EACH GROUP
!     REAL(KIND=WP) :: GPMIN(NG)
!        THE VECTOR OF MINIMUM OBSERVATIONS FOR EACH GROUP
!     REAL(KIND=WP) :: GR
!        NZW-NG
!     REAL(KIND=WP) :: G1
!        NG-1
!     CHARACTER*1 HIGH
!        HOLLERITH + (PLUS)
!     REAL(KIND=WP) :: HSTAT
!        KRUSKAL-WALLIS H STATISTIC, SEE BROWNLEE(1965), PAGE 256
!     INTEGER I
!        INDEX VARIABLE
!     REAL(KIND=WP) :: IBAR
!        I BAR, ((SUM OF I)/NZW), WHERE I=1,NZW
!     INTEGER INDEX(N)
!        PERMUTATION VECTOR FOR Y AND LATER FOR TMEAN
!     INTEGER IPRT
!        THE OUTPUT LOGICAL UNIT NUMBER
!     CHARACTER*1 ISD
!        CAN CONTAIN FOLLOWING CHARACTERS FOR PRINTING
!        +, -,  (BLANK)
!     INTEGER ISZ
!        INTEGER SIZE OF GROUP
!     INTEGER ITEMP(NZW)
!        TEMPORARY INDEX VECTOR USED IN COMPUTING RANKS
!     INTEGER J
!        AN INDEX VARIABLE
!     INTEGER K
!        INDEX VARIABLE
!     INTEGER KK
!        POINTER TO THE LARGEST OF THE GROUP MEANS
!     INTEGER KKK
!        POINTER TO THE SMALLEST OF THE GROUP MEANS
!     REAL(KIND=WP) :: K0
!        = NZW - (SNC/NZW)/ G1
!     INTEGER L
!        INDEX VARIABLE
!     CHARACTER*1 LOW
!        HOLLERITH - (MINUS)
!     INTEGER M
!        INDEX VARIABLE
!     CHARACTER*1 MEAN
!        CAN CONTAIN FOLLOWING CHARACTERS FOR PRINTING
!        +, -,  (BLANK)
!     REAL(KIND=WP) :: MF
!        M FOR F
!     REAL(KIND=WP) :: MKW
!        M FOR KRUSKAL-WALLIS MEAN
!     INTEGER M28
!        USED IN CREATING BACKWARD LOOP
!     INTEGER M3
!        NG - 2
!     INTEGER M5
!        NZW - 1
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS
!     INTEGER NG
!        THE NUMBER OF GROUPS OF DIFFERENT POSITIVE TAG VALUES
!     INTEGER NN
!        AID IN PRINTING VALUES
!     INTEGER NNE1
!        NUMBER OF GROUPS WITH SIZE NOT EQUAL TO ONE
!     INTEGER NPRT
!        THE VARAIBLE CONTROLLING AUTOMATIC PRINTOUT
!        IF NPRT = 0, PRINTOUT SUPPRESSED
!           OTHERWISE PRINTOUT PROVIDED
!     INTEGER NZPNTR
!        A POINTER TO THE FIRST NON-ZERO TAG IN THE SORTED TAG VECTOR
!     INTEGER NZW
!        THE NUMBER OF OBSERVATIONS WITH POSITIVE, NON-ZERO, TAG VALUES
!     REAL(KIND=WP) :: Q
!        SIGNIFICANCE LEVEL FROM F-DISTRIBUTION
!     REAL(KIND=WP) :: RANKS(NZW)
!        THE RANKS OF THE OBSERVATIONS WITH POSITIVE TAG VALUES
!     REAL(KIND=WP) :: RESSQ
!        RESIDUALS SQUARED
!     REAL(KIND=WP) :: RMLC
!        RANDOM MODEL LOWER CONFIDENCE LIMIT FOR MEAN
!     REAL(KIND=WP) :: RMUC
!        RANDOM MODEL UPPER CONFIDENCE LIMIT FOR MEAN
!     REAL(KIND=WP) :: RX
!        USED IN CALCULATING MANDEL APPROXIMATION
!     REAL(KIND=WP) :: SBMS
!        SQRT BETWEEN MS
!     REAL(KIND=WP) :: SC
!        SUM OF N(I) CUBED, WHERE N(I) IS THE SIZE OF GROUP I
!     REAL(KIND=WP) :: SFRAT
!        SLOPE F RATIO
!     REAL(KIND=WP) :: SFSIG
!        SLOPE F SIGNIFICANCE LEVEL
!     REAL(KIND=WP) :: SIGKW
!        SIGNIFICANCE LEVEL FOR KRUSKAL-WALLIS F (OR H)
!     REAL(KIND=WP) :: SLBF
!        SIGNIFICANCE LEVEL FOR BARLETT F
!     REAL(KIND=WP) :: SLCC
!        SIGNIFICANCE LEVEL FOR COCHRANS C
!     REAL(KIND=WP) :: SMAX
!        MAXIMUM OF S(I), WHERE S(I) IS THE STD. DEV. OF GROUP I
!     REAL(KIND=WP) :: SMIN
!        MINIMUM OF S(I)
!     REAL(KIND=WP) :: SMS
!        SLOPE MS
!     REAL(KIND=WP) :: SNC
!        SUM OF N(I) SQUARED
!     REAL(KIND=WP) :: SOS
!        SUM OF S(I) SQUARED
!     REAL(KIND=WP) :: SQB
!        SQRT BETWEEN MS / NZW
!     REAL(KIND=WP) :: SQMS
!        SQRT WITHIN MS / NZW
!     REAL(KIND=WP) :: SQOM
!        OMEGA HAT SQUARED
!     REAL(KIND=WP) :: SQT
!        SQRT TOTAL MS / NZW
!     REAL(KIND=WP) :: SRANK(NG)
!        THE SUM OF THE RANKS FOR THE OBSERVATIONS IN EACH GROUP
!     REAL(KIND=WP) :: SSF
!        S * SQRT(NG-1) * F
!     REAL(KIND=WP) :: SSS
!        SLOPE SS
!     REAL(KIND=WP) :: STATS(15)
!        VECTOR OF STATISTICS
!     REAL(KIND=WP) :: STMS
!        SQRT TOTAL MS
!     REAL(KIND=WP) :: SUM
!        INTERMIDIATE VALUE
!     REAL(KIND=WP) :: SWMS
!        SQRT WITHIN MS
!     REAL(KIND=WP) :: TAG(N)
!        VECTOR OF CLASSIFICATION VALUES - VALUES LESS THAN OR EQUAL
!        TO ZERO ARE IGNORED FOR ANALYSIS.  ON ENTERING TAG IS
!        SORTED SMALLEST TO LARGEST
!     REAL(KIND=WP) :: TIES
!        *
!     REAL(KIND=WP) :: TMEAN(NG)
!        THE MEAN OF EACH OF THE GROUPS
!     REAL(KIND=WP) :: TMS
!        TOTAL MS
!     REAL(KIND=WP) :: TSD(NG)
!        THE STANDARD DEVIATIONS OF EACH OF THE GROUPS (NOT THE
!        STANDARD DEVIATIONS OF THE MEANS)
!     REAL(KIND=WP) :: TSIZE(NG)
!        THE SIZE OF EACH OF THE DIFFERENT GROUPS
!     REAL(KIND=WP) :: TSS
!        TOTAL SS
!     REAL(KIND=WP) :: TVALUE(NG)
!        THE DIFFERENT POSITIVE (NON-ZERO) TAG VALUES ANALYZED, ORDERED
!        FROM SMALLEST TO LARGEST
!     REAL(KIND=WP) :: T1
!        T(.05,NG-1)
!     REAL(KIND=WP) :: T2
!        T(.05,NG-1)
!     REAL(KIND=WP) :: T3
!        T(.05,NZW-1)
!     REAL(KIND=WP) :: UMLC
!        UNGROUPED MODEL LOWER CONFIDENCE LIMIT FOR MEAN
!     REAL(KIND=WP) :: UMUC
!        UNGROUPED MODEL UPPER CONFIDENCE LIMIT FOR MEAN
!     REAL(KIND=WP) :: U1, U2
!        USED IN CALCULATING MANDEL APPROXIMATION
!     REAL(KIND=WP) :: VKW
!        U FOR KRUSKAL-WALLIS F
!     REAL(KIND=WP) :: VLS
!        LARGEST VARIANCE / SMALLEST VARIANCE
!     REAL(KIND=WP) :: V1, V2
!        USED IN CALCULATING MANDEL APPROXIMATION
!     REAL(KIND=WP) :: WMS
!        WITHIN MS
!     REAL(KIND=WP) :: WSS
!        WITHIN SS
!     REAL(KIND=WP) :: Y(N)
!        OBSERVATIONS TO BE ANALYZED, SORTED BY TAGS
!        Y(NZPNTR) IS THE FIRST ELEMENT WITH A NON-ZERO TAG
!     REAL(KIND=WP) :: YBMAX
!        MAXIMUM YBAR(I), WHERE YBAR(I) IS THE MEAN OF GROUP I
!     REAL(KIND=WP) :: YBMIN
!        MINIMUN YBAR(I)
!     REAL(KIND=WP) :: YMAX
!        MAXIMUM OBSERVATION
!     REAL(KIND=WP) :: YMIN
!        MINIMUM OBSERVATION
!
!     MACHINE DEPENDENT VARIABLE - FPLM
!
      DATA BLANK /' '/
      DATA LOW /'-'/
      DATA HIGH /'+'/
!
      CALL IPRINT(IPRT)
      FPLM = D1MACH(2)
      NZPNTR = N - NZW + 1
      FNZW = NZW
!
!     ZERO WORK VECTORS
!
      DO 10 I=1,NG
         TVALUE(I) = 0.0E0_WP
         TSIZE(I) = 0.0E0_WP
         TMEAN(I) = 0.0E0_WP
         TSD(I) = 0.0E0_WP
         SRANK(I) = 0.0E0_WP
         GPMIN(I) = 0.0E0_WP
         GPMAX(I) = 0.0E0_WP
         B10(I) = 0.0E0_WP
   10 CONTINUE
!
      DO 20 I=1,15
         STATS(I) = 0.0E0_WP
   20 CONTINUE
!
      CC = 0.0E0_WP
      F = 0.0E0_WP
      DMS = 0.0E0_WP
      BSS = 0.0E0_WP
      WSS = 0.0E0_WP
      HSTAT = 0.0E0_WP
      MF = 0.0E0_WP
      SC = 0.0E0_WP
      SMAX = 0.0E0_WP
      NNE1 = 0
      SNC = 0.0E0_WP
      SOS = 0.0E0_WP
      SSS = 0.0E0_WP
      SUM = 0.0E0_WP
      TIES = 0.0E0_WP
      TSS = 0.0E0_WP
      SMIN = 0.0E0_WP
      SFRAT = 0.0E0_WP
!
!     BEGIN COMPUTATIONS
!
!     COMPUTE RANKS
!
      CALL RANKO(NZW, Y(NZPNTR), ITEMP, RANKS, TIES)
!
!     INITIALIZE FIRST ELEMENT BEFORE ENTERING LOOP
!
      TVALUE(1) = TAG(NZPNTR)
      SRANK(1) = RANKS(1)
      GPMIN(1) = Y(NZPNTR)
      GPMAX(1) = Y(NZPNTR)
      YMIN = GPMIN(1)
      YMAX = GPMAX(1)
      GM = Y(NZPNTR)
      IBAR = 1.0E0_WP
      TMEAN(1) = Y(NZPNTR)
      TSIZE(1) = 1.0E0_WP
!
!     DETERMINE MEANS AND MAXS, DO SUMMATION PRIOR TO
!     DETERIMING MEANS
!     HERE J IS THE GROUP NUMBER
!
      J = 1
      L = NZPNTR + 1
      DO 50 I=L,N
         IF (TAG(I).EQ.TAG(I-1)) GO TO 40
!
!        NEW TAG GROUP
         J = J + 1
         TVALUE(J) = TAG(I)
         GPMIN(J) = Y(I)
         GPMAX(J) = Y(I)
   40    TSIZE(J) = TSIZE(J) + 1.0E0_WP
         TMEAN(J) = TMEAN(J) + Y(I)
         GM = GM + Y(I)
!
!     UNNECESSARY COMPUTATIONS IF PRINTED OUTPUT IS SUPRESSED
!
         IF (NPRT.EQ.0) GO TO 50
         K = I + 1 - NZPNTR
         SRANK(J) = SRANK(J) + RANKS(K)
         GPMIN(J) = MIN(GPMIN(J),Y(I))
         GPMAX(J) = MAX(GPMAX(J),Y(I))
         YMIN = MIN(YMIN,GPMIN(J))
         YMAX = MAX(YMAX,GPMAX(J))
         IBAR = IBAR + J
   50 CONTINUE
!
!     CALCULATE MEANS
!
      GM = GM/FNZW
      IBAR = IBAR/FNZW
      K = NZPNTR-1
      I = NZPNTR
      DO 70 J=1,NG
         IF (TSIZE(J).GE.2.0E0_WP) THEN
            TMEAN(J) = TMEAN(J)/TSIZE(J)
         ELSE
            TMEAN(J) = TMEAN(J)
         END IF
         K = K + INT(TSIZE(J))
!
!     L GIVES INDEX TO Y VALUE WITHIN GROUP J
!
         DO 60 L=I,K
            RESSQ = (Y(L)-TMEAN(J))*(Y(L)-TMEAN(J))
            TSD(J) = TSD(J) + RESSQ
            IF (NPRT.EQ.0) GO TO 60
            BSS = BSS + (TMEAN(J)-GM)*(TMEAN(J)-GM)
            WSS = WSS + RESSQ
            TSS = TSS + (Y(L)-GM)*(Y(L)-GM)
   60    CONTINUE
         I = K + 1
   70 CONTINUE
!
!     NOW DONE WITH TAG VECTOR, RETURN VECTOR TO INPUT ORDER
!     INDEX IS FREED FOR USE IN OTHER PLACES
!
      CALL SRTRRI(TAG, Y, N, INDEX)
!
!     CHECK FOR PRINTED OUTPUT
!
      IF (NPRT.NE.0) GO TO 90
!
!     COMPUTE STANDARD DEVIATIONS WITHIN EACH GROUP
!
      DO 80 J=1,NG
         TSD(J) = SQRT(TSD(J))
         IF (TSIZE(J).LE.1.0E0_WP) GO TO 80
         TSD(J) = TSD(J)/SQRT(TSIZE(J)-1.0E0_WP)
   80 CONTINUE
!
!     COMPUTATIONS COMPLETE FOR STORED OUTPUT - RETURN IF PRINTED
!     OUTPUT IS SUPRESSED
!
      RETURN
   90 YBMIN = TMEAN(1)
      YBMAX = TMEAN(1)
      SMIN = FPLM
!     HERE I IS THE GROUP NUMBER
      DO 120 I=1,NG
         IF (TSD(I).GT.0.0E0_WP) THEN
            B10(I) = TSIZE(I)*(TSIZE(I)-1.0E0_WP)/TSD(I)
            STATS(1) = STATS(1) + B10(I)*TMEAN(I)
            STATS(2) = STATS(2) + B10(I)
            IF (TSIZE(I).GT.1.0E0_WP) THEN
               TSD(I) = SQRT(TSD(I)/(TSIZE(I)-1.0E0_WP))
            END IF
            MF = MF + (TSIZE(I)-1.0E0_WP)*LOG(TSD(I)*TSD(I))
         END IF
         IF (NINT(TSIZE(I)).GE.2) THEN
            NNE1 = NNE1 + 1
            SMAX = MAX(SMAX,TSD(I))
            SMIN = MIN(SMIN,TSD(I))
            STATS(3) = STATS(3) + 1.0E0_WP/(TSIZE(I)-1.0E0_WP)
         END IF
         SSS = SSS + TSIZE(I)*(I-IBAR)*(TMEAN(I)-GM)
         STATS(4) = STATS(4) + TSIZE(I)*(I-IBAR)*(I-IBAR)
!
!        LOOK FOR SMALLEST AND LARGEST MEANS (YBAR)
!
         YBMIN = MIN(YBMIN,TMEAN(I))
         YBMAX = MAX(YBMAX,TMEAN(I))
!
         HSTAT = HSTAT + SRANK(I)*SRANK(I)/TSIZE(I)
         SUM = SUM + 1.0E0_WP/TSIZE(I)
         STATS(5) = STATS(5) + (TMEAN(I)-GM)*(TMEAN(I)-GM)
         SOS = SOS + TSD(I)*TSD(I)
         SNC = SNC + TSIZE(I)*TSIZE(I)
         SC = SC + TSIZE(I)*TSIZE(I)*TSIZE(I)
  120 CONTINUE
      IF (STATS(2).NE.0.0E0_WP) STATS(1) = STATS(1)/STATS(2)
      IF (STATS(4).NE.0.0E0_WP) SSS = SSS*SSS/STATS(4)
      DSS = BSS - SSS
!
!     DEGREES OF FREEDOM FOR ANOVA
!
      G1 = NG-1
      M3 = NG - 2
      GR = NZW-NG
      M5 = NZW - 1
!
!     MEAN SQUARES
!
      BMS = BSS/G1
      SMS = SSS
      IF (NG.GE.3) DMS = DSS/M3
      WMS = WSS/GR
      TMS = TSS/M5
      IF (WMS.EQ.BMS) THEN
         BFRAT = 1.0E0_WP
         BFSIG = 1.0E0_WP
      ELSE IF (WMS.EQ.0.0E0_WP) THEN
         BFRAT = FPLM
         BFSIG = 0.0E0_WP
      ELSE
         BFRAT = BMS/WMS
         BFSIG = 1.0E0_WP - CDFF(BFRAT,G1,GR)
      END IF
      IF (WMS.EQ.DMS) THEN
         DFRAT = 1.0E0_WP
         DFSIG = 1.0E0_WP
      ELSE IF (WMS.EQ.0.0E0_WP) THEN
         DFRAT = FPLM
         DFSIG = 0.0E0_WP
      ELSE
         DFRAT = DMS/WMS
         DFSIG = 1.0E0_WP - CDFF(DFRAT,DBLE(M3),DBLE(NZW-2))
      END IF
      IF (SMS.EQ.DSS+WSS) THEN
         SFRAT = 1.0E0_WP
         SFSIG = 1.0E0_WP
      ELSE IF (DSS+WSS.EQ.0.0E0_WP) THEN
         SFRAT = FPLM
         SFSIG = 0.0E0_WP
      ELSE
         SFRAT = SMS/((DSS+WSS)/(FNZW-2.0E0_WP))
         SFSIG = 1.0E0_WP - CDFF(SFRAT,1.0E0_WP,GR)
      END IF
!
!     COMPUTE FOR KRUSKAL-WALLIS TEST
!     FOR FORMULAE WITH CLEARER FORM AND NAMES SEE
!     KRAFT AND VAN EEDEN  A NON PARAMETRIC INTRODUCTION TO STATISTICS,
!     PP. 238 - 240
!
      STATS(6) = NZW*(NZW+1)
      HSTAT = (12.0E0_WP*HSTAT/STATS(6)) - (3.0E0_WP*(NZW+1))
      IF (TIES.EQ.NZW*NZW*NZW-NZW) THEN
         CFKW = 0.0E0_WP
         HSTAT = 0.0E0_WP
         MKW = 0.0E0_WP
      ELSE
         CFKW = 1.0E0_WP - TIES/(NZW*NZW*NZW-NZW)
         HSTAT = HSTAT/CFKW
         MKW = ((NZW*NZW*NZW-SC)/STATS(6))/CFKW
      END IF
      VKW = 2.0E0_WP*G1 -
     +   (0.4D0_WP*(3*NG*M3+NZW*(2*NG*(NG-3)+1)))/STATS(6)
     +   - 6.0E0_WP*SUM/5.0E0_WP
      IF (MKW-HSTAT.GT.0.0E0_WP .AND.
     +    MKW.NE.0.0E0_WP .AND. VKW.NE.0.0E0_WP) THEN
         F1KW = (G1*(G1*(MKW-G1)-VKW))/(0.5D0_WP*VKW*MKW)
         F2KW = (MKW-G1)*F1KW/G1
         FSTAT = (HSTAT*(MKW-G1))/(G1*(MKW-HSTAT))
         SIGKW = 1.0E0_WP - CDFF(FSTAT,ANINT(F1KW),ANINT(F2KW))
      ELSE
         SIGKW = 0.0E0_WP
      END IF
!
!     COMPUTE TOTAL STATISTICS
!
      SWMS = SQRT(WMS)
      SBMS = SQRT(STATS(5)/G1)
      STMS = SQRT(TMS)
      SQMS = SWMS/(SQRT(FNZW))
      SQB = SBMS/(SQRT(DBLE(NG)))
      SQT = STMS/(SQRT(FNZW))
      T1 = PPFT(0.975D0_WP,INT(GR))
      T2 = PPFT(0.975D0_WP,INT(G1))
      T3 = PPFT(0.975D0_WP,M5)
      FMLC = GM - SQMS*T1
      RMLC = GM - SQB*T2
      UMLC = GM - SQT*T3
      FMUC = GM + SQMS*T1
      RMUC = GM + SQB*T2
      UMUC = GM + SQT*T3
!
      SSF = SWMS*SQRT(G1*PPFF(0.95D0_WP,INT(G1),INT(GR)))
!
!     TESTS FOR HOMOGENEITY OF VARIANCES
!
      IF (SMAX*SMAX.EQ.SOS) THEN
         CC = 1.0E0_WP
      ELSE IF (SOS.NE.0.0E0_WP) THEN
         CC = SMAX*SMAX/SOS
      END IF
      STATS(7) = ANINT(FNZW/NG)
      IF ((NNE1.GE.2) .AND. (CC.NE.1.0E0_WP)) THEN
         SLCC = 1.0E0_WP -
     +          CDFF((NNE1-1)*CC/(1.0E0_WP-CC),STATS(7),
     +          STATS(7)*(NNE1-1))
      ELSE
         SLCC = 1.0E0_WP
      END IF
      SLCC = (NNE1-1)*SLCC
      IF (SLCC.GT.1.0E0_WP) SLCC = 1.0E0_WP
!
      IF (SMIN.EQ.SMAX) THEN
         VLS = 1.0E0_WP
      ELSE
         IF (SMIN.EQ.0.0E0_WP) THEN
            VLS = FPLM
         ELSE
            VLS = (SMAX/SMIN)*(SMAX/SMIN)
         END IF
      END IF
      IF (WMS.GT.0.0E0_WP) MF = GR*LOG(WMS) - MF
      AF = (STATS(3)-(1.0E0_WP/GR))/(3.0E0_WP*G1)
      SLBF = 1.0E0_WP
      IF ((AF.NE.1.0E0_WP) .AND. (NNE1.GE.2)) THEN
         DF = (NNE1+1)/(AF*AF)
         BF = (DF*MF)/((NNE1-1)*(DF/(1.0E0_WP-AF+(2.0E0_WP/DF))-MF))
         IF (BF.LT.0.0E0_WP) BF = 0.0E0_WP
         SLBF = 1.0E0_WP - CDFF(BF,DBLE(NNE1-1),ANINT(DF))
      ELSE
         BF = FPLM
      END IF
      K0 = (FNZW-(SNC/FNZW))/G1
      SQOM = (BMS-WMS)/K0
!
!     COMPUTATIONS ARE NOW COMPLETE ************************************
!
!     PRINT ANOVA
!
      NN = N - NZW
      WRITE (IPRT,1000) NN
      NN = NG - 1
      WRITE (IPRT,1010) NN, BSS, BMS, BFRAT, BFSIG
      IF (NG.LT.3) GO TO 180
      IF (BFSIG.GE..10) GO TO 180
      NN = 1
      WRITE (IPRT,1020) NN, SSS, SMS, SFRAT, SFSIG
      WRITE (IPRT,1030) M3, DSS, DMS, DFRAT, DFSIG
  180 NN = NZW - NG
      WRITE (IPRT,1040) NN, WSS, WMS
      WRITE (IPRT,1050) M5, TSS
!
!     PRINT KRUSKAL-WALLIS TEST
!
      WRITE (IPRT,1060) HSTAT, SIGKW
!
!     PRINT ESTIMATES
!
      WRITE (IPRT,1070)
      DO 200 I=1,NG
         MEAN = BLANK
         IF (TMEAN(I).LE.YBMIN) MEAN = LOW
         IF (TMEAN(I).GE.YBMAX) MEAN = HIGH
         ISD = BLANK
         IF (TSD(I).LE.SMIN) ISD = LOW
         IF (TSD(I).GE.SMAX) ISD = HIGH
         ISZ = INT(TSIZE(I))
         IF (ISZ.LE.1) THEN
            WRITE (IPRT,1090) TVALUE(I), ISZ, TMEAN(I), MEAN, GPMIN(I),
     +         GPMAX(I), SRANK(I)
         ELSE
            STATS(9) = TSD(I)/SQRT(TSIZE(I))
            STATS(10) = PPFT(0.975D0_WP,ISZ-1)
            STATS(8) = TMEAN(I) - STATS(9)*STATS(10)
            STATS(11) = TMEAN(I) + STATS(9)*STATS(10)
            WRITE (IPRT,1080) TVALUE(I), ISZ, TMEAN(I), MEAN, TSD(I),
     +                        ISD, STATS(9), GPMIN(I), GPMAX(I),
     +                        SRANK(I), STATS(8), STATS(11)
         END IF
  200 CONTINUE
      WRITE (IPRT,1100) NZW, GM, YMIN, YMAX, SWMS, SQMS, FMLC, FMUC,
     +   SBMS, SQB, RMLC, RMUC, STMS, SQT, UMLC, UMUC
      IF (BFSIG.LT.0.10) THEN
!
!     SORT YBAR FOR MULTIPLE COMPARISIONS OF MEANS
!
         CALL GENI(INDEX, NG, 1, 1)
         CALL SRTIR(INDEX, NG, TMEAN)
!
!     COMPUTE AND PRINT FOR MULTIPLE COMPARISIONS
!
         IF (NZW-NG.LT.4) GO TO 270
         WRITE (IPRT,1110)
!
!     NEWMAN-KEULS-HARTLEY
!
         WRITE (IPRT,1120)
         RX = -.283917D0 + 2.63532D0*(GR-1.00123D0)**(-.95862D0)
         U1 = -.314115D0 + 2.38301D0*(GR-1.03428D0)**(-.864005D0)
         U2 = 3.65961D0*U1**2 - 1.00891D0*U1 - 0.166346D0
         J = 1
         M28 = 0
  210    I = NG
  220    IF (I.LE.M28) GO TO 260
         IF (I.EQ.J) GO TO 230
         STATS(14) = ABS(TMEAN(I)-TMEAN(J))
!
!     MANDEL APPROXIMATION TO PERCENT POINT OF STUDENTIZED RANGE
!
         STATS(12) = I-J+1
         C = 2.3849867D0 -
     +       2.9051857D0*(STATS(12)-0.57583164D0)**(-.069648109D0)
         V1 = 1.30153D0 -
     +        1.95073D0*(STATS(12)+.394915D0)**(-.139783D0)
         V2 = 4.72863D0*V1**2 + 0.404271D0*V1 - 0.135104D0
         STATS(13) = 6.15075D0 + 4.441409D0*RX +
     +               6.7514569D0*C + 7.4671282D0*U1*V1 -
     +               0.157537D0*U2*V2
         KK = INDEX(I)
         KKK = INDEX(J)
         STATS(13) = STATS(13)*
     +            SQRT(0.5D0*((1.0E0_WP/TSIZE(KK))+(1.0E0_WP/TSIZE(KKK))))*
     +            SWMS
         IF (STATS(14).LE.STATS(13)) GO TO 230
         I = I - 1
         GO TO 220
  230    IF (J.EQ.1) GO TO 250
         IF (J.GT.M28) GO TO 240
         WRITE (IPRT,1150)
         GO TO 250
  240    WRITE (IPRT,1160)
  250    WRITE (IPRT,1140) (TMEAN(M),M=J,I)
         IF (I.GE.NG) GO TO 270
         M28 = I
  260    J = J + 1
         GO TO 210
!
!     SCHEFFE METHOD
!
  270    WRITE (IPRT,1130)
         J = 1
         M28 = 0
  280    I = NG
  290    IF (I.LE.M28) GO TO 330
         IF (I.EQ.J) GO TO 300
         KK = INDEX(I)
         KKK = INDEX(J)
         STATS(14) = ABS(TMEAN(I)-TMEAN(J))
         STATS(13) = SSF*SQRT((1.0E0_WP/TSIZE(KK))+(1./TSIZE(KKK)))
         IF (STATS(14)-STATS(13).LE.0.0E0_WP) GO TO 300
         I = I - 1
         GO TO 290
  300    IF (J.EQ.1) GO TO 320
         IF (J.GT.M28) GO TO 310
         WRITE (IPRT,1150)
         GO TO 320
  310    WRITE (IPRT,1160)
  320    WRITE (IPRT,1140) (TMEAN(M),M=J,I)
         IF (I.GE.NG) GO TO 340
         M28 = I
  330    J = J + 1
         GO TO 280
!
!     RETURN TAG MEANS TO ORIGINAL ORDER
!
  340    CALL SRTRI(TMEAN, NG, INDEX)
      END IF
!
      IF (NNE1.LE.1) RETURN
      WRITE (IPRT,1170) CC, SLCC, BF, SLBF, VLS
      IF (SLCC.GT.0.1D0 .AND. SLBF.GT.0.1D0) GO TO 390
      DO 360 I=1,NG
         F = F + B10(I)*(TMEAN(I)-STATS(1))*(TMEAN(I)-STATS(1))
         IF (STATS(2).EQ.0.0E0_WP .OR. TSIZE(I).LE.1.0E0_WP) GO TO 360
         STATS(15) = STATS(15) +
     +               (1.0E0_WP-B10(I)*B10(I)/STATS(2)/STATS(2))/
     +               (TSIZE(I)-1.0E0_WP)
  360 CONTINUE
      IF (STATS(15).EQ.0.0E0_WP) GO TO 370
      STATS(15) = (NG*NG-1.0E0_WP)/(3.0E0_WP*STATS(15))
      IF (NG.LE.1) GO TO 370
      F = (F/G1)/(1.0E0_WP+(2.0E0_WP*M3/(3.0E0_WP*STATS(15))))
      GO TO 380
  370 F = 0.0E0_WP
  380 Q = 1.0E0_WP - CDFF(F,G1,ANINT(STATS(15)))
      WRITE (IPRT,1180) F, Q
  390 WRITE (IPRT,1190) SQOM
      RETURN
!
!     AUTOMATIC PRINTOUT IS FINISHED
!
!     FORMAT STATEMENTS
!
 1000 FORMAT(54H *GROUP NUMBERS HAVE BEEN ASSIGNED ACCORDING TO TAG VA,
     +   59HLUES GIVEN, WHERE THE SMALLEST TAG GREATER THAN ZERO HAS BE,
     +   14HEN ASSIGNED  */41H *GROUP NUMBER 1, THE NEXT SMALLEST, GROU,
     +   59HP NUMBER 2, ETC.  TAGS LESS THAN OR EQUAL TO ZERO HAVE NOT ,
     +   27HBEEN INCLUDED IN ANALYSIS.*/28H *NUMBER OF VALUES EXCLUDED ,
     +   17HFROM ANALYSIS IS , I4, 77X, 1H*//17X, 6HSOURCE, 14X, 4HD.F.,
     +   4X, 14HSUM OF SQUARES, 5X, 12HMEAN SQUARES, 9X, 7HF RATIO, 4X,
     +   7HF PROB./)
 1010 FORMAT(17X, 14HBETWEEN GROUPS, 5X, I4, 1P2E18.6, 4X, 0PE11.3,
     +   F10.3)
 1020 FORMAT(20X, 5HSLOPE, 14X, I4, 1P2E18.6, 3X, 0PE11.3, F10.3)
 1030 FORMAT(20X, 16HDEVS. ABOUT LINE, 3X, I4, 1P2E18.6, 3X, 0PE11.3,
     +   F10.3)
 1040 FORMAT(17X, 13HWITHIN GROUPS, 6X, I4, 1P2E18.6)
 1050 FORMAT(17X, 5HTOTAL, 14X, I4, 1PE18.6//)
 1060 FORMAT(11X, 49HKRUSKAL-WALLIS RANK TEST FOR DIFFERENCE BETWEEN G,
     +   16HROUP MEANS * H =, E11.3, 10H, F PROB =, F6.3, 10H (APPROX.)
     +   /)
 1070 FORMAT(55X, 9HESTIMATES/96X, 6HSUM OF/5X, 5H TAG , 10X, 3HNO.,
     +   6X, 4HMEAN, 7X, 11HWITHIN S.D., 2X, 12HS.D. OF MEAN, 5X,
     +   7HMINIMUM, 7X, 7HMAXIMUM, 6X, 5HRANKS, 3X, 16H95PCT CONF INT F,
     +   7HOR MEAN/)
 1080 FORMAT(1X, 1PE14.6, I8, E14.5, A1, E13.5, A1, E13.5, 2E14.5,
     +   0PF9.1, 1PE13.5, 3H TO, E12.5)
 1090 FORMAT(1X, 1PE14.6, I8, E14.5, A1, 3X, 23H ESTIMATE NOT AVAILABLE,
     +   ' ', 2E14.5, 0PF9.1, 3X, 25H********** TO ********** )
 1100 FORMAT(/11X, 5HTOTAL, I7, 1PE14.5, 28X, 2E14.5//
     +   17X, 20HFIXED EFFECTS MODEL , 2E14.5, 37X, E13.5, 3H TO, E12.5/
     +   17X, 7HRANDOM ,
     +   13HEFFECTS MODEL, 2E14.5, 37X, E13.5, 3H TO, E12.5/17X,
     +   14HUNGROUPED DATA, 6X, 2E14.5, 37X, E13.5, 3H TO, E12.5/)
 1110 FORMAT(1X, 50HPAIRWISE MULTIPLE COMPARISON OF MEANS.  THE MEANS ,
     +   59HARE PUT IN INCREASING ORDER IN GROUPS SEPARATED BY *****.  ,
     +   11HA MEAN IS  /44H ADJUDGED NON-SIGNIFICANTLY DIFFERENT FROM A,
     +   59HNY MEAN IN THE SAME GROUP AND SIGNIFICANTLY DIFFERENT AT TH,
     +   17HE .05 LEVEL FROM /38H ANY MEAN IN ANOTHER GROUP.  ***** ***,
     +   59H** INDICATES ADJACENT GROUPS HAVE NO COMMON MEAN.          ,
     +   23H                       )
 1120 FORMAT(/3X, 49HNEWMAN-KEULS TECHNIQUE, HARTLEY MODIFICATION. (AP,
     +   40HPROXIMATE IF GROUP NUMBERS ARE UNEQUAL.))
 1130 FORMAT(/3X, 18HSCHEFFE TECHNIQUE.)
 1140 FORMAT(3X, 9(1PE12.5, ','))
 1150 FORMAT(6X, 5H*****)
 1160 FORMAT(3X, 11H***** *****)
 1170 FORMAT(/36H TESTS FOR HOMOGENEITY OF VARIANCES./7X, 9HCOCHRANS ,
     +   35HC = MAX. VARIANCE/SUM(VARIANCES) = , F7.4, 6H, P = , F6.3,
     +   10H (APPROX.)/7X, 17HBARTLETT-BOX F = , F9.3, 6H, P = ,
     +   F6.3/7X, 38HMAXIMUM VARIANCE / MINIMUM VARIANCE = , F14.4)
 1180 FORMAT(7X, 50HAPPROX BETWEEN MEANS F-TEST IN PRESENCE OF HETEROG,
     +   20HENEOUS VARIANCE. F =, F8.3, 5H, P =, F6.3)
 1190 FORMAT(/35H MODEL II - COMPONENTS OF VARIANCE./7X, 10HESTIMATE O,
     +   20HF BETWEEN COMPONENT , 1PE14.6)
      END
