!AOV1MN
     subroutine aov1mn(y, tag, n, tvalue, tsize, tmean, tsd, nprt,&
     &   index, srank, gpmin, gpmax, b10, ranks, itemp, ng, nzw)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS SUBROUTINE COMPUTES A COMPREHENSIVE SET OF RESULTS FOR
!     ANALYSIS OF A ONE-WAY CLASSIFICATION WITH OPTIONAL PRINTED OUTPUT.
!     TAG VALUES CAN BE ANY VALUE WHERE ALL MEASUREMENTS WITH TAG
!     VALUES LESS THAN OR EQUAL TO ZERO ARE EXCLUDED FROM ANALYSIS.
!
!     ORIGINALLY WRITTEN FOR OMNITAB BY -
!       DAVID HOGBEN, STATISTICAL ENGINEERING DIVISION, NBS (10/25/69)
!
!     ADAPTED  BY -
!       JANET R. DONALDSON
!       STATISTICAL ENGINEERING DIVISION
!       NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  MAY 17, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   n,ng,nprt,nzw
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
    &   b10(*),gpmax(*),gpmin(*),ranks(*),srank(*),tag(*),tmean(*),&
     &   tsd(*),tsize(*),tvalue(*),y(*)
     integer&
     &   index(*),itemp(*)
!
!  LOCAL SCALARS
     real(kind=wp) ::&
    &   af,bf,bfrat,bfsig,bms,bss,c,cc,cfkw,df,dfrat,dfsig,dms,dss,f,&
    &   f1kw,f2kw,fmlc,fmuc,fnzw,fplm,fstat,g1,gm,gr,hstat,ibar,k0,&
    &   mf,mkw,q,ressq,rmlc,rmuc,rx,sbms,sc,sfrat,sfsig,sigkw,slbf,&
    &   slcc,smax,smin,sms,snc,sos,sqb,sqms,sqom,sqt,ssf,sss,stms,&
    &   sum,swms,t1,t2,t3,ties,tms,tss,u1,u2,umlc,umuc,v1,v2,vkw,vls,&
     &   wms,wss,ybmax,ybmin,ymax,ymin
     integer&
     &   i,iprt,isz,j,k,kk,kkk,l,m,m28,m3,m5,nn,nne1,nzpntr
     character&
     &   blank*1,high*1,isd*1,low*1,mean*1
!
!  LOCAL ARRAYS
     real(kind=wp) ::&
     &   stats(15)
!
!  EXTERNAL FUNCTIONS
!      REAL(KIND=WP) ::
!     +   CDFF,PPFF,PPFT,D1MACH
!      EXTERNAL CDFF,PPFF,PPFT,D1MACH
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL GENI,IPRINT,RANKO,SRTIR,SRTRI,SRTRRI
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,anint,int,log,max,min,nint,dble,sqrt
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: AF
!        A FOR F
!     REAL(KIND=WP) :: BF
!        BARTLETT F
!     REAL(KIND=WP) :: BFRAT
!        BETWEEN GROUPS F RATIO
!     REAL(KIND=WP) :: BFSIG
!        BETWEEN GROUPS SIGNIFICANCE LEVEL
!     CHARACTER*1 BLANK
!        HOLLERITH BLANK
!     REAL(KIND=WP) :: BMS
!        BETWEEN MS
!     REAL(KIND=WP) :: BSS
!        BETWEEN SS
!     REAL(KIND=WP) :: B10(NG)
!        *
!     REAL(KIND=WP) :: C
!        INTERMEDIATE RESULT STORAGE
!     REAL(KIND=WP) :: CC
!        COCHRANS C
!     REAL(KIND=WP) :: CFKW
!        CORRECTION FACTOR FOR KRUSKAL-WALLIS
!     REAL(KIND=WP) :: DF
!        D.F.
!     REAL(KIND=WP) :: DFRAT
!        DEVIATIONS ABOUT LINE F RATIO
!     REAL(KIND=WP) :: DFSIG
!        DEVIATIONS ABOUT LINE F SIGNIFICANCE LEVEL
!     REAL(KIND=WP) :: DMS
!        DEVIATIONS ABOUT LINE MS
!     REAL(KIND=WP) :: DSS
!        DEVIATIONS ABOUT LINE SS
!     REAL(KIND=WP) :: F
!        BETWEEN MEANS F-TEST
!     REAL(KIND=WP) :: FMLC
!        FIXED MODEL LOWER CONFIDENCE LIMIT FOR MEAN
!     REAL(KIND=WP) :: FMUC
!        FIXED MODEL UPPER CONFIDENCE LIMIT FOR MEAN
!     REAL(KIND=WP) :: FNZW
!        *
!     REAL(KIND=WP) :: FPLM
!        LARGEST SINGLE PRECISION MAGNITUDE OF MACHINE
!     REAL(KIND=WP) :: FSTAT
!        F STATISTIC ASSOCIATED WITH KRUSKAL-WALLIS H STATISTIC
!     REAL(KIND=WP) :: F1KW
!        F1 D.F. FOR KRUSKAL-WALLIS F
!     REAL(KIND=WP) :: F2KW
!        F2 D.F. FOR KRUSKAL-WALLIS F
!     REAL(KIND=WP) :: GM
!        GRAND MEAN, MEAN OF ALL OBSERVATIONS WITH POSITIVE
!        NON-ZERO TAGS
!     REAL(KIND=WP) :: GPMAX(NG)
!        THE VECTOR OF MAXIMUM OBSERVATIONS FOR EACH GROUP
!     REAL(KIND=WP) :: GPMIN(NG)
!        THE VECTOR OF MINIMUM OBSERVATIONS FOR EACH GROUP
!     REAL(KIND=WP) :: GR
!        NZW-NG
!     REAL(KIND=WP) :: G1
!        NG-1
!     CHARACTER*1 HIGH
!        HOLLERITH + (PLUS)
!     REAL(KIND=WP) :: HSTAT
!        KRUSKAL-WALLIS H STATISTIC, SEE BROWNLEE(1965), PAGE 256
!     INTEGER I
!        INDEX VARIABLE
!     REAL(KIND=WP) :: IBAR
!        I BAR, ((SUM OF I)/NZW), WHERE I=1,NZW
!     INTEGER INDEX(N)
!        PERMUTATION VECTOR FOR Y AND LATER FOR TMEAN
!     INTEGER IPRT
!        THE OUTPUT LOGICAL UNIT NUMBER
!     CHARACTER*1 ISD
!        CAN CONTAIN FOLLOWING CHARACTERS FOR PRINTING
!        +, -,  (BLANK)
!     INTEGER ISZ
!        INTEGER SIZE OF GROUP
!     INTEGER ITEMP(NZW)
!        TEMPORARY INDEX VECTOR USED IN COMPUTING RANKS
!     INTEGER J
!        AN INDEX VARIABLE
!     INTEGER K
!        INDEX VARIABLE
!     INTEGER KK
!        POINTER TO THE LARGEST OF THE GROUP MEANS
!     INTEGER KKK
!        POINTER TO THE SMALLEST OF THE GROUP MEANS
!     REAL(KIND=WP) :: K0
!        = NZW - (SNC/NZW)/ G1
!     INTEGER L
!        INDEX VARIABLE
!     CHARACTER*1 LOW
!        HOLLERITH - (MINUS)
!     INTEGER M
!        INDEX VARIABLE
!     CHARACTER*1 MEAN
!        CAN CONTAIN FOLLOWING CHARACTERS FOR PRINTING
!        +, -,  (BLANK)
!     REAL(KIND=WP) :: MF
!        M FOR F
!     REAL(KIND=WP) :: MKW
!        M FOR KRUSKAL-WALLIS MEAN
!     INTEGER M28
!        USED IN CREATING BACKWARD LOOP
!     INTEGER M3
!        NG - 2
!     INTEGER M5
!        NZW - 1
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS
!     INTEGER NG
!        THE NUMBER OF GROUPS OF DIFFERENT POSITIVE TAG VALUES
!     INTEGER NN
!        AID IN PRINTING VALUES
!     INTEGER NNE1
!        NUMBER OF GROUPS WITH SIZE NOT EQUAL TO ONE
!     INTEGER NPRT
!        THE VARAIBLE CONTROLLING AUTOMATIC PRINTOUT
!        IF NPRT = 0, PRINTOUT SUPPRESSED
!           OTHERWISE PRINTOUT PROVIDED
!     INTEGER NZPNTR
!        A POINTER TO THE FIRST NON-ZERO TAG IN THE SORTED TAG VECTOR
!     INTEGER NZW
!        THE NUMBER OF OBSERVATIONS WITH POSITIVE, NON-ZERO, TAG VALUES
!     REAL(KIND=WP) :: Q
!        SIGNIFICANCE LEVEL FROM F-DISTRIBUTION
!     REAL(KIND=WP) :: RANKS(NZW)
!        THE RANKS OF THE OBSERVATIONS WITH POSITIVE TAG VALUES
!     REAL(KIND=WP) :: RESSQ
!        RESIDUALS SQUARED
!     REAL(KIND=WP) :: RMLC
!        RANDOM MODEL LOWER CONFIDENCE LIMIT FOR MEAN
!     REAL(KIND=WP) :: RMUC
!        RANDOM MODEL UPPER CONFIDENCE LIMIT FOR MEAN
!     REAL(KIND=WP) :: RX
!        USED IN CALCULATING MANDEL APPROXIMATION
!     REAL(KIND=WP) :: SBMS
!        SQRT BETWEEN MS
!     REAL(KIND=WP) :: SC
!        SUM OF N(I) CUBED, WHERE N(I) IS THE SIZE OF GROUP I
!     REAL(KIND=WP) :: SFRAT
!        SLOPE F RATIO
!     REAL(KIND=WP) :: SFSIG
!        SLOPE F SIGNIFICANCE LEVEL
!     REAL(KIND=WP) :: SIGKW
!        SIGNIFICANCE LEVEL FOR KRUSKAL-WALLIS F (OR H)
!     REAL(KIND=WP) :: SLBF
!        SIGNIFICANCE LEVEL FOR BARLETT F
!     REAL(KIND=WP) :: SLCC
!        SIGNIFICANCE LEVEL FOR COCHRANS C
!     REAL(KIND=WP) :: SMAX
!        MAXIMUM OF S(I), WHERE S(I) IS THE STD. DEV. OF GROUP I
!     REAL(KIND=WP) :: SMIN
!        MINIMUM OF S(I)
!     REAL(KIND=WP) :: SMS
!        SLOPE MS
!     REAL(KIND=WP) :: SNC
!        SUM OF N(I) SQUARED
!     REAL(KIND=WP) :: SOS
!        SUM OF S(I) SQUARED
!     REAL(KIND=WP) :: SQB
!        SQRT BETWEEN MS / NZW
!     REAL(KIND=WP) :: SQMS
!        SQRT WITHIN MS / NZW
!     REAL(KIND=WP) :: SQOM
!        OMEGA HAT SQUARED
!     REAL(KIND=WP) :: SQT
!        SQRT TOTAL MS / NZW
!     REAL(KIND=WP) :: SRANK(NG)
!        THE SUM OF THE RANKS FOR THE OBSERVATIONS IN EACH GROUP
!     REAL(KIND=WP) :: SSF
!        S * SQRT(NG-1) * F
!     REAL(KIND=WP) :: SSS
!        SLOPE SS
!     REAL(KIND=WP) :: STATS(15)
!        VECTOR OF STATISTICS
!     REAL(KIND=WP) :: STMS
!        SQRT TOTAL MS
!     REAL(KIND=WP) :: SUM
!        INTERMIDIATE VALUE
!     REAL(KIND=WP) :: SWMS
!        SQRT WITHIN MS
!     REAL(KIND=WP) :: TAG(N)
!        VECTOR OF CLASSIFICATION VALUES - VALUES LESS THAN OR EQUAL
!        TO ZERO ARE IGNORED FOR ANALYSIS.  ON ENTERING TAG IS
!        SORTED SMALLEST TO LARGEST
!     REAL(KIND=WP) :: TIES
!        *
!     REAL(KIND=WP) :: TMEAN(NG)
!        THE MEAN OF EACH OF THE GROUPS
!     REAL(KIND=WP) :: TMS
!        TOTAL MS
!     REAL(KIND=WP) :: TSD(NG)
!        THE STANDARD DEVIATIONS OF EACH OF THE GROUPS (NOT THE
!        STANDARD DEVIATIONS OF THE MEANS)
!     REAL(KIND=WP) :: TSIZE(NG)
!        THE SIZE OF EACH OF THE DIFFERENT GROUPS
!     REAL(KIND=WP) :: TSS
!        TOTAL SS
!     REAL(KIND=WP) :: TVALUE(NG)
!        THE DIFFERENT POSITIVE (NON-ZERO) TAG VALUES ANALYZED, ORDERED
!        FROM SMALLEST TO LARGEST
!     REAL(KIND=WP) :: T1
!        T(.05,NG-1)
!     REAL(KIND=WP) :: T2
!        T(.05,NG-1)
!     REAL(KIND=WP) :: T3
!        T(.05,NZW-1)
!     REAL(KIND=WP) :: UMLC
!        UNGROUPED MODEL LOWER CONFIDENCE LIMIT FOR MEAN
!     REAL(KIND=WP) :: UMUC
!        UNGROUPED MODEL UPPER CONFIDENCE LIMIT FOR MEAN
!     REAL(KIND=WP) :: U1, U2
!        USED IN CALCULATING MANDEL APPROXIMATION
!     REAL(KIND=WP) :: VKW
!        U FOR KRUSKAL-WALLIS F
!     REAL(KIND=WP) :: VLS
!        LARGEST VARIANCE / SMALLEST VARIANCE
!     REAL(KIND=WP) :: V1, V2
!        USED IN CALCULATING MANDEL APPROXIMATION
!     REAL(KIND=WP) :: WMS
!        WITHIN MS
!     REAL(KIND=WP) :: WSS
!        WITHIN SS
!     REAL(KIND=WP) :: Y(N)
!        OBSERVATIONS TO BE ANALYZED, SORTED BY TAGS
!        Y(NZPNTR) IS THE FIRST ELEMENT WITH A NON-ZERO TAG
!     REAL(KIND=WP) :: YBMAX
!        MAXIMUM YBAR(I), WHERE YBAR(I) IS THE MEAN OF GROUP I
!     REAL(KIND=WP) :: YBMIN
!        MINIMUN YBAR(I)
!     REAL(KIND=WP) :: YMAX
!        MAXIMUM OBSERVATION
!     REAL(KIND=WP) :: YMIN
!        MINIMUM OBSERVATION
!
!     MACHINE DEPENDENT VARIABLE - FPLM
!
      data blank /' '/
      data low /'-'/
      data high /'+'/
!
      call iprint(iprt)
      fplm = d1mach(2)
      nzpntr = n - nzw + 1
      fnzw = nzw
!
!     ZERO WORK VECTORS
!
      do 10 i=1,ng
         tvalue(i) = 0.0_wp
         tsize(i) = 0.0_wp
         tmean(i) = 0.0_wp
         tsd(i) = 0.0_wp
         srank(i) = 0.0_wp
         gpmin(i) = 0.0_wp
         gpmax(i) = 0.0_wp
         b10(i) = 0.0_wp
   10 continue
!
      do 20 i=1,15
         stats(i) = 0.0_wp
   20 continue
!
      cc = 0.0_wp
      f = 0.0_wp
      dms = 0.0_wp
      bss = 0.0_wp
      wss = 0.0_wp
      hstat = 0.0_wp
      mf = 0.0_wp
      sc = 0.0_wp
      smax = 0.0_wp
      nne1 = 0
      snc = 0.0_wp
      sos = 0.0_wp
      sss = 0.0_wp
      sum = 0.0_wp
      ties = 0.0_wp
      tss = 0.0_wp
      smin = 0.0_wp
      sfrat = 0.0_wp
!
!     BEGIN COMPUTATIONS
!
!     COMPUTE RANKS
!
      call ranko(nzw, y(nzpntr), itemp, ranks, ties)
!
!     INITIALIZE FIRST ELEMENT BEFORE ENTERING LOOP
!
      tvalue(1) = tag(nzpntr)
      srank(1) = ranks(1)
      gpmin(1) = y(nzpntr)
      gpmax(1) = y(nzpntr)
      ymin = gpmin(1)
      ymax = gpmax(1)
      gm = y(nzpntr)
      ibar = 1.0_wp
      tmean(1) = y(nzpntr)
      tsize(1) = 1.0_wp
!
!     DETERMINE MEANS AND MAXS, DO SUMMATION PRIOR TO
!     DETERIMING MEANS
!     HERE J IS THE GROUP NUMBER
!
      j = 1
      l = nzpntr + 1
      do 50 i=l,n
         if (tag(i).eq.tag(i-1)) go to 40
!
!        NEW TAG GROUP
         j = j + 1
         tvalue(j) = tag(i)
         gpmin(j) = y(i)
         gpmax(j) = y(i)
   40    tsize(j) = tsize(j) + 1.0_wp
         tmean(j) = tmean(j) + y(i)
         gm = gm + y(i)
!
!     UNNECESSARY COMPUTATIONS IF PRINTED OUTPUT IS SUPRESSED
!
         if (nprt.eq.0) go to 50
         k = i + 1 - nzpntr
         srank(j) = srank(j) + ranks(k)
         gpmin(j) = min(gpmin(j),y(i))
         gpmax(j) = max(gpmax(j),y(i))
         ymin = min(ymin,gpmin(j))
         ymax = max(ymax,gpmax(j))
         ibar = ibar + j
   50 continue
!
!     CALCULATE MEANS
!
      gm = gm/fnzw
      ibar = ibar/fnzw
      k = nzpntr-1
      i = nzpntr
      do 70 j=1,ng
         if (tsize(j).ge.2.0_wp) then
            tmean(j) = tmean(j)/tsize(j)
         else
            tmean(j) = tmean(j)
         end if
         k = k + int(tsize(j))
!
!     L GIVES INDEX TO Y VALUE WITHIN GROUP J
!
         do 60 l=i,k
            ressq = (y(l)-tmean(j))*(y(l)-tmean(j))
            tsd(j) = tsd(j) + ressq
            if (nprt.eq.0) go to 60
            bss = bss + (tmean(j)-gm)*(tmean(j)-gm)
            wss = wss + ressq
            tss = tss + (y(l)-gm)*(y(l)-gm)
   60    continue
         i = k + 1
   70 continue
!
!     NOW DONE WITH TAG VECTOR, RETURN VECTOR TO INPUT ORDER
!     INDEX IS FREED FOR USE IN OTHER PLACES
!
      call srtrri(tag, y, n, index)
!
!     CHECK FOR PRINTED OUTPUT
!
      if (nprt.ne.0) go to 90
!
!     COMPUTE STANDARD DEVIATIONS WITHIN EACH GROUP
!
      do 80 j=1,ng
         tsd(j) = sqrt(tsd(j))
         if (tsize(j).le.1.0_wp) go to 80
         tsd(j) = tsd(j)/sqrt(tsize(j)-1.0_wp)
   80 continue
!
!     COMPUTATIONS COMPLETE FOR STORED OUTPUT - RETURN IF PRINTED
!     OUTPUT IS SUPRESSED
!
      return
   90 ybmin = tmean(1)
      ybmax = tmean(1)
      smin = fplm
!     HERE I IS THE GROUP NUMBER
      do 120 i=1,ng
         if (tsd(i).gt.0.0_wp) then
            b10(i) = tsize(i)*(tsize(i)-1.0_wp)/tsd(i)
            stats(1) = stats(1) + b10(i)*tmean(i)
            stats(2) = stats(2) + b10(i)
            if (tsize(i).gt.1.0_wp) then
               tsd(i) = sqrt(tsd(i)/(tsize(i)-1.0_wp))
            end if
            mf = mf + (tsize(i)-1.0_wp)*log(tsd(i)*tsd(i))
         end if
         if (nint(tsize(i)).ge.2) then
            nne1 = nne1 + 1
            smax = max(smax,tsd(i))
            smin = min(smin,tsd(i))
            stats(3) = stats(3) + 1.0_wp/(tsize(i)-1.0_wp)
         end if
         sss = sss + tsize(i)*(i-ibar)*(tmean(i)-gm)
         stats(4) = stats(4) + tsize(i)*(i-ibar)*(i-ibar)
!
!        LOOK FOR SMALLEST AND LARGEST MEANS (YBAR)
!
         ybmin = min(ybmin,tmean(i))
         ybmax = max(ybmax,tmean(i))
!
         hstat = hstat + srank(i)*srank(i)/tsize(i)
         sum = sum + 1.0_wp/tsize(i)
         stats(5) = stats(5) + (tmean(i)-gm)*(tmean(i)-gm)
         sos = sos + tsd(i)*tsd(i)
         snc = snc + tsize(i)*tsize(i)
         sc = sc + tsize(i)*tsize(i)*tsize(i)
  120 continue
      if (stats(2).ne.0.0_wp) stats(1) = stats(1)/stats(2)
      if (stats(4).ne.0.0_wp) sss = sss*sss/stats(4)
      dss = bss - sss
!
!     DEGREES OF FREEDOM FOR ANOVA
!
      g1 = ng-1
      m3 = ng - 2
      gr = nzw-ng
      m5 = nzw - 1
!
!     MEAN SQUARES
!
      bms = bss/g1
      sms = sss
      if (ng.ge.3) dms = dss/m3
      wms = wss/gr
      tms = tss/m5
      if (wms.eq.bms) then
         bfrat = 1.0_wp
         bfsig = 1.0_wp
      else if (wms.eq.0.0_wp) then
         bfrat = fplm
         bfsig = 0.0_wp
      else
         bfrat = bms/wms
         bfsig = 1.0_wp - cdff(bfrat,g1,gr)
      end if
      if (wms.eq.dms) then
         dfrat = 1.0_wp
         dfsig = 1.0_wp
      else if (wms.eq.0.0_wp) then
         dfrat = fplm
         dfsig = 0.0_wp
      else
         dfrat = dms/wms
         dfsig = 1.0_wp - cdff(dfrat,dble(m3),dble(nzw-2))
      end if
      if (sms.eq.dss+wss) then
         sfrat = 1.0_wp
         sfsig = 1.0_wp
      else if (dss+wss.eq.0.0_wp) then
         sfrat = fplm
         sfsig = 0.0_wp
      else
         sfrat = sms/((dss+wss)/(fnzw-2.0_wp))
         sfsig = 1.0_wp - cdff(sfrat,1.0_wp,gr)
      end if
!
!     COMPUTE FOR KRUSKAL-WALLIS TEST
!     FOR FORMULAE WITH CLEARER FORM AND NAMES SEE
!     KRAFT AND VAN EEDEN  A NON PARAMETRIC INTRODUCTION TO STATISTICS,
!     PP. 238 - 240
!
      stats(6) = nzw*(nzw+1)
      hstat = (12.0_wp*hstat/stats(6)) - (3.0_wp*(nzw+1))
      if (ties.eq.nzw*nzw*nzw-nzw) then
         cfkw = 0.0_wp
         hstat = 0.0_wp
         mkw = 0.0_wp
      else
         cfkw = 1.0_wp - ties/(nzw*nzw*nzw-nzw)
         hstat = hstat/cfkw
         mkw = ((nzw*nzw*nzw-sc)/stats(6))/cfkw
      end if
     vkw = 2.0_wp*g1 -&
    &   (0.4_wp*(3*ng*m3+nzw*(2*ng*(ng-3)+1)))/stats(6)&
     &   - 6.0_wp*sum/5.0_wp
     if (mkw-hstat.gt.0.0_wp .and.&
     &    mkw.ne.0.0_wp .and. vkw.ne.0.0_wp) then
         f1kw = (g1*(g1*(mkw-g1)-vkw))/(0.5_wp*vkw*mkw)
         f2kw = (mkw-g1)*f1kw/g1
         fstat = (hstat*(mkw-g1))/(g1*(mkw-hstat))
         sigkw = 1.0_wp - cdff(fstat,anint(f1kw),anint(f2kw))
      else
         sigkw = 0.0_wp
      end if
!
!     COMPUTE TOTAL STATISTICS
!
      swms = sqrt(wms)
      sbms = sqrt(stats(5)/g1)
      stms = sqrt(tms)
      sqms = swms/(sqrt(fnzw))
      sqb = sbms/(sqrt(dble(ng)))
      sqt = stms/(sqrt(fnzw))
      t1 = ppft(0.975_wp,int(gr))
      t2 = ppft(0.975_wp,int(g1))
      t3 = ppft(0.975_wp,m5)
      fmlc = gm - sqms*t1
      rmlc = gm - sqb*t2
      umlc = gm - sqt*t3
      fmuc = gm + sqms*t1
      rmuc = gm + sqb*t2
      umuc = gm + sqt*t3
!
      ssf = swms*sqrt(g1*ppff(0.95_wp,int(g1),int(gr)))
!
!     TESTS FOR HOMOGENEITY OF VARIANCES
!
      if (smax*smax.eq.sos) then
         cc = 1.0_wp
      else if (sos.ne.0.0_wp) then
         cc = smax*smax/sos
      end if
      stats(7) = anint(fnzw/ng)
      if ((nne1.ge.2) .and. (cc.ne.1.0_wp)) then
        slcc = 1.0_wp -&
    &          cdff((nne1-1)*cc/(1.0_wp-cc),stats(7),&
     &          stats(7)*(nne1-1))
      else
         slcc = 1.0_wp
      end if
      slcc = (nne1-1)*slcc
      if (slcc.gt.1.0_wp) slcc = 1.0_wp
!
      if (smin.eq.smax) then
         vls = 1.0_wp
      else
         if (smin.eq.0.0_wp) then
            vls = fplm
         else
            vls = (smax/smin)*(smax/smin)
         end if
      end if
      if (wms.gt.0.0_wp) mf = gr*log(wms) - mf
      af = (stats(3)-(1.0_wp/gr))/(3.0_wp*g1)
      slbf = 1.0_wp
      if ((af.ne.1.0_wp) .and. (nne1.ge.2)) then
         df = (nne1+1)/(af*af)
         bf = (df*mf)/((nne1-1)*(df/(1.0_wp-af+(2.0_wp/df))-mf))
         if (bf.lt.0.0_wp) bf = 0.0_wp
         slbf = 1.0_wp - cdff(bf,dble(nne1-1),anint(df))
      else
         bf = fplm
      end if
      k0 = (fnzw-(snc/fnzw))/g1
      sqom = (bms-wms)/k0
!
!     COMPUTATIONS ARE NOW COMPLETE ************************************
!
!     PRINT ANOVA
!
      nn = n - nzw
      write (iprt,1000) nn
      nn = ng - 1
      write (iprt,1010) nn, bss, bms, bfrat, bfsig
      if (ng.lt.3) go to 180
      if (bfsig.ge..10) go to 180
      nn = 1
      write (iprt,1020) nn, sss, sms, sfrat, sfsig
      write (iprt,1030) m3, dss, dms, dfrat, dfsig
  180 nn = nzw - ng
      write (iprt,1040) nn, wss, wms
      write (iprt,1050) m5, tss
!
!     PRINT KRUSKAL-WALLIS TEST
!
      write (iprt,1060) hstat, sigkw
!
!     PRINT ESTIMATES
!
      write (iprt,1070)
      do 200 i=1,ng
         mean = blank
         if (tmean(i).le.ybmin) mean = low
         if (tmean(i).ge.ybmax) mean = high
         isd = blank
         if (tsd(i).le.smin) isd = low
         if (tsd(i).ge.smax) isd = high
         isz = int(tsize(i))
         if (isz.le.1) then
           write (iprt,1090) tvalue(i), isz, tmean(i), mean, gpmin(i),&
     &         gpmax(i), srank(i)
         else
            stats(9) = tsd(i)/sqrt(tsize(i))
            stats(10) = ppft(0.975_wp,isz-1)
            stats(8) = tmean(i) - stats(9)*stats(10)
            stats(11) = tmean(i) + stats(9)*stats(10)
           write (iprt,1080) tvalue(i), isz, tmean(i), mean, tsd(i),&
    &                        isd, stats(9), gpmin(i), gpmax(i),&
     &                        srank(i), stats(8), stats(11)
         end if
  200 continue
     write (iprt,1100) nzw, gm, ymin, ymax, swms, sqms, fmlc, fmuc,&
     &   sbms, sqb, rmlc, rmuc, stms, sqt, umlc, umuc
      if (bfsig.lt.0.10) then
!
!     SORT YBAR FOR MULTIPLE COMPARISIONS OF MEANS
!
         call geni(index, ng, 1, 1)
         call srtir(index, ng, tmean)
!
!     COMPUTE AND PRINT FOR MULTIPLE COMPARISIONS
!
         if (nzw-ng.lt.4) go to 270
         write (iprt,1110)
!
!     NEWMAN-KEULS-HARTLEY
!
         write (iprt,1120)
        rx = -.283917_wp +&
     &   2.63532_wp*(gr-1.00123_wp)**(-.95862_wp)
        u1 = -.314115_wp +&
     &   2.38301_wp*(gr-1.03428_wp)**(-.864005_wp)
         u2 = 3.65961_wp*u1**2 - 1.00891_wp*u1 - 0.166346_wp
         j = 1
         m28 = 0
  210    i = ng
  220    if (i.le.m28) go to 260
         if (i.eq.j) go to 230
         stats(14) = abs(tmean(i)-tmean(j))
!
!     MANDEL APPROXIMATION TO PERCENT POINT OF STUDENTIZED RANGE
!
         stats(12) = i-j+1
        c = 2.3849867_wp -&
    &       2.9051857_wp*(stats(12)-&
     &       0.57583164_wp)**(-.069648109_wp)
        v1 = 1.30153_wp -&
     &        1.95073_wp*(stats(12)+.394915_wp)**(-.139783_wp)
         v2 = 4.72863_wp*v1**2 + 0.404271_wp*v1 - 0.135104_wp
        stats(13) = 6.15075_wp + 4.441409_wp*rx +&
    &               6.7514569_wp*c + 7.4671282_wp*u1*v1 -&
     &               0.157537_wp*u2*v2
         kk = index(i)
         kkk = index(j)
        stats(13) = stats(13)*&
    &            sqrt(0.5_wp*((1.0_wp/tsize(kk))+(1.0_wp/tsize(kkk))))*&
     &            swms
         if (stats(14).le.stats(13)) go to 230
         i = i - 1
         go to 220
  230    if (j.eq.1) go to 250
         if (j.gt.m28) go to 240
         write (iprt,1150)
         go to 250
  240    write (iprt,1160)
  250    write (iprt,1140) (tmean(m),m=j,i)
         if (i.ge.ng) go to 270
         m28 = i
  260    j = j + 1
         go to 210
!
!     SCHEFFE METHOD
!
  270    write (iprt,1130)
         j = 1
         m28 = 0
  280    i = ng
  290    if (i.le.m28) go to 330
         if (i.eq.j) go to 300
         kk = index(i)
         kkk = index(j)
         stats(14) = abs(tmean(i)-tmean(j))
         stats(13) = ssf*sqrt((1.0_wp/tsize(kk))+(1./tsize(kkk)))
         if (stats(14)-stats(13).le.0.0_wp) go to 300
         i = i - 1
         go to 290
  300    if (j.eq.1) go to 320
         if (j.gt.m28) go to 310
         write (iprt,1150)
         go to 320
  310    write (iprt,1160)
  320    write (iprt,1140) (tmean(m),m=j,i)
         if (i.ge.ng) go to 340
         m28 = i
  330    j = j + 1
         go to 280
!
!     RETURN TAG MEANS TO ORIGINAL ORDER
!
  340    call srtri(tmean, ng, index)
      end if
!
      if (nne1.le.1) return
      write (iprt,1170) cc, slcc, bf, slbf, vls
      if (slcc.gt.0.1_wp .and. slbf.gt.0.1_wp) go to 390
      do 360 i=1,ng
         f = f + b10(i)*(tmean(i)-stats(1))*(tmean(i)-stats(1))
         if (stats(2).eq.0.0_wp .or. tsize(i).le.1.0_wp) go to 360
        stats(15) = stats(15) +&
    &               (1.0_wp-b10(i)*b10(i)/stats(2)/stats(2))/&
     &               (tsize(i)-1.0_wp)
  360 continue
      if (stats(15).eq.0.0_wp) go to 370
      stats(15) = (ng*ng-1.0_wp)/(3.0_wp*stats(15))
      if (ng.le.1) go to 370
      f = (f/g1)/(1.0_wp+(2.0_wp*m3/(3.0_wp*stats(15))))
      go to 380
  370 f = 0.0_wp
  380 q = 1.0_wp - cdff(f,g1,anint(stats(15)))
      write (iprt,1180) f, q
  390 write (iprt,1190) sqom
      return
!
!     AUTOMATIC PRINTOUT IS FINISHED
!
!     FORMAT STATEMENTS
!
1000 format(54h *group numbers have been assigned according to tag va,&
    &   59hlues given, where the smallest tag greater than zero has be,&
    &   14hen assigned  */41h *group number 1, the next smallest, grou,&
    &   59hp number 2, etc.  tags less than or equal to zero have not ,&
    &   27hbeen included in analysis.*/28h *number of values excluded ,&
    &   17hfrom analysis is , i4, 77x, 1h*//17x, 6hsource, 14x, 4hd.f.,&
    &   4x, 14hsum of squares, 5x, 12hmean squares, 9x, 7hf ratio, 4x,&
     &   7hf prob./)
1010 format(17x, 14hbetween groups, 5x, i4, 1p2e18.6, 4x, 0pe11.3,&
     &   f10.3)
 1020 format(20x, 5hslope, 14x, i4, 1p2e18.6, 3x, 0pe11.3, f10.3)
1030 format(20x, 16hdevs. about line, 3x, i4, 1p2e18.6, 3x, 0pe11.3,&
     &   f10.3)
 1040 format(17x, 13hwithin groups, 6x, i4, 1p2e18.6)
 1050 format(17x, 5htotal, 14x, i4, 1pe18.6//)
1060 format(11x, 49hkruskal-wallis rank test for difference between g,&
    &   16hroup means * h =, e11.3, 10h, f prob =, f6.3, 10h (approx.)&
     &   /)
1070 format(55x, 9hestimates/96x, 6hsum of/5x, 5h tag , 10x, 3hno.,&
    &   6x, 4hmean, 7x, 11hwithin s.d., 2x, 12hs.d. of mean, 5x,&
    &   7hminimum, 7x, 7hmaximum, 6x, 5hranks, 3x, 16h95pct conf int f,&
     &   7hor mean/)
1080 format(1x, 1pe14.6, i8, e14.5, a1, e13.5, a1, e13.5, 2e14.5,&
     &   0pf9.1, 1pe13.5, 3h to, e12.5)
1090 format(1x, 1pe14.6, i8, e14.5, a1, 3x, 23h estimate not available,&
     &   ' ', 2e14.5, 0pf9.1, 3x, 25h********** to ********** )
1100 format(/11x, 5htotal, i7, 1pe14.5, 28x, 2e14.5//&
    &   17x, 20hfixed effects model , 2e14.5, 37x, e13.5, 3h to, e12.5/&
    &   17x, 7hrandom ,&
    &   13heffects model, 2e14.5, 37x, e13.5, 3h to, e12.5/17x,&
     &   14hungrouped data, 6x, 2e14.5, 37x, e13.5, 3h to, e12.5/)
1110 format(1x, 50hpairwise multiple comparison of means.  the means ,&
    &   59hare put in increasing order in groups separated by *****.  ,&
    &   11ha mean is  /44h adjudged non-significantly different from a,&
    &   59hny mean in the same group and significantly different at th,&
    &   17he .05 level from /38h any mean in another group.  ***** ***,&
    &   59h** indicates adjacent groups have no common mean.          ,&
     &   23h                       )
1120 format(/3x, 49hnewman-keuls technique, hartley modification. (ap,&
     &   40hproximate if group numbers are unequal.))
 1130 format(/3x, 18hscheffe technique.)
 1140 format(3x, 9(1pe12.5, ','))
 1150 format(6x, 5h*****)
 1160 format(3x, 11h***** *****)
1170 format(/36h tests for homogeneity of variances./7x, 9hcochrans ,&
    &   35hc = max. variance/sum(variances) = , f7.4, 6h, p = , f6.3,&
    &   10h (approx.)/7x, 17hbartlett-box f = , f9.3, 6h, p = ,&
     &   f6.3/7x, 38hmaximum variance / minimum variance = , f14.4)
1180 format(7x, 50happrox between means f-test in presence of heterog,&
     &   20heneous variance. f =, f8.3, 5h, p =, f6.3)
1190 format(/35h model ii - components of variance./7x, 10hestimate o,&
     &   20hf between component , 1pe14.6)
      end
