!STPADJ
     subroutine stpadj(xm, n, m, ixm, mdl, par, npar,&
    &   nexmpt, stp, nfail, ifail, j, reltol, abstol, stplow, stpmid,&
     &   stpup, itemp, fd, fdlast, pv, pvnew)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS SUBROUTINE ADJUSTS THE SELECTED STEP SIZES TO OPTIMAL
!     VALUES.
!
!     WRITTEN BY  -  ROBERT B. SCHNABEL (CODED BY JANET R. DONALDSON)
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  APRIL 2, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   abstol,reltol,stp,stplow,stpmid,stpup
     integer&
     &   ixm,j,m,n,nexmpt,nfail,npar
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   fd(n),fdlast(n),par(npar),pv(n),pvnew(n),xm(ixm,m)
     integer&
     &   ifail(n),itemp(n)
!
!  SUBROUTINE ARGUMENTS
       external mdl
!
!  SCALARS IN COMMON
     real(kind=wp) ::&
     &   q
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   factor,stpnew,temp
     integer&
     &   ncount
     logical&
     &   done,first
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL CMPFD,ICOPY,RELCOM,DCOPY
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,sign
!
!  COMMON BLOCKS
      common /notopt/q
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: ABSTOL
!        THE ABSOLUTE AGREEMENT TOLERANCE.
!     LOGICAL DONE
!        THE VARIABLE USED TO INDICATE WHETHER THE ADJUSTMENT
!        PROCESS IS COMPLETE OR NOT.
!     REAL(KIND=WP) :: FACTOR
!        A FACTOR USED IN COMPUTING THE STEP SIZE.
!     REAL(KIND=WP) :: FD(N)
!        THE FORWARD DIFFERENCE QUOTIENT APPROXIMATION TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER
!     REAL(KIND=WP) :: FDLAST(N)
!        THE FORWARD DIFFERENCE QUOTIENT APPROXIMATION TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER
!        COMPUTED WITH THE MOST RECENT STEP SIZE SELECTED.
!     LOGICAL FIRST
!        THE VARIABLE USED TO INDICATE WHETHER THIS STEP SIZE
!        IS BEING USED FOR THE FIRST TIME OR WHETHER IT HAS BEEN
!        PREVIOUSLY ADJUSTED.
!     INTEGER IFAIL(N)
!        AN INDICATOR VECTOR USED TO DESIGNATE THOSE OBSERVATIONS
!        FOR WHICH THE STEP SIZE DOES NOT MEET THE CRITERIA.
!     INTEGER ITEMP(N)
!        A TEMPORARY VECTOR USED FOR STORING PAST VALUES OF ITEMP.
!     INTEGER IXM
!        THE FIRST DIMENSION OF THE INDEPENDENT VARIABLE ARRAY.
!     INTEGER J
!        THE INDEX OF THE PARAMETER BEING EXAMINED.
!     INTEGER M
!        THE NUMBER OF INDEPENDENT VARIABLES.
!     EXTERNAL MDL
!        THE NAME OF THE USER SUPPLIED SUBROUTINE WHICH COMPUTES THE
!        PREDICTED VALUES BASED ON THE CURRENT PARAMETER ESTIMATES.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NPAR
!        THE NUMBER OF UNKNOWN PARAMETERS IN THE MODEL.
!     INTEGER NCOUNT
!        THE NUMBER OF OBSERVATIONS AT WHICH THE NEW STEP SIZE DOES
!        SATISFY THE CRITERIA.
!     INTEGER NEXMPT
!        THE NUMBER OF OBSERVATIONS FOR WHICH A GIVEN STEP SIZE
!        DOES NOT HAVE TO BE SATISFACTORY AND THE SELECTED STEP
!        SIZE STILL BE CONSIDERED OK.
!     INTEGER NFAIL
!        A VECTOR CONTAINING FOR EACH OBSERVATION THE NUMBER OF
!        OBSERVATIONS FOR WHICH THE STEP SIZE DID NOT MEET THE CRITERIA.
!     REAL(KIND=WP) :: PAR(NPAR)
!        THE ARRAY IN WHICH THE CURRENT ESTIMATES OF THE UNKNOWN
!        PARAMETERS ARE STORED.
!     REAL(KIND=WP) :: PV(N)
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!     REAL(KIND=WP) :: PVNEW(N)
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J)+STPCD.
!     REAL(KIND=WP) :: Q
!        A DUMMY VARIABLE WHICH IS USED, ALONG WITH COMMON NOTOPT (NO
!        OPTIMIZATION), TO COMPUTE THE STEP SIZE.
!     REAL(KIND=WP) :: RELTOL
!        THE RELATIVE AGREEMENT TOLERANCE.
!     REAL(KIND=WP) :: STP
!        THE STEP SIZE CURRENTLY BEING EXAMINED FOR THE FORWARD
!        DIFFERENCE APPROXIMATION TO THE DERIVATIVE.
!     REAL(KIND=WP) :: STPLOW
!        THE LOWER LIMIT ON THE STEP SIZE.
!     REAL(KIND=WP) :: STPMID
!        THE MIDPOINT OF THE ACCEPTABLE RANGE OF THE STEP SIZE.
!     REAL(KIND=WP) :: STPNEW
!        THE VALUE OF THE NEW STEP SIZE BEING TESTED.
!     REAL(KIND=WP) :: STPUP
!        THE UPPER LIMIT ON THE STEP SIZE.
!     REAL(KIND=WP) :: TEMP
!        A TEMPORARY LOCATION IN WHICH THE CURRENT ESTIMATE OF THE JTH
!        PARAMETER IS STORED.
!     REAL(KIND=WP) :: XM(IXM,M)
!        THE ARRAY IN WHICH ONE ROW OF THE INDEPENDENT VARIABLE ARRAY
!        IS STORED.
!
      call icopy(n, ifail, 1, itemp, 1)
      ncount = nfail
!
      if ((stplow.le.abs(stp)) .and. (abs(stp).le.stpup)) return
!
      if (abs(stp).gt.stpmid) then
!
            stpnew = stpup * sign(1.0_wp, par(j))
            factor = 10.0_wp
      else
!
            stpnew = stplow * sign(1.0_wp, par(j))
            factor = 0.1_wp
!
      end if
!
      q = stpnew + par(j)
      stpnew = q - par(j)
!
      done = .false.
      first = .true.
!
!     REPEAT STATEMENTS 60 TO 130 UNTIL (DONE)
!
   60 continue
!
         call dcopy(n, fd, 1, fdlast, 1)
!
         temp = par(j)
         par(j) = temp + stpnew
         call mdl(par, npar, xm, n, m, ixm, pvnew)
         par(j) = temp
!
         call cmpfd(n, stpnew, pvnew, pv, fd)
!
         call relcom(n, fd, fdlast, reltol, abstol, ncount, itemp)
!
         if (ncount.le.nexmpt) then
               done = .true.
               call icopy(n, itemp, 1, ifail, 1)
               nfail = ncount
!
               if (first) then
                     stp = stpnew
               else
                     stp = stpnew / factor
               end if
!
         else
!
               first = .false.
               stpnew = stpnew * factor
               q = stpnew + par(j)
               stpnew = q - par(j)
!
              if ((factor.gt.1.0_wp .and. abs(stpnew).gt.abs(stp))&
    &            .or.&
    &            (factor.lt.1.0_wp .and. abs(stpnew).lt.abs(stp)))&
     &            done = .true.
          end if
!
      if (done) then
         return
      else
         go to 60
      end if
!
      end
