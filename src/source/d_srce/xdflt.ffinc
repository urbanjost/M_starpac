!XDFLT
      subroutine xdflt(lds,typ)
      real(kind=wp),intent(in) :: typ
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     ROUTINE TO TEST THE TIME SERIES DIGITAL FILTERING AND
!     COMPLEX DEMODULATION ROUTINES.
!
!     SERIES Y IS THE WOLF SUNSPOT DATA FROM 1700 TO 1960 AS
!     TABULATED BY WALDMEIER
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DEVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  NOVEMBER 26, 1980
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   lds
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  ARRAYS IN COMMON
      real(kind=wp) :: dstak(12)
!
!  LOCAL SCALARS
      real(kind=wp) :: fc,fmax,fmin,yfmiss,ymiss
     integer&
     &   i,iar,iprt,itest,k,ldstak,lphi,n,nf,nfac,nprt,nyf,nys
!
!  LOCAL ARRAYS
     real(kind=wp) ::&
    &   freq(101),gain(101),hhp(50),hlp(50),phas(300),phi(50),y(300),&
     &   yf(300),ys(300)
     integer&
     &   iod(10),nd(10)
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL ARFLT,DIF,DIFC,DIFM,DIFMC,GFARF,GFARFS,GFSLF,GFSLFS,
!     +   HIPASS,HPCOEF,IPRINT,LOPASS,LPCOEF,MAFLT,SAMPLE,SLFLT
!
!  COMMON BLOCKS
      common /cstak/dstak
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: DSTAK(12)
!        THE DOUBLE PRECISION VERSION OF THE /CSTAK/ WORK AREA.
!     REAL(KIND=WP) :: FC
!        THE CUTOFF FREQUENCY USED FOR THE LOW PASS FILTER.
!     REAL(KIND=WP) :: FMAX, FMIN
!        THE MINIMUM AND MAXIMUM FREQUENCY FOR WHICH THE GAIN
!        FUNCTION IS TO BE ESTIMATED.
!     REAL(KIND=WP) :: FREQ(101)
!        THE VECTOR OF FREQUENCIES AT WHICH THE GAIN FUNCTION
!        HAS BEEN ESTIMATED.
!     REAL(KIND=WP) :: GAIN(101)
!        THE VECTOR IN WHICH THE GAIN FUNCTION ESTIMATES ARE
!        STORED.
!     REAL(KIND=WP) :: HHP(50)
!        THE ARRAY IN WHICH THE -IDEAL- HIGH PASS FILTER COEFFICIENTS
!        WILL BE RETURNED.
!     REAL(KIND=WP) :: HLP(50)
!        THE ARRAY IN WHICH THE INPUT LOW PASS FILTER COEFFICIENTS
!        ARE STORED.
!     INTEGER I
!        AN INDEXING VARIABLE.
!     INTEGER IAR
!        THE NUMBER OF FILTER COEFFICIENTS.
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST.
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED.
!        IF IERR .EQ. 1, ERRORS HAVE BEEN DETECTED.
!     INTEGER IOD(10)
!        THE ORDER OF EACH OF THE DIFFERENCE FACTORS.
!     INTEGER IPRT
!        THE UNIT NUMBER USED FOR OUTPUT.
!     INTEGER ITEST
!        THE NUMBER OF THE TEST BEING PERFORMED
!     INTEGER K
!        THE NUMBER OF TERMS IN THE SYMETRIC LINEAR FILTER.
!     INTEGER LDS, LDSTAK
!        THE LENGTH OF THE ARRAY DSTAK.
!     INTEGER LPHI
!        THE LENGTH OF THE VECTOR PHI.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS IN THE INPUT SERIES.
!     INTEGER ND(10)
!        THE ARRAY CONTAINING THE NUMBER OF TIMES THE DIFFERENCE
!        FACTORS ARE TO BE APPLIED.
!     INTEGER NFAC
!        THE NUMBER OF DIFFERENCE FACTORS.
!     INTEGER NF
!        THE NUMBER OF FREQUENCIES AT WHICH THE GAIN FUNCTION
!        IS TO BE ESTIMATED.
!     INTEGER NPRT
!        A CODE USED TO SPECIFY THE TYPE OF PLOT, WHERE IF
!        NPRT = 0 THE PLOT IS SUPPRESSED
!        NPRT = 1 THE PLOT IS DECIBELS/LINEAR
!        NPRT = 2 THE PLOT IS LOG/LINEAR
!     INTEGER NYF
!        THE NUMBER OF VALUES IN THE FILTERED SERIES.
!     INTEGER NYS
!        THE NUMBER OF VALUES IN THE SAMPLED SERIES.
!     REAL(KIND=WP) :: PHAS(300)
!        THE ARRAY IN WHICH THE PRIMARY PHASE ESTIMATES ARE RETURNED.
!     REAL(KIND=WP) :: PHI(50)
!        THE VECTOR CONTAINING THE FILTER COEFFICIENTS.
!     REAL(KIND=WP) :: Y(300)
!        THE VECTOR CONTAINING THE OBSERVED TIME SERIES.
!     REAL(KIND=WP) :: YF(300)
!        THE VECTOR IN WHICH THE FILTERED SERIES IS RETURNED.
!     REAL(KIND=WP) :: YFMISS
!        THE MISSING VALUE CODE USED IN THE FILTERED SERIES.
!     REAL(KIND=WP) :: YMISS
!        THE MISSING VALUE CODE USED IN THE INPUT TIME SERIES.
!     REAL(KIND=WP) :: YS(300)
!        THE ARRAY CONTAINING THE SAMPLED SERIES.
!
     data   y(  1),  y(  2),  y(  3),  y(  4),  y(  5),  y(  6)&
     &    /     5.0_wp, 11.0_wp, 16.0_wp, 23.0_wp, 36.0_wp, 58.0_wp/
     data   y(  7),  y(  8),  y(  9),  y( 10),  y( 11),  y( 12)&
     &    /    29.0_wp, 20.0_wp, 10.0_wp,  8.0_wp,  3.0_wp,  0.0_wp/
     data   y( 13),  y( 14),  y( 15),  y( 16),  y( 17),  y( 18)&
     &    /     0.0_wp, 2.0_wp, 11.0_wp, 27.0_wp, 47.0_wp, 63.0_wp/
     data   y( 19),  y( 20),  y( 21),  y( 22),  y( 23),  y( 24)&
     &    /    60.0_wp, 39.0_wp, 28.0_wp, 26.0_wp, 22.0_wp, 11.0_wp/
     data   y( 25),  y( 26),  y( 27),  y( 28),  y( 29),  y( 30)&
     &    /    21.0_wp, 40.0_wp, 78.0_wp,122.0_wp,103.0_wp, 73.0_wp/
     data   y( 31),  y( 32),  y( 33),  y( 34),  y( 35),  y( 36)&
     &    /    47.0_wp, 35.0_wp, 11.0_wp,  5.0_wp, 16.0_wp, 34.0_wp/
     data   y( 37),  y( 38),  y( 39),  y( 40),  y( 41),  y( 42)&
     &    /    70.0_wp, 81.0_wp,111.0_wp,101.0_wp, 73.0_wp, 40.0_wp/
     data   y( 43),  y( 44),  y( 45),  y( 46),  y( 47),  y( 48)&
     &    /    20.0_wp, 16.0_wp,  5.0_wp, 11.0_wp, 22.0_wp, 40.0_wp/
     data   y( 49),  y( 50),  y( 51),  y( 52),  y( 53),  y( 54)&
     &    /    60.0_wp, 80.9_wp, 83.4_wp, 47.7_wp, 47.8_wp, 30.7_wp/
     data   y( 55),  y( 56),  y( 57),  y( 58),  y( 59),  y( 60)&
     &    /    12.2_wp,  9.6_wp, 10.2_wp, 32.4_wp, 47.6_wp, 54.0_wp/
     data   y( 61),  y( 62),  y( 63),  y( 64),  y( 65),  y( 66)&
     &    /    62.9_wp, 85.9_wp, 61.2_wp, 45.1_wp, 36.4_wp, 20.9_wp/
     data   y( 67),  y( 68),  y( 69),  y( 70),  y( 71),  y( 72)&
     &    /    11.4_wp, 37.8_wp, 69.8_wp,106.1_wp,100.8_wp, 81.6_wp/
     data   y( 73),  y( 74),  y( 75),  y( 76),  y( 77),  y( 78)&
     &    /    66.5_wp, 34.8_wp, 30.6_wp,  7.0_wp, 19.8_wp, 92.5_wp/
     data   y( 79),  y( 80),  y( 81),  y( 82),  y( 83),  y( 84)&
     &    /   154.4_wp,125.9_wp, 84.8_wp, 68.1_wp, 38.5_wp, 22.8_wp/
     data   y( 85),  y( 86),  y( 87),  y( 88),  y( 89),  y( 90)&
     &    /    10.2_wp, 24.1_wp, 82.9_wp,132.0_wp,130.9_wp,118.1_wp/
     data   y( 91),  y( 92),  y( 93),  y( 94),  y( 95),  y( 96)&
     &    /    89.9_wp, 66.6_wp, 60.0_wp, 46.9_wp, 41.0_wp, 21.3_wp/
     data   y( 97),  y( 98),  y( 99),  y(100),  y(101),  y(102)&
     &    /    16.0_wp,  6.4_wp,  4.1_wp,  6.8_wp, 14.5_wp, 34.0_wp/
     data   y(103),  y(104),  y(105),  y(106),  y(107),  y(108)&
     &    /    45.0_wp, 43.1_wp, 47.5_wp, 42.2_wp, 28.1_wp, 10.1_wp/
     data   y(109),  y(110),  y(111),  y(112),  y(113),  y(114)&
     &    /     8.1_wp,  2.5_wp,  0.0_wp,  1.4_wp,  5.0_wp, 12.2_wp/
     data   y(115),  y(116),  y(117),  y(118),  y(119),  y(120)&
     &    /    13.9_wp, 35.4_wp, 45.8_wp, 41.1_wp, 30.1_wp, 23.9_wp/
     data   y(121),  y(122),  y(123),  y(124),  y(125),  y(126)&
     &    /    15.6_wp,  6.6_wp,  4.0_wp,  1.8_wp,  8.5_wp, 16.6_wp/
     data   y(127),  y(128),  y(129),  y(130),  y(131),  y(132)&
     &    /    36.3_wp, 49.6_wp, 64.2_wp, 67.0_wp, 70.9_wp, 47.8_wp/
     data   y(133),  y(134),  y(135),  y(136),  y(137),  y(138)&
     &    /    27.5_wp,  8.5_wp, 13.2_wp, 56.9_wp,121.5_wp,138.3_wp/
     data   y(139),  y(140),  y(141),  y(142),  y(143),  y(144)&
     &    /   103.2_wp, 85.7_wp, 64.6_wp, 36.7_wp, 24.2_wp, 10.7_wp/
     data   y(145),  y(146),  y(147),  y(148),  y(149),  y(150)&
     &    /    15.0_wp, 40.1_wp, 61.5_wp, 98.5_wp,124.7_wp, 96.3_wp/
     data   y(151),  y(152),  y(153),  y(154),  y(155),  y(156)&
     &    /    66.6_wp, 64.5_wp, 54.1_wp, 39.0_wp, 20.6_wp,  6.7_wp/
     data   y(157),  y(158),  y(159),  y(160),  y(161),  y(162)&
     &    /     4.3_wp, 22.7_wp, 54.8_wp, 93.8_wp, 95.8_wp, 77.2_wp/
     data   y(163),  y(164),  y(165),  y(166),  y(167),  y(168)&
     &    /    59.1_wp, 44.0_wp, 47.0_wp, 30.5_wp, 16.3_wp,  7.3_wp/
     data   y(169),  y(170),  y(171),  y(172),  y(173),  y(174)&
     &    /    37.6_wp, 74.0_wp,139.0_wp,111.2_wp,101.6_wp, 66.2_wp/
     data   y(175),  y(176),  y(177),  y(178),  y(179),  y(180)&
     &    /    44.7_wp, 17.0_wp, 11.3_wp, 12.4_wp,  3.4_wp,  6.0_wp/
     data   y(181),  y(182),  y(183),  y(184),  y(185),  y(186)&
     &    /    32.3_wp, 54.3_wp, 59.7_wp, 63.7_wp, 63.5_wp, 52.2_wp/
     data   y(187),  y(188),  y(189),  y(190),  y(191),  y(192)&
     &    /    25.4_wp, 13.1_wp,  6.8_wp,  6.3_wp,  7.1_wp, 35.6_wp/
     data   y(193),  y(194),  y(195),  y(196),  y(197),  y(198)&
     &    /    73.0_wp, 85.1_wp, 78.0_wp, 64.0_wp, 41.8_wp, 26.2_wp/
     data   y(199),  y(200),  y(201),  y(202),  y(203),  y(204)&
     &    /    26.7_wp, 12.1_wp,  9.5_wp,  2.7_wp,  5.0_wp, 24.4_wp/
     data   y(205),  y(206),  y(207),  y(208),  y(209),  y(210)&
     &    /    42.0_wp, 63.5_wp, 53.8_wp, 62.0_wp, 48.5_wp, 43.9_wp/
     data   y(211),  y(212),  y(213),  y(214),  y(215),  y(216)&
     &    /    18.6_wp,  5.7_wp,  3.6_wp,  1.4_wp,  9.6_wp, 47.4_wp/
     data   y(217),  y(218),  y(219),  y(220),  y(221),  y(222)&
     &    /    57.1_wp,103.9_wp, 80.6_wp, 63.6_wp, 37.6_wp, 26.1_wp/
     data   y(223),  y(224),  y(225),  y(226),  y(227),  y(228)&
     &    /    14.2_wp,  5.8_wp, 16.7_wp, 44.3_wp, 63.9_wp, 69.0_wp/
     data   y(229),  y(230),  y(231),  y(232),  y(233),  y(234)&
     &    /    77.8_wp, 64.9_wp, 35.7_wp, 21.2_wp, 11.1_wp,  5.7_wp/
     data   y(235),  y(236),  y(237),  y(238),  y(239),  y(240)&
     &    /     8.7_wp, 36.1_wp, 79.7_wp,114.4_wp,109.6_wp, 88.8_wp/
     data   y(241),  y(242),  y(243),  y(244),  y(245),  y(246)&
     &    /    67.8_wp, 47.5_wp, 30.6_wp, 16.3_wp,  9.6_wp, 33.2_wp/
     data   y(247),  y(248),  y(249),  y(250),  y(251),  y(252)&
     &    /    92.6_wp,151.6_wp,136.3_wp,134.7_wp, 83.9_wp, 69.4_wp/
     data   y(253),  y(254),  y(255),  y(256),  y(257),  y(258)&
     &    /    31.5_wp, 13.9_wp,  4.4_wp, 38.0_wp,141.7_wp,190.2_wp/
     data   y(259),  y(260),  y(261)&
     &    /   184.8_wp,159.0_wp,112.3_wp/
!
      call iprint(iprt)
      itest = 1
      ldstak = lds
!
      n = 261
      nprt = 2
      fc = 1.0_wp/22.0_wp
      nf = 101
      fmin = 0.0_wp
      fmax = 0.2_wp
      lphi = 50
      nfac = 1
      nd(1) = 1
      iod(1) = 1
      iar = 1
      phi(1) = 0.6_wp
      k = 41
      ymiss = 11.0_wp
!
!     TEST OF LPCOEF
!
   10 write (iprt, 1001)
      call lpcoef (fc, k, hlp)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM LPCOEF
!
      if (ierr.eq.0) write (iprt, 1004) (hlp(i), i = 1, k)
!
!     TEST OF LOPASS
!
      write (iprt, 1007)
      call lopass (y, n, fc, k, hlp, yf, nyf)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM LOPASS
!
      if (ierr.eq.0) then
        write (iprt, 1004) (hlp(i), i = 1, k)
        write (iprt, 1004) (yf(i), i = 1, nyf)
      end if
!
!     TEST OF HIPASS
!
      write (iprt, 1008)
      call hipass (y, n, fc, k, hhp, yf, nyf)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM HIPASS
!
      if (ierr.eq.0) then
        write (iprt, 1004) (hhp(i), i = 1, k)
        write (iprt, 1004) (yf(i), i = 1, nyf)
      end if
!
!     TEST OF HPCOEF
!
   20 write (iprt, 1003)
      call hpcoef (hlp, k, hhp)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM HPCOEF
!
      if (ierr.eq.0) write (iprt, 1004) (hhp(i), i = 1, k)
!
!     TEST OF MAFLT
!
      write (iprt, 1020)
      call maflt (y, n, k, yf, nyf)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM MAFLT
!
      if (ierr.eq.0) write (iprt, 1004) (yf(i), i = 1, nyf)
!
!     TEST OF SLFLT
!
      write (iprt, 1005)
      call slflt (y, n, k, hlp, yf, nyf)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM SLFLT
!
      if (ierr.eq.0) write (iprt, 1004) (yf(i), i = 1, nyf)
!
!     TEST OF SAMPLE
!
      write (iprt, 1006)
      call sample (yf, n, k, ys, nys)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM SAMPLE
!
      if (ierr.eq.0) write (iprt, 1004) (yf(i), i = 1, nys)
!
!     TEST OF ARFLT
!
      write (iprt, 1009)
      call arflt (y, n,  iar, phi, yf, nyf)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM ARFLT
!
      if (ierr.eq.0) write (iprt, 1004) (yf(i), i = 1, nyf)
!
!     TEST OF DIF
!
      write (iprt, 1015)
      call dif (y, n, yf, nyf)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM DIF
!
      if (ierr.eq.0) write (iprt, 1004) (yf(i), i = 1, nyf)
!
!     TEST OF DIFM
!
      write (iprt, 1018)
      call difm (y, ymiss, n, yf, yfmiss, nyf)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM DIFM
!
      if (ierr.eq.0) then
         write (iprt, 1004) (yf(i), i = 1, nyf)
         write (iprt, 1004) yfmiss
      end if
!
!     TEST OF GFSLF
!
      write (iprt, 1011)
      call gfslf (hlp, k)
      write (iprt, 1002) ierr
!
!     TEST OF GFARF
!
      write (iprt, 1013)
      call gfarf (phi, iar)
      write (iprt, 1002) ierr
!
!     TEST OF DIFC
!
   30 write (iprt, 1010)
      call difc (y, n, nfac, nd, iod, iar, phi, lphi, yf, nyf, ldstak)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM DIFC
!
      if (ierr.eq.0) then
        write (iprt, 1004) (phi(i), i = 1, k)
        write (iprt, 1004) (yf(i), i = 1, nyf)
      end if
!
!     TEST OF DIFMC
!
      write (iprt, 1019)
     call difmc (y, ymiss, n, nfac, nd, iod, iar, phi, lphi, yf,&
     &   yfmiss, nyf, ldstak)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM DIFMC
!
      if (ierr.eq.0) then
        write (iprt, 1004) (phi(i), i = 1, k)
        write (iprt, 1004) (yf(i), i = 1, nyf)
        write (iprt, 1004) yfmiss
      end if
!
!     TEST OF GFSLFS
!
      write (iprt, 1012)
      call gfslfs (hlp, k, nf, fmin, fmax, gain, freq, nprt, ldstak)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM GFSLFS
!
      if (ierr.eq.0) then
        write (iprt, 1004) (gain(i), i = 1, nf)
        write (iprt, 1004) (freq(i), i = 1, nf)
      end if
!
!     TEST OF GFARFS
!
      write (iprt, 1014)
     call gfarfs (phi, iar, nf, fmin, fmax, gain, phas, freq, nprt,&
     &   ldstak)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM GFARFS
!
      if (ierr.eq.0) then
        write (iprt, 1004) (gain(i), i = 1, nf)
        write (iprt, 1004) (phas(i), i = 1, nf)
        write (iprt, 1004) (freq(i), i = 1, nf)
      end if
!
      go to (100, 200, 300, 400), itest
!
!     TEST SPECIAL CASES
!
  100 itest = itest + 1
!
!     TEST OF GFSLFS
!
      fmin = 0.4_wp
      fmax = 0.1_wp
      nprt = 1
      write (iprt, 1012)
      call gfslfs (hlp, k, nf, fmin, fmax, gain, freq, nprt, ldstak)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM GFSLFS
!
      if (ierr.eq.0) then
        write (iprt, 1004) (gain(i), i = 1, nf)
        write (iprt, 1004) (freq(i), i = 1, nf)
      end if
!
!     TEST OF GFARFS
!
      nprt = -1
      write (iprt, 1014)
     call gfarfs (phi, iar, nf, fmin, fmax, gain, phas, freq, nprt,&
     &   ldstak)
      write (iprt, 1002) ierr
!
!     PRINT STORAGE FROM GFARFS
!
      if (ierr.eq.0) then
        write (iprt, 1004) (gain(i), i = 1, nf)
        write (iprt, 1004) (phas(i), i = 1, nf)
        write (iprt, 1004) (freq(i), i = 1, nf)
      end if
!
!     TEST MINIMUM PROBLEM SIZE
!
      n = 3
      k = 1
      nprt = -1
      iar = 1
      nf = 1
      go to 20
!
!     TEST ERROR CONDITIONS
!
  200 itest = itest + 1
      n = -5
      fc = 1.0_wp
      nf = 0
      lphi = 0
      nfac = 1
      nd(1) = -1
      iod(1) = -1
      iar = 0
      k = -1
      go to 10
!
!     TEST LDSTAK
!
  300 itest = itest + 1
      n = 261
      nprt = 2
      fc = 1.0_wp/22.0_wp
      nf = 101
      fmin = 0.0_wp
      fmax = 0.2_wp
      lphi = 50
      nfac = 1
      nd(1) = 1
      iod(1) = 1
      iar = 1
      phi(1) = 0.6_wp
      k = 41
      ymiss = 11.0_wp
      ldstak = 0
      go to 30
!
  400 return
!
!     FORMAT STATEMENTS
!
 1001 format ('1', 14htest of lpcoef)
 1002 format (/' IERR IS ', i5)
 1003 format ('1', 14htest of hpcoef)
 1004 format (10e10.3)
 1005 format ('1', 13htest of slflt)
 1006 format ('1', 14htest of sample)
 1007 format ('1', 14htest of lopass)
 1008 format ('1', 14htest of hipass)
 1009 format ('1', 13htest of arflt)
 1010 format ('1', 12htest of difc)
 1011 format ('1', 13htest of gfslf)
 1012 format ('1', 14htest of gfslfs)
 1013 format ('1', 13htest of gfarf)
 1014 format ('1', 14htest of gfarfs)
 1015 format ('1', 11htest of dif)
 1018 format ('1', 12htest of difm)
 1019 format ('1', 13htest of difmc)
 1020 format ('1', 13htest of maflt)
!
      end
