!PPFCHS
      function ppfchs(p, nu)
      real(kind=wp) :: ppfchs
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS FUNCTION IS A VERSION OF DATAPAC SUBROUTINE CHSPPF, WITH
!     MODIFICATIONS TO FACILITATE CONVERSION TO DOUBLE PRECISION
!     AUTOMATICALLY USING THE NAG, INC., CODE APT, AND TO CORRESPOND
!     TO STARPAC CONVENTIONS.
!
!     PURPOSE--THIS SUBROUTINE COMPUTES THE PERCENT POINT
!              FUNCTION VALUE FOR THE CHI-SQUARED DISTRIBUTION
!              WITH INTEGER DEGREES OF FREEDOM PARAMETER = NU.
!              THE CHI-SQUARED DISTRIBUTION USED
!              HEREIN IS DEFINED FOR ALL NON-NEGATIVE X,
!              AND ITS PROBABILITY DENSITY FUNCTION IS GIVEN
!              IN REFERENCES 2, 3, AND 4 BELOW.
!              NOTE THAT THE PERCENT POINT FUNCTION OF A DISTRIBUTION
!              IS IDENTICALLY THE SAME AS THE INVERSE CUMULATIVE
!              DISTRIBUTION FUNCTION OF THE DISTRIBUTION.
!     INPUT  ARGUMENTS--P      = THE SINGLE PRECISION VALUE
!                                (BETWEEN 0.0_WP (INCLUSIVELY)
!                                AND 1.0_WP (EXCLUSIVELY))
!                                AT WHICH THE PERCENT POINT
!                                FUNCTION IS TO BE EVALUATED.
!                     --NU     = THE INTEGER NUMBER OF DEGREES
!                                OF FREEDOM.
!                                NU SHOULD BE POSITIVE.
!     OUTPUT ARGUMENTS--PPFCHS = THE SINGLE PRECISION PERCENT
!                                POINT FUNCTION VALUE.
!     OUTPUT--THE SINGLE PRECISION PERCENT POINT FUNCTION .
!             VALUE PPFCHS FOR THE CHI-SQUARED DISTRIBUTION
!             WITH DEGREES OF FREEDOM PARAMETER = NU.
!     PRINTING--DECEMBER 2, 1985  (JRD) UNLESS AN INPUT ARGUMENT ERROR C
!     RESTRICTIONS--NU SHOULD BE A POSITIVE INTEGER VARIABLE.
!                 --P SHOULD BE BETWEEN 0.0_WP (INCLUSIVELY)
!                   AND 1.0_WP (EXCLUSIVELY).
!     OTHER DATAPAC   SUBROUTINES NEEDED--NONE
!     FORTRAN LIBRARY SUBROUTINES NEEDED--EXP, LOG.
!     MODE OF INTERNAL OPERATIONS--DOUBLE PRECISION.
!     LANGUAGE--ANSI FORTRAN.
!     ACCURACY--(ON THE UNIVAC 1108, EXEC 8 SYSTEM AT NBS)
!               COMPARED TO THE KNOWN NU = 2 (EXPONENTIAL)
!               RESULTS, AGREEMENT WAS HAD OUT TO 6 SIGNIFICANT
!               DIGITS FOR ALL TESTED P IN THE RANGE P = .001 TO
!               P = .999.  FOR P = .95 AND SMALLER, THE AGREEMENT
!               WAS EVEN BETTER--7 SIGNIFICANT DIGITS.
!               (NOTE THAT THE TABULATED VALUES GIVEN IN THE WILK,
!               GNANADESIKAN, AND HUYETT REFERENCE BELOW, PAGE 20,
!               ARE IN ERROR FOR AT LEAST THE GAMMA = 1 CASE--
!               THE WORST DETECTED ERROR WAS AGREEMENT TO ONLY 3
!               SIGNIFICANT DIGITS (IN THEIR 8 SIGNIFICANT DIGIT TABLE)
!               FOR P = .999.)
!     REFERENCES--WILK, GNANADESIKAN, AND HUYETT, "PROBABILITY
!                 PLOTS FOR THE GAMMA DISTRIBUTION",
!                 TECHNOMETRICS, 1962, PAGES 1-15,
!                 ESPECIALLY PAGES 3-5.
!               --NATIONAL BUREAU OF STANDARDS APPLIED MATHEMATICS
!                 SERIES 55, 1964, PAGE 257, FORMULA 6.1.41,
!                 AND PAGES 940-943.
!               --JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE
!                 DISTRIBUTIONS--1, 1970, PAGES 166-206.
!               --HASTINGS AND PEACOCK, STATISTICAL
!                 DISTRIBUTIONS--A HANDBOOK FOR
!                 STUDENTS AND PRACTITIONERS, 1975,
!                 PAGES 46-51.
!     WRITTEN BY--JAMES J. FILLIBEN
!                 STATISTICAL ENGINEERING LABORATORY (205.03)
!                 NATIONAL BUREAU OF STANDARDS
!                 WASHINGTON, D. C. 20234
!                 PHONE  301-921-2315
!     ORIGINAL VERSION--SEPTEMBER 1975.
!     UPDATED         --NOVEMBER  1975.
!
!---------------------------------------------------------------------
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   p
     integer&
     &   nu
!
!  LOCAL SCALARS
     real(kind=wp) ::&
    &   a,aj,b,c,cut1,cut2,cutoff,den,dx,fp,gamma,&
    &   pcalc,sum,term,xdel,xlower,xmax,xmid,xmin,xmin0,xupper,&
     &   z,z2,z3,z4,z5
     integer&
     &   icount,iloop,iprt,j,maxit
!
!  LOCAL ARRAYS
     real(kind=wp) ::&
     &   d(10)
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL IPRINT
!
!  INTRINSIC FUNCTIONS
      intrinsic exp,log
!
!
      data c/0.918938533204672741_wp/
     data d(3),d(4),d(5)&
    &  /+0.793650793650793651e-3_wp,&
    &   -0.595238095238095238e-3_wp,&
     &   +0.8417508417508417151e-3_wp/
     data d(6),d(7),d(8),d(9),d(10)&
    &  /-0.191752691752691753e-2_wp,&
    &   +0.641025641025641025e-2_wp,&
    &   -0.2955065359147712418e-1_wp,&
    &   +0.179644372368830573_wp,&
     &   -0.139243221690590111e1_wp/
!
      d(1) = 1.0_wp/12.0_wp
      d(2) = 1.0_wp/360.0_wp
!
      call iprint (iprt)
!
!     CHECK THE INPUT ARGUMENTS FOR ERRORS
!
      if (p.lt.0.0_wp .or. p.ge.1.0_wp) then
         write(iprt,1010)
         write(iprt,1030) p
         ppfchs = 0.0_wp
         return
      end if
      if(nu.lt.1) then
         write(iprt,1020)
         write(iprt,1040) nu
         ppfchs = 0.0_wp
         return
      end if
!
!-----START POINT-----------------------------------------------------
!
!     EXPRESS THE CHI-SQUARED DISTRIBUTION PERCENT POINT
!     FUNCTION IN TERMS OF THE EQUIVALENT GAMMA
!     DISTRIBUTION PERCENT POINT FUNCTION,
!     AND THEN EVALUATE THE LATTER.
!
      fp = p
      gamma = nu/2.0_wp
      maxit = 10000
!
!     COMPUTE THE GAMMA FUNCTION USING THE ALGORITHM IN THE
!     NBS APPLIED MATHEMATICS SERIES REFERENCE.
!     THIS GAMMA FUNCTION NEED BE CALCULATED ONLY ONCE.
!     IT IS USED IN THE CALCULATION OF THE CDF BASED ON
!     THE TENTATIVE VALUE OF THE PPFCHS IN THE ITERATION.
!
      z = gamma
      den = 1.0_wp
  150 if(z.lt.10.0_wp) then
         den = den*z
         z = z+1.0_wp
         go to 150
      end if
      z2 = z*z
      z3 = z*z2
      z4 = z2*z2
      z5 = z2*z3
      a = (z-0.5_wp)*log(z)-z+c
     b = d(1)/z + d(2)/z3 + d(3)/z5 + d(4)/(z2*z5) + d(5)/(z4*z5) +&
    &    d(6)/(z*z5*z5) + d(7)/(z3*z5*z5) + d(8)/(z5*z5*z5) +&
     &    d(9)/(z2*z5*z5*z5)
!     G = EXP(A+B)/DEN
!
!     DETERMINE LOWER AND UPPER LIMITS ON THE DESIRED 100P
!     PERCENT POINT.
!
      iloop = 1
!     XMIN0 = (FP*GAMMA*G)**(1.0_WP/GAMMA)
      xmin0 = exp((1.0_wp/gamma)*(log(fp)+log(gamma)+(a+b)-log(den)))
      xmin = xmin0
      xlower = xmin
      xmid = xmin
      xupper = xmin
      icount = 1
  350 continue
      xmax = icount*xmin0
      dx = xmax
      go to 600
  360 if(pcalc.lt.fp) then
         xmin = xmax
         icount = icount+1
         if(icount.le.30000) go to 350
      end if
      xmid = (xmin+xmax)/2.0_wp
!
!     NOW ITERATE BY BISECTION UNTIL THE DESIRED ACCURACY IS ACHIEVED.
!
      iloop = 2
      xlower = xmin
      xupper = xmax
      icount = 0
  550 dx = xmid
      go to 600
  560 if(pcalc.ne.fp) then
         if(pcalc.gt.fp) then
            xupper = xmid
            xmid = (xmid+xlower)/2.0_wp
         else
            xlower = xmid
            xmid = (xmid+xupper)/2.0_wp
         end if
         xdel = xmid-xlower
         if(xdel.lt.0.0_wp)xdel = -xdel
         icount = icount+1
         if((xdel.ge.0.0000000001_wp) .and. (icount.le.100)) go to 550
      end if
      ppfchs = 2.0_wp*xmid
      return
!
!********************************************************************
!     THIS SECTION BELOW IS LOGICALLY SEPARATE FROM THE ABOVE.
!     THIS SECTION COMPUTES A CDF VALUE FOR ANY GIVEN TENTATIVE
!     PERCENT POINT X VALUE AS DEFINED IN EITHER OF THE 2
!     ITERATION LOOPS IN THE ABOVE CODE.
!
!     COMPUTE T-SUB-Q AS DEFINED ON PAGE 4 OF THE WILK, GNANADESIKAN,
!     AND HUYETT REFERENCE
!
  600 sum = 1.0_wp/gamma
      term = 1.0_wp/gamma
      cut1 = dx-gamma
      cut2 = dx*10000000000.0_wp
      do 700 j=1,maxit
         aj = j
         term = dx*term/(gamma+aj)
         sum = sum+term
         cutoff = cut1+(cut2*term/sum)
         if (aj.gt.cutoff) go to 750
  700 continue
      write(iprt,1050)maxit
      write(iprt,1060)p
      write(iprt,1070)nu
      write(iprt,1080)
      ppfchs = 0.0_wp
      return
!
  750 continue
!     PCALC = (DX**GAMMA)*(EXP(-DX))*SUM/G
      pcalc = exp(gamma*log(dx) + log(sum) + log(den) - dx - a - b)
      if (iloop.eq.1) go to 360
      go to 560
!
1010 format(' ',115h***** fatal error--the first  input argument to the&
     & ppfchs function is outside the allowable (0,1  ) interval *****)
1020 format(' ', 91h***** fatal error--the second input argument to the&
     & ppfchs function is non-positive *****  )
 1030 format(' ', 35h***** the value of the argument is ,e15.8,6h *****)
 1040 format(' ', 35h***** the value of the argument is ,i8   ,6h *****)
1050 format(' ',48h*****error in internal operations in the ppfchs ,&
     & 43hfunction--the number of iterations exceeds ,i7)
 1060 format(' ',33h     the input value of p     is ,e15.8)
 1070 format(' ',33h     the input value of nu    is ,i8)
 1080 format(52h      the output value of ppfchs has been set to 0.0)
!
      end
