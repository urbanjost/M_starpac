!PPFF
      REAL(KIND=WP) :: FUNCTION PPFF(P, NU1, NU2)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS FUNCTION IS A VERSION OF DATAPLOT SUBROUTINE FPPF,
!     WITH MODIFICATIONS NECESSARY TO CORRESPOND TO STARPAC CONVENTIONS.
!
!     PURPOSE--THIS SUBROUTINE COMPUTES THE PERCENT POINT
!              FOR THE F DISTRIBUTION
!              WITH INTEGER DEGREES OF FREEDOM
!              PARAMETERS = NU1 AND NU2.
!              THIS DISTRIBUTION IS DEFINED FOR ALL NON-NEGATIVE X.
!              THE PROBABILITY DENSITY FUNCTION IS GIVEN
!              IN THE REFERENCES BELOW.
!     INPUT  ARGUMENTS--P      = THE SINGLE PRECISION VALUE
!                                (BETWEEN 0.0E0_WP AND 1.0E0_WP)
!                                AT WHICH THE PERCENT POINT
!                                FUNCTION IS TO BE EVALUATED.
!                     --NU1    = THE INTEGER DEGREES OF FREEDOM
!                                FOR THE NUMERATOR OF THE F RATIO.
!                                NU1 SHOULD BE POSITIVE.
!                     --NU2    = THE INTEGER DEGREES OF FREEDOM
!                                FOR THE DENOMINATOR OF THE F RATIO.
!                                NU2 SHOULD BE POSITIVE.
!     OUTPUT ARGUMENTS--PPFF    = THE SINGLE PRECISION PERCENT POINT
!                                FUNCTION VALUE.
!     OUTPUT--THE SINGLE PRECISION PERCENT POINT
!             FUNCTION VALUE PPFF FOR THE F DISTRIBUTION
!             WITH DEGREES OF FREEDOM
!             PARAMETERS = NU1 AND NU2.
!     PRINTING--NONE UNLESS AN INPUT ARGUMENT ERROR CONDITION EXISTS.
!     RESTRICTIONS--P SHOULD BE BETWEEN
!                   0.0E0_WP (INCLUSIVELY) AND 1.0E0_WP (EXCLUSIVELY).
!                 --NU1 SHOULD BE A POSITIVE INTEGER VARIABLE.
!                 --NU2 SHOULD BE A POSITIVE INTEGER VARIABLE.
!     LANGUAGE--ANSI FORTRAN.
!     REFERENCES--NATIONAL BUREAU OF STANDARDS APPLIED MATHEMATICS
!                 SERIES 55, 1964, PAGES 946-947,
!                 FORMULAE 26.6.4, 26.6.5, 26.6.8, AND 26.6.15.
!               --JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE
!                 DISTRIBUTIONS--2, 1970, PAGE 83, FORMULA 20,
!                 AND PAGE 84, THIRD FORMULA.
!               --PAULSON, AN APPROXIMATE NORMAILIZATION
!                 OF THE ANALYSIS OF VARIANCE DISTRIBUTION,
!                 ANNALS OF MATHEMATICAL STATISTICS, 1942,
!                 NUMBER 13, PAGES 233-135.
!               --SCHEFFE AND TUKEY, A FORMULA FOR SAMPLE SIZES
!                 FOR POPULATION TOLERANCE LIMITS, 1944,
!                 NUMBER 15, PAGE 217.
!     WRITTEN BY--JAMES J. FILLIBEN
!                 STATISTICAL ENGINEERING DIVISION
!                 CENTER FOR APPLIED MATHEMATICS
!                 NATIONAL BUREAU OF STANDARDS
!                 WASHINGTON, D. C. 20234
!                 PHONE--301-921-3651
!     NOTE-- THIS ROUTINE WAS ADAPTED FROM DATAPLOT SUBROUTINE
!            FPPF WITH PERMISSION FROM THE AUTHOR.  DATAPLOT IS
!            A REGISTERED TRADEMARK.
!
!           THIS SUBROUTINE MAY NOT BE COPIED, EXTRACTED,
!           MODIFIED, OR OTHERWISE USED IN A CONTEXT
!           OUTSIDE OF THIS LANGUAGE/SYSTEM.
!     LANGUAGE--ANSI FORTRAN (1966)
!     VERSION NUMBER--82.3
!     ORIGINAL VERSION--MAY       1978.
!     UPDATED         --AUGUST    1979.
!     UPDATED         --DECEMBER  1981.
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      REAL(KIND=WP) ::
     +   P
      INTEGER
     +   NU1,NU2
!
!  LOCAL SCALARS
      REAL(KIND=WP) ::
     +   ANU1,ANU2,EXPF,PCALC,SDF,TOL,X,XDEL,XLOW,XMAX,
     +   XMID,XMIN,XN,XUP,ZN
      INTEGER
     +   IBUG,ICOUNT,IPRT,MAXIT
!
!  EXTERNAL FUNCTIONS
      REAL(KIND=WP) ::
     +   CDFF,PPFNML
      EXTERNAL CDFF,PPFNML
!
!  EXTERNAL SUBROUTINES
      EXTERNAL IPRINT
!
!  INTRINSIC FUNCTIONS
      INTRINSIC ABS,EXP,SQRT
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: ANU1
!        THE (DOUBLE PRECISION) DEGREES OF FREEDOM IN THE NUMERATOR.
!     REAL(KIND=WP) :: ANU2
!        THE (DOUBLE PRECISION) DEGREES OF FREEDOM IN THE DENOMINATOR.
!     REAL(KIND=WP) :: EXPF
!        *
!     INTEGER IBUG
!        *
!     INTEGER ICOUNT
!        *
!     INTEGER IPRT
!        THE UNIT NUMBER FOR PRINTED OUTPUT.
!     INTEGER MAXIT
!        *
!     INTEGER NU1
!        THE DEGREES OF FREEDOM IN THE NUMERATOR.
!     INTEGER  NU2
!        THE DEGREES OF FREEDOM IN THE DENOMINATOR.
!     REAL(KIND=WP) :: P
!        THE VALUE (BETWEEN 0.0E0_WP AND 1.0E0_WP) AT WHICH THE PERCENT POINT
!        IS TO BE CALCULATED.
!     REAL(KIND=WP) :: PCALC
!        *
!     REAL(KIND=WP) :: SDF
!        *
!     REAL(KIND=WP) :: TOL
!        *
!     REAL(KIND=WP) :: X
!        *
!     REAL(KIND=WP) :: XDEL
!        *
!     REAL(KIND=WP) :: XLOW
!        *
!     REAL(KIND=WP) :: XMAX
!        *
!     REAL(KIND=WP) :: XMID
!        *
!     REAL(KIND=WP) :: XMIN
!        *
!     REAL(KIND=WP) :: XN
!        *
!     REAL(KIND=WP) :: XUP
!        *
!     REAL(KIND=WP) :: ZN
!        *
!
!---------------------------------------------------------------------
!
!     COMMON /MACH/IRD,IPR,CPUMIN,CPUMAX,NUMBPC,NUMCPW,NUMBPW
!     COMMON /PRINT/IFEEDB,IPRINT
!
!-----START POINT-----------------------------------------------------
!
!     CHECK THE INPUT ARGUMENTS FOR ERRORS
!
      CALL IPRINT(IPRT)
!
      PPFF = 0.0E0_WP
      IF (NU1.LE.0) GO TO 10
      IF (NU2.LE.0) GO TO 20
      IF (P.LT.0.0E0_WP .OR. P.GE.1.0E0_WP) GO TO 30
      GO TO 40
   10 WRITE (IPRT,1010)
      WRITE (IPRT,1040) NU1
      PPFF = 0.0E0_WP
      RETURN
   20 WRITE (IPRT,1020)
      WRITE (IPRT,1040) NU2
      PPFF = 0.0E0_WP
      RETURN
   30 WRITE (IPRT,1000)
      WRITE (IPRT,1030) P
      PPFF = 0.0E0_WP
      RETURN
   40 CONTINUE
!
!-----START POINT-----------------------------------------------------
!
      IBUG = 0.0E0_WP
!
      TOL = 0.000001D0
      MAXIT = 100
      XMIN = 0.0E0_WP
      XMAX = 10.0D30
      XLOW = XMIN
      XUP = XMAX
!
      ANU1 = NU1
      ANU2 = NU2
!
      EXPF = 0.5D0*((1.0E0_WP/ANU2)-(1.0E0_WP/ANU1))
      SDF = SQRT(0.5D0*((1.0E0_WP/ANU2)+(1.0E0_WP/ANU1)))
      ZN = PPFNML(P)
      XN = EXPF + ZN*SDF
      XMID = EXP(2.0E0_WP*XN)
      IF (IBUG.EQ.1) WRITE (IPRT,1050) XMID
!
      IF (P.EQ.0.0E0_WP) GO TO 50
      GO TO 60
   50 CONTINUE
      PPFF = XMIN
      RETURN
   60 CONTINUE
!
      ICOUNT = 0
!
   70 CONTINUE
      X = XMID
      PCALC = CDFF(X,ANU1,ANU2)
      IF (PCALC.EQ.P) GO TO 130
      IF (PCALC.GT.P) GO TO 100
!
   80 CONTINUE
      XLOW = XMID
      X = XMID*2.0E0_WP
      IF (X.GE.XUP) GO TO 90
      XMID = X
      IF (IBUG.EQ.1) WRITE (IPRT,1050) XMID
      PCALC = CDFF(X,ANU1,ANU2)
      IF (PCALC.EQ.P) GO TO 130
      IF (PCALC.LT.P) GO TO 80
      XUP = X
   90 CONTINUE
      XMID = (XLOW+XUP)/2.0E0_WP
      IF (IBUG.EQ.1) WRITE (IPRT,1050) XMID
      GO TO 120
!
  100 CONTINUE
      XUP = XMID
      X = XMID/2.0E0_WP
      IF (X.LE.XLOW) GO TO 110
      XMID = X
      IF (IBUG.EQ.1) WRITE (IPRT,1050) XMID
      PCALC = CDFF(X,ANU1,ANU2)
      IF (PCALC.EQ.P) GO TO 130
      IF (PCALC.GT.P) GO TO 100
      XLOW = X
  110 CONTINUE
      XMID = (XLOW+XUP)/2.0E0_WP
      IF (IBUG.EQ.1) WRITE (IPRT,1050) XMID
!
  120 CONTINUE
      XDEL = ABS(XMID-XLOW)
      ICOUNT = ICOUNT + 1
      IF (XDEL.LT.TOL .OR. ICOUNT.GT.MAXIT) GO TO 130
      GO TO 70
!
  130 CONTINUE
      PPFF = XMID
!
      RETURN
 1000 FORMAT (' ', 49H***** FATAL ERROR--THE FIRST  INPUT ARGUMENT TO T,
     +   59HHE FPPF SUBROUTINE IS OUTSIDE THE ALLOWABLE (0,1) INTERVAL ,
     +   5H*****)
 1010 FORMAT (' ', 49H***** FATAL ERROR--THE SECOND INPUT ARGUMENT TO T,
     +   42HHE FPPF   SUBROUTINE IS NON-POSITIVE *****)
 1020 FORMAT (' ', 49H***** FATAL ERROR--THE THIRD  INPUT ARGUMENT TO T,
     +   42HHE FCDF   SUBROUTINE IS NON-POSITIVE *****)
 1030 FORMAT (' ', 35H***** THE VALUE OF THE ARGUMENT IS , E15.8,
     +   6H *****)
 1040 FORMAT (' ', 35H***** THE VALUE OF THE ARGUMENT IS , I8, 6H *****)
 1050 FORMAT (' ', 7HXMID = , E15.7)
      END
