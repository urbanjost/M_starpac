!AMDRV
      SUBROUTINE AMDRV (MDLTS3, DRV, DONE, IFIXD, PAR, NPAR, XM, N, M,
     &   IXM, NRESTS, RESTS, D, WEIGHT, WT, LWT, STPT, LSTPT, SCL, LSCL)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS ROUTINE COMPUTES THE NUMERICAL APPROXIMATIONS TO THE
!     DERIVATIVE MATRIX (JACOBIAN).
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 2, 1985
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      INTEGER
     &   IXM,LSCL,LSTPT,LWT,M,N,NPAR,NRESTS
      LOGICAL
     &   DONE,WEIGHT
!
!  ARRAY ARGUMENTS
      REAL(KIND=WP) ::
     &   D(NRESTS,*),PAR(*),RESTS(*),SCL(*),STPT(*),WT(*),XM(IXM,*)
      INTEGER
     &   IFIXD(*)
!
!  SUBROUTINE ARGUMENTS
      EXTERNAL DRV,MDLTS3
!
!  SCALARS IN COMMON
      INTEGER
     &   IERR
!
!  LOCAL SCALARS
      REAL(KIND=WP) ::
     &   PJ,STPJ
      INTEGER
     &   I,J,JPK
!
!  INTRINSIC FUNCTIONS
      INTRINSIC ABS,MAX,SIGN
!
!  COMMON BLOCKS
      COMMON /ERRCHK/IERR
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: D(NRESTS,NPAR)
!        THE FIRST DERIVATIVE OF THE MODEL (JACOBIAN).
!     EXTERNAL DRV
!        THE NAME OF THE USER SUPPLIED SUBROUTINE WHICH COMPUTES THE
!        DERIVATIVE (JACOBIAN) MATRIX OF THE MODEL.
!     LOGICAL DONE
!        THE VARIABLE USED TO INDICATE WHETHER THIS IS THE FINAL
!        COMPUTATION OF THE JACOBIAN OR NOT.
!     INTEGER I
!        AN INDEX VARIABLE.
!     INTEGER IERR
!        THE VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST.
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED.
!        IF IERR .GE. 1, ERRORS WERE DETECTED.
!     INTEGER IFIXD(NPAR)
!        THE INDICATOR VALUES USED TO DESIGNATE WHETHER THE
!        PARAMETERS ARE TO BE OPTIMIZED OR ARE TO BE HELD FIXED.
!        IF IFIXED(I).NE.0, THEN PAR(I) WILL BE HELD FIXED.
!        IF IFIXED(I).EQ.0, THEN PAR(I) WILL BE OPTIMIZED.
!     INTEGER IXM
!        THE FIRST DIMENSION OF MATRIX XM.
!     INTEGER J
!        AN INDEX VARIABLE.
!     INTEGER JPK
!        AN INDEX VARIABLE.
!     INTEGER LSCL
!        THE DIMENSION OF VECTOR SCL.
!     INTEGER LSTPT
!        THE DIMENSION OF VECTOR STPT.
!     INTEGER LWT
!        THE DIMENSION OF VECTOR WT.
!     INTEGER M
!        THE NUMBER OF INDEPENDENT VARIABLES.
!     EXTERNAL MDLTS3
!        THE STARPAC FORMAT SUBROUTINE FOR COMPUTING THE ARIMA MODEL
!        RESIDUALS.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NPAR
!        THE NUMBER OF PARAMETERS IN THE MODEL.
!     INTEGER NRESTS
!        THE MAXIMUM NUMBER OF RESIDUALS TO BE COMPUTED.
!     REAL(KIND=WP) :: PAR(NPAR)
!        THE CURRENT ESTIMATES OF THE PARAMETERS.
!     REAL(KIND=WP) :: PJ
!        A TEMPORARY LOCATION FOR STORAGE OF THE JTH PARAMETER.
!     REAL(KIND=WP) :: RESTS(NRESTS)
!        THE RESIDUALS FROM THE ARIMA MODEL.
!     REAL(KIND=WP) :: SCL(LSCL)
!        THE SCALE VALUES.
!     REAL(KIND=WP) :: STPT(LSTPT)
!        THE STEP SIZE ARRAY.
!     REAL(KIND=WP) :: STPJ
!        THE JTH STEP SIZE.
!     LOGICAL WEIGHT
!        THE VARIABLE USED TO INDICATE WHETHER WEIGHTED ANALYSIS IS TO
!        BE PERFORMED (TRUE) OR NOT (FALSE).
!     REAL(KIND=WP) :: WT(LWT)
!        THE USER SUPPLIED WEIGHTS.
!     REAL(KIND=WP) :: XM(IXM,M)
!        THE INDEPENDENT VARIABLE.
!
!     COMPUTE FINITE-DIFFERENCE JACOBIAN OF THE OPTIMIZED PARAMETERS
!
      JPK = 0
!
      DO 20 J=1,NPAR
!
         IF (IFIXD(J).NE.0) GO TO 20
!
         JPK = JPK + 1
!
         PJ = PAR(J)
         IF (SCL(JPK).NE.0.0_WP) THEN
            STPJ = STPT(J)*SIGN(1.0_WP,PAR(J))*MAX(ABS(PAR(J)),1.0_WP/
     &             ABS(SCL(JPK)))
         ELSE
            IF (PAR(J).NE.0.0_WP) THEN
               STPJ = STPT(J)*SIGN(1.0_WP,PAR(J))*ABS(PAR(J))
            ELSE
               STPJ = STPT(J)
            END IF
         END IF
!
         STPJ = STPJ + PAR(J)
         STPJ = STPJ - PAR(J)
!
         PAR(J) = PJ + STPJ
         CALL MDLTS3(PAR, NPAR, XM, N, M, IXM, D(1,J))
!
         DO 10 I=1,NRESTS
            D(I,JPK) = (-RESTS(I)+D(I,J))/STPJ
   10    CONTINUE
!
         PAR(J) = PJ
!
   20 CONTINUE
!
      RETURN
!
      END
