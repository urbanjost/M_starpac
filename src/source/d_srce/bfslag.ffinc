!BFSLAG
      SUBROUTINE BFSLAG(CCOV, LAGMAX, LAGS, N, NW, NWUSED, ICCOV,
     +   JCCOV, INDEX1, INDEX2)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS ROUTINE COMPUTES THE LAG WINDOW TRUNCATION POINTS FOR
!     FOURIER BIVARIATE SPECTRUM ANALYSIS.
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 2, 1985
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      INTEGER
     +   ICCOV,INDEX1,INDEX2,JCCOV,LAGMAX,N,NW,NWUSED
!
!  ARRAY ARGUMENTS
      REAL(KIND=WP) ::
     +   CCOV(ICCOV,JCCOV,*)
      INTEGER
     +   LAGS(*)
!
!  LOCAL SCALARS
      REAL(KIND=WP) ::
     +   COVMX,COVMXI,FAC11,FAC12,FAC21,FAC22,P95LIM
      INTEGER
     +   I,J,K,LAG,NWM1
!
!  INTRINSIC FUNCTIONS
      INTRINSIC ABS,MAX,DBLE,SQRT
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: CCOV(ICCOV,JCCOV,*)
!        THE COVARIANCES.
!     REAL(KIND=WP) :: COVMX
!        THE MAXIMUM COVARIANCE VALUE.
!     REAL(KIND=WP) :: COVMXI
!        THE MAXIMUM COVARIANCE VALUE FOR THE ITH LAG.
!     REAL(KIND=WP) :: FAC11, FAC12, FAC21, FAC22
!        FACTORS USED TO COMPUTE THE CORRELATION COEFFICIENTS.
!     INTEGER I
!        AN INDEX VARIABLE
!     INTEGER ICCOV
!        THE FIRST DIMENSION OF THE ARRAY CCOV.
!     INTEGER INDEX1, INDEX2
!        THE INDICES OF THE COVARIANCES OF THE TWO SERIES.
!     INTEGER J
!        AN INDEX VALUE.
!     INTEGER JCCOV
!        THE SECOND DIMENSION OF THE ARRAY CCOV.
!     INTEGER K
!        AN INDEX VALUE.
!     INTEGER LAG, LAGMAX
!        THE INDEXING VARIABLE INDICATING THE LAG VALUE OF THE
!        BIVARIATE COVARIANCE BEING COMPUTED AND THE MAXIMUM LAG
!        TO BE USED, RESPECTIVELY.
!     INTEGER LAGS(NW)
!        THE ARRAY USED TO STORE THE LAG WINDOW TRUCCATION
!        POINTS USED FOR EACH SET OF SPECTRUM VALUES.
!     INTEGER N
!        THE INTEGER NUMBER OF OBSERVATIONS IN EACH SERIES
!     INTEGER NW
!        THE NUMBER OF DIFFERENT BANDWIDTHS REQUESTED.
!     INTEGER NWM1, NWUSED
!        THE NUMBER OF DIFFERENT BANDWIDTHS MINUS 1, AND THE
!        ACTUAL NUMBER OF BANDWIDTHS ACTUALLY USED.
!     REAL(KIND=WP) :: P95LIM
!        THE 95 PERCENT CONFIDENT LIMIT FOR WHITE NOISE.
!
      LAGS(NW) = LAGMAX
      IF (LAGS(NW).LE.32) GO TO 30
!
!     COMPUTE 95 PERCENT CONFIDENCE LIMITS ON BIVARIATECOVARIANCES,
!     ASSUMING WHITE NOISE.
!
      P95LIM = 1.96D0_WP/SQRT(DBLE(N))
!
      FAC11 = CCOV(1,INDEX1,INDEX1)
      FAC12 = SQRT(CCOV(1,INDEX1,INDEX1)*CCOV(1,INDEX2,INDEX2))
      FAC21 = FAC12
      FAC22 = CCOV(1,INDEX2,INDEX2)
!
!     CHECK FOR FIRST CVF EXCEEDING 95 PERCENT LIMIT ON WHITE NOISE
!
      DO 10 I=1,LAGMAX
         LAG = LAGMAX + 1 - I
         COVMXI = MAX(ABS(CCOV(LAG,INDEX1,INDEX1)*FAC11),ABS(CCOV(LAG,
     +      INDEX1,INDEX2)*FAC12),ABS(CCOV(LAG,INDEX2,INDEX1)*FAC21),
     +      ABS(CCOV(LAG,INDEX2,INDEX2)*FAC22))
         IF (COVMXI.GE.P95LIM) GO TO 30
         LAGS(NW) = LAGS(NW) - 1
   10 CONTINUE
!
!     IF NO ACVF EXCEEDS WHITE NOISE LIMITS, CHECK FOR LARGEST ACVF.
!
      LAGS(NW) = 1
      COVMX = ABS(CCOV(2,1,1)*FAC11)
      DO 20 LAG=1,LAGMAX
         COVMXI = MAX(ABS(CCOV(LAG,INDEX1,INDEX1)*FAC11),ABS(CCOV(LAG,
     +      INDEX1,INDEX2)*FAC12),ABS(CCOV(LAG,INDEX2,INDEX1)*FAC21),
     +      ABS(CCOV(LAG,INDEX2,INDEX2)*FAC22))
         IF (COVMXI.LE.COVMX) GO TO 20
         LAGS(NW) = LAG
         COVMX = COVMXI
   20 CONTINUE
!
!     COMPUTE LAG WINDOW TRUNCATION POINTS
!
   30 LAGS(NW) = LAGS(NW)*3.0E0_WP/2.0E0_WP
      IF (LAGS(NW).LT.32) LAGS(NW) = 32
      IF (LAGS(NW).GT.LAGMAX) LAGS(NW) = LAGMAX
      NWUSED = NW
      IF (NW.EQ.1) RETURN
      NWM1 = NW - 1
      DO 40 I=1,NWM1
         K = NW - I
         LAGS(K) = LAGS(K+1)/2
   40 CONTINUE
!
!     CHECK WHETHER ALL NW LAG WINDOW TRUNCATION POINTS CAN BE USED.
!
      NWUSED = NW
      IF (LAGS(1).GE.4) RETURN
!
!     RECONSTURCT -LAGS- VECTOR IF NOT ALL TRUNCATION POINTS ARE
!     TO BE USED
!
      DO 50 I=2,NW
         NWUSED = NWUSED - 1
         IF (LAGS(I).GE.4) GO TO 60
   50 CONTINUE
!
   60 DO 70 I=1,NWUSED
         J = NW - NWUSED + I
         LAGS(I) = LAGS(J)
   70 CONTINUE
!
      RETURN
      END
