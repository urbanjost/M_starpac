!XNLSE
      subroutine xnlse(ldstak,typ)
      real(kind=wp),intent(in) :: typ
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     DEMONSTRATE THE USER CALLABLE ROUTINES IN THE NONLINEAR
!     LEAST SQUARES FAMILY.
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  NOVEMBER 21, 1983
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   ldstak
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  ARRAYS IN COMMON
      real(kind=wp) :: dstak(12)
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   delta,rsd,stopp,stopss
     integer&
    &   i,idrvck,iprt,ivaprx,ivcv,ixm1,ixm3,ldsa1,ldsmin,ldsn3a,&
     &   m1,m3,mit,n1,n3,nnzw,npar1,npar3,npare,nprt,ntest
!
!  LOCAL ARRAYS
     real(kind=wp) ::&
    &   par1(10),par3(10),pv(100),res(100),scale(10),sdpv(100),&
    &   sdres(100),stp(10),vcv(6,6),wt(100),xm1(10,2),xm3(101,5),&
     &   y1(10),y3(100)
     integer&
     &   ifixed(10)
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL DRV1A,DRV1B,IPRINT,LDSCMP,MDL1,MDL3,NLS,NLSC,NLSD,NLSDC,
!     +   NLSDS,NLSS,NLSW,NLSWC,NLSWD,NLSWDC,NLSWDS,NLSWS,NLSX1,
!     +   NLSX2,SETRV
!
!  INTRINSIC FUNCTIONS
      intrinsic max
!
!  COMMON BLOCKS
      common /cstak/dstak
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: DELTA
!        THE MAXIMUM CHANGE ALLOWED IN THE MODEL PARAMETERS AT THE
!        FIRST ITERATION.
!     EXTERNAL DRV1A, DRV1B
!        THE NAME OF THE USER SUPPLIED SUBROUTINE WHICH COMPUTES THE
!        DERIVATIVE (JACOBIAN) MATRIX OF THE MODEL.
!     REAL(KIND=WP) :: DSTAK(12)
!        THE DOUBLE PRECISION VERSION OF THE /CSTAK/ WORK AREA.
!     INTEGER I
!        AN INDEX VALUE.
!     INTEGER IDRVCK
!        THE VARIABLE USED TO INDICATE WHETHER THE DERIVATIVES ARE
!        TO BE CHECKED (IDRVCK = 1) OR NOT (IDRVCK = 0).
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST.
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED.
!        IF IERR .GE. 1, ERRORS WERE DETECTED.
!     INTEGER IFIXED(10)
!        THE INDICATOR VALUES USED TO DESIGNATE WHETHER THE
!        PARAMETERS ARE TO BE OPTIMIZED OR ARE TO BE HELD FIXED.  IF
!        IFIXED(I).NE.0, THEN PAR(I) WILL BE OPTIMIZED.  IF
!        IFIXED(I).EQ.0, THEN PAR(I) WILL BE HELD FIXED.
!        IFIXED(I).LT.0, THEN ALL PAR(I),I=1,NPAR, WILL BE OPTIMIZED..
!     INTEGER IPRT
!        THE UNIT NUMBER FOR PRINTED OUTPUT.
!     INTEGER IVAPRX
!        AN INDICATOR VALUE USED TO DESIGNATE WHICH OPTION IS TO BE USED
!        TO COMPUTE THE VARIANCE COVARIANCE MATRIX (VCV), WHERE
!        IVAPRX LE 0 INDICATES THE THE DEFAULT OPTION WILL BE USED
!        IVAPRX EQ 1 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(HESSIAN)*TRANSPOSE(JACOBIAN)*JACOBIAN
!                          *INVERSE(HESSIAN)
!                    USING BOTH THE MODEL SUBROUTINE THE USER SUPPLIED
!                    DERIVATIVE SUBROUTINE WHEN IT IS AVAILABLE
!        IVAPRX EQ 2 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(HESSIAN)
!                    USING BOTH THE MODEL SUBROUTINE THE USER SUPPLIED
!                    DERIVATIVE SUBROUTINE WHEN IT IS AVAILABLE
!        IVAPRX EQ 3 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(TRANSPOSE(JACOBIAN)*JACOBIAN)
!                    USING BOTH THE MODEL SUBROUTINE THE USER SUPPLIED
!                    DERIVATIVE SUBROUTINE WHEN IT IS AVAILABLE
!        IVAPRX EQ 4 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(HESSIAN)*TRANSPOSE(JACOBIAN)*JACOBIAN
!                          *INVERSE(HESSIAN)
!                    USING ONLY THE MODEL SUBROUTINE
!        IVAPRX EQ 5 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(HESSIAN)
!                    USING ONLY THE MODEL SUBROUTINE
!        IVAPRX EQ 6 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(TRANSPOSE(JACOBIAN)*JACOBIAN)
!                    USING ONLY THE MODEL SUBROUTINE
!        IVAPRX GE 7 INDICATES THE DEFAULT OPTION WILL BE USED
!     INTEGER IVCV
!        THE FIRST DIMENSION OF THE VARIANCE COVARIANCE MATRIX VCV.
!     INTEGER IXM1, IXM3
!        THE FIRST DIMENSION OF THE INDEPENDENT VARIABLE ARRAY.
!     INTEGER LDSA1, LDSN3A
!        THE MINIMUM LENGTH ALLOWED FOR THE ARRAY DSTAK
!        FOR THE ROUTINES WITH ANALYTIC DERIVATIVES AND
!        NUMERICAL DERIVATIVES, RESPECTIVELY.
!     INTEGER LDSMIN
!        THE MINIMUM LENGTH OF THE ARRAY DSTAK ALLOWED.
!     INTEGER LDSTAK
!        THE LENGTH OF THE ARRAY DSTAK.
!     INTEGER M1, M3
!        THE NUMBER OF INDEPENDENT VARIABLES.
!     INTEGER MIT
!        THE MAXIMUM NUMBER OF ITERATIONS ALLOWED.
!     EXTERNAL MDL1, MDL3
!        THE NAME OF THE USER SUPPLIED SUBROUTINE WHICH COMPUTES THE
!        PREDICTED VALUES BASED ON THE CURRENT PARAMETER ESTIMATE.
!     INTEGER N1, N3
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NPARE
!        THE NUMBER OF PARAMETERS ESTIMATED BY THE ROUTINE.
!     INTEGER NPAR1, NPAR3
!        THE NUMBER OF UNKNOWN PARAMETERS IN THE MODEL.
!     INTEGER NNZW
!        THE NUMBER OF NON ZERO WEIGHTS.
!     INTEGER NPRT
!        THE PARAMETER USED TO INDICATE HOW MUCH PRINTED OUTPUT IS
!        TO BE PROVIDED.
!     INTEGER NTEST
!        THE NUMBER OF THE CURRENT TEST.
!     REAL(KIND=WP) :: PAR1(10), PAR3(10)
!        THE ARRAY IN WHICH THE CURRENT ESTIMATES OF THE UNKNOWN
!        PARAMETERS ARE STORED.
!     REAL(KIND=WP) :: PV(100)
!        THE STARTING LOCATION IN RSTAK/DSTAK OF
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!     REAL(KIND=WP) :: RES(100)
!        THE RESIDUALS FROM THE FIT.
!     REAL(KIND=WP) :: RSD
!        THE VALUE OF THE RESIDUAL STANDARD DEVIATION AT THE SOLUTION.
!     REAL(KIND=WP) :: SCALE(10)
!        A VALUE TO INDICATE USE OF THE DEFAULT VALUES OF
!        THE TYPICAL SIZE OF THE UNKNOWN PARAMETERS.
!     REAL(KIND=WP) :: SDPV(100)
!        THE STARTING LOCATION IN RSTAK/DSTAK OF
!        THE STANDARD DEVIATION OF THE PREDICTED VALUE.
!     REAL(KIND=WP) :: SDRES(100)
!        THE STARTING LOCATION IN RSTAK/DSTAK OF THE
!        THE STANDARD DEVIATIONS OF THE RESIDUALS.
!     REAL(KIND=WP) :: STOPP
!        THE STOPPING CRITERION FOR THE TEST BASED ON THE MAXIMUM SCALED
!        RELATIVE CHANGE IN THE ELEMENTS OF THE MODEL PARAMETER VECTOR
!     REAL(KIND=WP) :: STOPSS
!        THE STOPPING CRITERION FOR THE TEST BASED ON THE RATIO OF THE
!        PREDICTED DECREASE IN THE RESIDUAL SUM OF SQUARES (COMPUTED
!        BY STARPAC) TO THE CURRENT RESIDUAL SUM OF SQUARES ESTIMATE.
!     REAL(KIND=WP) :: STP(10)
!        THE RCSTEP SIZE ARRAY.
!     REAL(KIND=WP) :: VCV(6,6)
!        THE COVARIANCE MATRIX.
!     REAL(KIND=WP) :: WT(100)
!        THE USER SUPPLIED WEIGHTS.
!     REAL(KIND=WP) :: XM1(10,2), XM3(101,5)
!        THE ARRAY IN WHICH ONE ROW OF THE INDEPENDENT VARIABLE ARRAY
!        IS STORED.
!     REAL(KIND=WP) :: Y1(10), Y3(100)
!        THE ARRAY OF THE DEPENDENT VARIABLE.
!
!     DEFINE CONSTANTS
!
     data y1(1), y1(2), y1(3), y1(4), y1(5), y1(6)&
     &   /2.138_wp,3.421_wp,3.597_wp,4.340_wp, 4.882_wp,5.660_wp/
!
     data xm1(1,1), xm1(2,1), xm1(3,1), xm1(4,1), xm1(5,1), xm1(6,1)&
     &   /1.309_wp,1.471_wp,1.490_wp, 1.565_wp,1.611_wp,1.680_wp/
!
      data n3 /50/, m3 /5/, ixm3 /101/, npar3 /5/
!
      call iprint(iprt)
!
     call nlsx2(n1, m1, ixm1, npar1, ifixed, stp, idrvck, mit, stopss,&
     &   stopp, scale, delta, ivaprx, nprt, ivcv)
!
      call setrv(wt, n3, 1.0_wp)
!
     call ldscmp(6, 0, 60+2*npar1, 0, 0, 0,&
     &   'D', 94+n1*(3+npar1)+npar1*(3*npar1+35)/2, ldsa1)
     call ldscmp(14, 0, max(2*(n3+npar3),60+2*npar3), 0, 0, 0,&
     &   'D', max(10*n3,94+n3*(3+npar3)+npar3*(3*npar3+37)/2), ldsn3a)
!
      ldsmin = max(ldsa1, ldsn3a)
!
      if (ldsmin.le.ldstak) go to 5
!
      write (iprt, 1190) ldsmin
      return
!
    5 continue
!
      do 20 i=1,n3
         xm3(i,1) = 1.0_wp
         xm3(i,2) = i
         xm3(i,3) = xm3(i,2)*xm3(i,2)
         xm3(i,4) = xm3(i,3)*xm3(i,2)
         xm3(i,5) = xm3(i,4)*xm3(i,2)
         y3(i) = xm3(i,1) + xm3(i,2) + xm3(i,3) + xm3(i,4) + xm3(i,5)
   20 continue
!
      ntest = 0
!
!
!
!     CHECK ERROR HANDLING
!
!        TEST 1  -  PROBLEM SPECIFICATION
!
      n1 = -5
      m1 = -1
      ixm1 = -10
      npar1 = 0
      ivcv = -10
!
      ntest = ntest + 1
      write (iprt,1330) ntest
      write (iprt,1140)
!
      write (iprt,1000)
      call nls(y1, xm1, n1, m1, ixm1, mdl1, par1, npar1, res, ldstak)
      write (iprt,1120) ierr
!
      write (iprt,1010)
     write (iprt,1340) ifixed(1), stp(1), mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
     call nlsc(y1, xm1, n1, m1, ixm1, mdl1, par1, npar1, res, ldstak,&
     &   ifixed, stp, mit, stopss, stopp, scale, delta, ivaprx, nprt)
     write (iprt,1350) ifixed(1), stp(1), mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
      write (iprt,1120) ierr
!
      npar1 = 8
      n1 = 2
      write (iprt,1020)
     write (iprt,1340) ifixed(1), stp(1), mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
     call nlss(y1, xm1, n1, m1, ixm1, mdl1, par1, npar1, res, ldstak,&
    &   ifixed, stp, mit, stopss, stopp, scale, delta, ivaprx, nprt,&
     &   npare, rsd, pv, sdpv, sdres, vcv, ivcv)
     write (iprt,1350) ifixed(1), stp(1), mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
      write (iprt,1120) ierr
!
      write (iprt,1030)
     call nlsw(y1, wt, xm1, n1, m1, ixm1, mdl1, par1, npar1, res,&
     &   ldstak)
      write (iprt,1120) ierr
!
      write (iprt,1040)
     write (iprt,1340) ifixed(1), stp(1), mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
     call nlswc(y1, wt, xm1, n1, m1, ixm1, mdl1, par1, npar1, res,&
    &   ldstak, ifixed, stp, mit, stopss, stopp, scale, delta, ivaprx,&
     &   nprt)
     write (iprt,1350) ifixed(1), stp(1), mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
      write (iprt,1120) ierr
!
      write (iprt,1050)
     write (iprt,1340) ifixed(1), stp(1), mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
     call nlsws(y1, wt, xm1, n1, m1, ixm1, mdl1, par1, npar1, res,&
    &   ldstak, ifixed, stp, mit, stopss, stopp, scale, delta, ivaprx,&
     &   nprt, nnzw, npare, rsd, pv, sdpv, sdres, vcv, ivcv)
     write (iprt,1350) ifixed(1), stp(1), mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
      write (iprt,1120) ierr
!
      write (iprt,1060)
     call nlsd(y1, xm1, n1, m1, ixm1, mdl1, drv1a, par1, npar1, res,&
     &   ldstak)
      write (iprt,1120) ierr
!
      write (iprt,1070)
     write (iprt,1360) ifixed(1), idrvck, mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
     call nlsdc(y1, xm1, n1, m1, ixm1, mdl1, drv1a, par1, npar1, res,&
    &   ldstak, ifixed, idrvck, mit, stopss, stopp, scale, delta,&
     &   ivaprx, nprt)
     write (iprt,1370) ifixed(1), idrvck, mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
      write (iprt,1120) ierr
!
      n1 = 15
      write (iprt,1080)
     write (iprt,1370) ifixed(1), idrvck, mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
     call nlsds(y1, xm1, n1, m1, ixm1, mdl1, drv1a, par1, npar1, res,&
    &   ldstak, ifixed, idrvck, mit, stopss, stopp, scale, delta,&
     &   ivaprx, nprt, npare, rsd, pv, sdpv, sdres, vcv, ivcv)
     write (iprt,1370) ifixed(1), idrvck, mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
      write (iprt,1120) ierr
!
      write (iprt,1090)
     call nlswd(y1, wt, xm1, n1, m1, ixm1, mdl1, drv1a, par1, npar1,&
     &   res, ldstak)
      write (iprt,1120) ierr
!
      write (iprt,1100)
     write (iprt,1360) ifixed(1), idrvck, mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
     call nlswdc(y1, wt, xm1, n1, m1, ixm1, mdl1, drv1a, par1, npar1,&
    &   res, ldstak, ifixed, idrvck, mit, stopss, stopp, scale, delta,&
     &   ivaprx, nprt)
     write (iprt,1370) ifixed(1), idrvck, mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
      write (iprt,1120) ierr
!
      write (iprt,1110)
     write (iprt,1360) ifixed(1), idrvck, mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
     call nlswds(y1, wt, xm1, n1, m1, ixm1, mdl1, drv1a, par1, npar1,&
    &   res, ldstak, ifixed, idrvck, mit, stopss, stopp, scale, delta,&
     &   ivaprx, nprt, nnzw, npare, rsd, pv, sdpv, sdres, vcv, ivcv)
     write (iprt,1370) ifixed(1), idrvck, mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
      write (iprt,1120) ierr
!
!        TEST 2  -  WEIGHTS AND CONTROL VALUES
!
     call nlsx2(n1, m1, ixm1, npar1, ifixed, stp, idrvck, mit, stopss,&
     &   stopp, scale, delta, ivaprx, nprt, ivcv)
!
      wt(n1) = -1.0_wp
      stp(1) = 1.0_wp
      stp(2) = 0.0_wp
      scale(1) = 1.0_wp
      scale(2) = 0.0_wp
      do 30 i=1,npar1
         ifixed(i) = 1
   30 continue
!
      ntest = ntest + 1
      write (iprt,1330) ntest
      write (iprt,1150)
!
      write (iprt,1050)
     write (iprt,1340) ifixed(1), stp(1), mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
     call nlsws(y1, wt, xm1, n1, m1, ixm1, mdl1, par1, npar1, res,&
    &   ldstak, ifixed, stp, mit, stopss, stopp, scale, delta, ivaprx,&
     &   nprt, nnzw, npare, rsd, pv, sdpv, sdres, vcv, ivcv)
     write (iprt,1350) ifixed(1), stp(1), mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
      write (iprt,1120) ierr
!
      write (iprt,1090)
     write (iprt,1360) ifixed(1), idrvck, mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
     call nlswd(y1, wt, xm1, n1, m1, ixm1, mdl1, drv1a, par1, npar1,&
     &   res, ldstak)
     call nlswds(y1, wt, xm1, n1, m1, ixm1, mdl1, drv1a, par1, npar1,&
    &   res, ldstak, ifixed, idrvck, mit, stopss, stopp, scale, delta,&
     &   ivaprx, nprt, nnzw, npare, rsd, pv, sdpv, sdres, vcv, ivcv)
     write (iprt,1370) ifixed(1), idrvck, mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
      write (iprt,1120) ierr
!
!
!        TEST 3  -  TOO FEW POSITIVE WEIGHTS
!
     call nlsx2(n1, m1, ixm1, npar1, ifixed, stp, idrvck, mit, stopss,&
     &   stopp, scale, delta, ivaprx, nprt, ivcv)
!
      call setrv(wt(2), n1-1, 0.0_wp)
!
      ntest = ntest + 1
      write (iprt,1330) ntest
      write (iprt,1160)
!
      write (iprt,1030)
     call nlsw(y1, wt, xm1, n1, m1, ixm1, mdl1, par1, npar1, res,&
     &   ldstak)
      write (iprt,1120) ierr
!
      write (iprt,1110)
     call nlswds(y1, wt, xm1, n1, m1, ixm1, mdl1, drv1a, par1, npar1,&
    &   res, ldstak, ifixed, idrvck, mit, stopss, stopp, scale, delta,&
     &   ivaprx, nprt, nnzw, npare, rsd, pv, sdpv, sdres, vcv, ivcv)
      write (iprt,1120) ierr
!
!
!        TEST 4  -  DEFINITE ERROR IN DERIVATIVE
!
     call nlsx2(n1, m1, ixm1, npar1, ifixed, stp, idrvck, mit, stopss,&
     &   stopp, scale, delta, ivaprx, nprt, ivcv)
!
      call setrv(wt, n1, 1.0_wp)
!
      ntest = ntest + 1
      write (iprt,1330) ntest
      write (iprt,1170)
!
      write (iprt,1060)
     call nlsx1(1, par1, npar1, pv, sdpv, res, sdres, vcv, n1, ivcv,&
     &   nnzw, npare, rsd)
     call nlsd(y1, xm1, n1, m1, ixm1, mdl1, drv1b, par1, npar1, res,&
     &   ldstak)
      write (iprt,1120) ierr
!
!
!        TEST 5  -  POSSIBLE ERROR IN DERIVATIVE
!
     call nlsx2(n1, m1, ixm1, npar1, ifixed, stp, idrvck, mit, stopss,&
     &   stopp, scale, delta, ivaprx, nprt, ivcv)
      idrvck = 1
      nprt = 10000
!
      call setrv(wt, n1, 1.0_wp)
!
      ntest = ntest + 1
      write (iprt,1330) ntest
      write (iprt,1180)
     call nlsx1(1, par1, npar1, pv, sdpv, res, sdres, vcv, n1, ivcv,&
     &   nnzw, npare, rsd)
      par1(1) = 0.0_wp
      write (iprt,1070)
     write (iprt,1360) ifixed(1), idrvck, mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
     call nlsdc(y1, xm1, n1, m1, ixm1, mdl1, drv1a, par1, npar1, res,&
    &   ldstak, ifixed, idrvck, mit, stopss, stopp, scale, delta,&
     &   ivaprx, nprt)
     write (iprt,1370) ifixed(1), idrvck, mit, stopss, stopp,&
     &   scale(1), delta, ivaprx, nprt
      write (iprt,1120) ierr
!
!
!        TEST 6 -  INSUFFICIENT WORK AREA LENGTH
!
      ntest = ntest + 1
      write (iprt,1330) ntest
      write (iprt,1230)
     call nlsx2(n1, m1, ixm1, npar1, ifixed, stp, idrvck, mit, stopss,&
     &   stopp, scale, delta, ivaprx, nprt, ivcv)
!
      write (iprt,1000)
     call nlsx1(3, par3, npar3, pv, sdpv, res, sdres, vcv, n3, ivcv,&
     &   nnzw, npare, rsd)
      call nls(y3, xm3, n3, m3, ixm3, mdl3, par3, npar3, res, ldsn3a-1)
      write (iprt,1120) ierr
!
      write (iprt,1090)
     call nlsx1(1, par1, npar1, pv, sdpv, res, sdres, vcv, n3, ivcv,&
     &   nnzw, npare, rsd)
     call nlswd(y1, wt, xm1, n1, m1, ixm1, mdl1, drv1a, par1, npar1,&
     &   res, ldsa1-1)
      write (iprt,1120) ierr
!
!
      return
!
!     FORMAT STATEMENTS
!
 1000 format (14h test of nls  )
 1010 format (15h test of nlsc  )
 1020 format (15h test of nlss  )
 1030 format (14h test of nlsw )
 1040 format (15h test of nlswc )
 1050 format (15h test of nlsws )
 1060 format (14h test of nlsd )
 1070 format (15h test of nlsdc )
 1080 format (15h test of nlsds )
 1090 format (14h test of nlswd)
 1100 format (15h test of nlswdc)
 1110 format (15h test of nlswds)
1120 format (/29h ***** returned results *****, 5x, 15h (-1 indicates ,&
     &   39hvalue not changed by called subroutine)//9h ierr is , i3)
 1140 format (46h error handling test 1 - problem specification)
 1150 format (51h error handling test 2 - weights and control values)
 1160 format (49h error handling test 3 - too few positive weights)
 1170 format (53h error handling test 4 - definite error in derivative)
 1180 format (53h error handling test 5 - possible error in derivative)
 1190 format (45h1 *** ldstak must be greater than or equal to , i6)
 1230 format (' ERROR HANDLING TEST 6 - INSUFFICIENT WORK AREA LENGTH')
1330 format (54h1nonlinear least squares estimation subroutine test nu,&
     &   4hmber, i5/)
1340 format (24h input   -  ifixed(1) = , i6, 9x, 11h, stp(1) = ,&
    &   g15.8, 11h,    mit = ,i5, 11h, stopss = , g15.8, 10h, stopp = ,&
    &   g15.8/13x, 11hscale(1) = , g15.8, 11h,  delta = , g15.8,&
     &   11h, ivaprx = , i5, 11h,   nprt = , i5)
1350 format (//24h output  -  ifixed(1) = , i6, 9x, 11h, stp(1) = ,&
    &   g15.8, 11h,    mit = ,i5, 11h, stopss = , g15.8, 10h, stopp = ,&
    &   g15.8/13x, 11hscale(1) = , g15.8, 11h,  delta = , g15.8,&
     &   11h, ivaprx = , i5, 11h,   nprt = , i5//)
1360 format (24h input   -  ifixed(1) = , i6, 9x, 11h, idrvck = ,&
    &   i5, 10x, 11h,    mit = ,i5, 11h, stopss = , g15.8,&
    &   10h, stopp = , g15.8/&
    &   13x, 11hscale(1) = , g15.8, 11h,  delta = , g15.8,&
     &   11h, ivaprx = , i5, 11h,   nprt = , i6)
1370 format (//24h output  -  ifixed(1) = , i6, 9x, 11h, idrvck = ,&
    &   i5, 10x, 11h,    mit = ,i5, 11h, stopss = , g15.8,&
    &   10h, stopp = , g15.8/&
    &   13x, 11hscale(1) = , g15.8, 11h,  delta = , g15.8,&
     &   11h, ivaprx = , i5, 11h,   nprt = , i5//)
      end
