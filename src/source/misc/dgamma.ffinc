!DGAMMA
      double precision function dgamma (x)
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      double precision x
!
!  LOCAL SCALARS
      double precision dxrel,pi,sinpiy,sq2pil,xmax,xmin,y
      integer i,n,ngam
!
!  LOCAL ARRAYS
      double precision gamcs(42)
!
!  EXTERNAL FUNCTIONS
!      DOUBLE PRECISION D1MACH,D9LGMC,DCSEVL
!      INTEGER INITDS
!       EXTERNAL D1MACH,D9LGMC,DCSEVL,INITDS
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL DGAMLM,XERROR
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,dble,dsqrt,exp,float,int,log,sin,sngl
!
!
! SERIES FOR GAM        ON THE INTERVAL  0.          TO  1.00000E+00
!                                        WITH WEIGHTED ERROR   5.79E-32
!                                         LOG WEIGHTED ERROR  31.24
!                               SIGNIFICANT FIGURES REQUIRED  30.00
!                                    DECIMAL PLACES REQUIRED  32.05
!
      data gamcs(  1) / +.8571195590989331421920062399942d-2      /
      data gamcs(  2) / +.4415381324841006757191315771652d-2      /
      data gamcs(  3) / +.5685043681599363378632664588789d-1      /
      data gamcs(  4) / -.4219835396418560501012500186624d-2      /
      data gamcs(  5) / +.1326808181212460220584006796352d-2      /
      data gamcs(  6) / -.1893024529798880432523947023886d-3      /
      data gamcs(  7) / +.3606925327441245256578082217225d-4      /
      data gamcs(  8) / -.6056761904460864218485548290365d-5      /
      data gamcs(  9) / +.1055829546302283344731823509093d-5      /
      data gamcs( 10) / -.1811967365542384048291855891166d-6      /
      data gamcs( 11) / +.3117724964715322277790254593169d-7      /
      data gamcs( 12) / -.5354219639019687140874081024347d-8      /
      data gamcs( 13) / +.9193275519859588946887786825940d-9      /
      data gamcs( 14) / -.1577941280288339761767423273953d-9      /
      data gamcs( 15) / +.2707980622934954543266540433089d-10     /
      data gamcs( 16) / -.4646818653825730144081661058933d-11     /
      data gamcs( 17) / +.7973350192007419656460767175359d-12     /
      data gamcs( 18) / -.1368078209830916025799499172309d-12     /
      data gamcs( 19) / +.2347319486563800657233471771688d-13     /
      data gamcs( 20) / -.4027432614949066932766570534699d-14     /
      data gamcs( 21) / +.6910051747372100912138336975257d-15     /
      data gamcs( 22) / -.1185584500221992907052387126192d-15     /
      data gamcs( 23) / +.2034148542496373955201026051932d-16     /
      data gamcs( 24) / -.3490054341717405849274012949108d-17     /
      data gamcs( 25) / +.5987993856485305567135051066026d-18     /
      data gamcs( 26) / -.1027378057872228074490069778431d-18     /
      data gamcs( 27) / +.1762702816060529824942759660748d-19     /
      data gamcs( 28) / -.3024320653735306260958772112042d-20     /
      data gamcs( 29) / +.5188914660218397839717833550506d-21     /
      data gamcs( 30) / -.8902770842456576692449251601066d-22     /
      data gamcs( 31) / +.1527474068493342602274596891306d-22     /
      data gamcs( 32) / -.2620731256187362900257328332799d-23     /
      data gamcs( 33) / +.4496464047830538670331046570666d-24     /
      data gamcs( 34) / -.7714712731336877911703901525333d-25     /
      data gamcs( 35) / +.1323635453126044036486572714666d-25     /
      data gamcs( 36) / -.2270999412942928816702313813333d-26     /
      data gamcs( 37) / +.3896418998003991449320816639999d-27     /
      data gamcs( 38) / -.6685198115125953327792127999999d-28     /
      data gamcs( 39) / +.1146998663140024384347613866666d-28     /
      data gamcs( 40) / -.1967938586345134677295103999999d-29     /
      data gamcs( 41) / +.3376448816585338090334890666666d-30     /
      data gamcs( 42) / -.5793070335782135784625493333333d-31     /
!
      data pi / 3.14159265358979323846264338327950d0 /
! SQ2PIL IS 0.5*LOG(2*PI) = LOG(SQRT(2*PI))
      data sq2pil / 0.91893853320467274178032973640562d0 /
      data ngam, xmin, xmax, dxrel / 0, 3*0.d0 /
!
      if (ngam.ne.0) go to 10
      ngam = initds (gamcs, 42, 0.1*sngl(d1mach(3)) )
!
      call dgamlm (xmin, xmax)
      dxrel = dsqrt (d1mach(4))
!
 10   y = abs(x)
      if (y.gt.10.d0) go to 50
!
! COMPUTE GAMMA(X) FOR -XBND .LE. X .LE. XBND.  REDUCE INTERVAL AND FIND
! GAMMA(1+Y) FOR 0.0 .LE. Y .LT. 1.0 FIRST OF ALL.
!
      n = x
      if (x.lt.0.d0) n = n - 1
      y = x - dble(float(n))
      n = n - 1
      dgamma = 0.9375d0 + dcsevl (2.d0*y-1.d0, gamcs, ngam)
      if (n.eq.0) return
!
      if (n.gt.0) go to 30
!
! COMPUTE GAMMA(X) FOR X .LT. 1.0
!
      n = -n
      if (x.eq.0.d0) call xerror ('DGAMMA  X IS 0', 14, 4, 2)
     if (x.lt.0.0 .and. x+dble(float(n-2)).eq.0.d0) call xerror (&
     &  'DGAMMA  X IS A NEGATIVE INTEGER', 31, 4, 2)
     if (x.lt.(-0.5d0) .and. abs((x-int(x-0.5d0))/x).lt.dxrel) call&
    &  xerror (  'DGAMMA  ANSWER LT HALF PRECISION BECAUSE X TOO NEAR N&
     &EGATIVE INTEGER', 68, 1, 1)
!
      do 20 i=1,n
        dgamma = dgamma/(x+dble(float(i-1)) )
 20   continue
      return
!
! GAMMA(X) FOR X .GE. 2.0 AND X .LE. 10.0
!
 30   do 40 i=1,n
        dgamma = (y+dble(float(i))) * dgamma
 40   continue
      return
!
! GAMMA(X) FOR ABS(X) .GT. 10.0.  RECALL Y = ABS(X).
!
50   if (x.gt.xmax) call xerror ('DGAMMA  X SO BIG GAMMA OVERFLOWS',&
     &  32, 3, 2)
!
      dgamma = 0.d0
     if (x.lt.xmin) call xerror ('DGAMMA  X SO SMALL GAMMA UNDERFLOWS',&
     &  35, 2, 1)
      if (x.lt.xmin) return
!
      dgamma = exp ((y-0.5d0)*log(y) - y + sq2pil + d9lgmc(y) )
      if (x.gt.0.d0) return
!
     if (abs((x-int(x-0.5d0))/x).lt.dxrel) call xerror (&
    &  'DGAMMA  ANSWER LT HALF PRECISION, X TOO NEAR NEGATIVE INTEGER',&
     &  61, 1, 1)
!
      sinpiy = sin (pi*y)
     if (sinpiy.eq.0.d0) call xerror (&
     &  'DGAMMA  X IS A NEGATIVE INTEGER', 31, 4, 2)
!
      dgamma = -pi/(y*sinpiy*dgamma)
!
      return
      end
