!BETAI
      real function betai (x, pin, qin)
! APRIL 1977 VERSION.  W. FULLERTON, C3, LOS ALAMOS SCIENTIFIC LAB.
! BASED ON BOSTEN AND BATTISTE, REMARK ON ALGORITHM 179, COMM. ACM,
! V 17, P 153, (1974).
!
! X   VALUE TO WHICH FUNCTION IS TO BE INTEGRATED. X MUST BE IN (0,1).
! P   INPUT (1ST) PARAMETER (MUST BE GREATER THAN 0)
! Q   INPUT (2ND) PARAMETER (MUST BE GREATER THAN 0)
! BETAI  INCOMPLETE BETA FUNCTION RATIO, THE PROBABILITY THAT A RANDOM
!        VARIABLE FROM A BETA DISTRIBUTION HAVING PARAMETERS P AND Q
!        WILL BE LESS THAN OR EQUAL TO X.
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      real pin,qin,x
!
!  LOCAL SCALARS
      real alneps,alnsml,c,eps,fac1,fac2,finsum,p,p1,ps,q,sml,term,xb,y
      integer i,ib,n
!
!  EXTERNAL FUNCTIONS
!      REAL ALBETA,R1MACH
!       EXTERNAL ALBETA,R1MACH
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL XERROR
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,aint,exp,float,log,max,min,real
!
      data             eps, alneps, sml, alnsml / 4*0.0 /
!
      if (eps.ne.0.) go to 10
      eps = r1mach(3)
      alneps = log(eps)
      sml = r1mach(1)
      alnsml = log(sml)
!
10   if (x.lt.0. .or. x.gt.1.0) call xerror (&
     &  'BETAI   X IS NOT IN THE RANGE (0,1)', 35, 1, 2)
     if (pin.le.0. .or. qin.le.0.) call xerror (&
     &  'BETAI   P AND/OR Q IS LE ZERO', 29, 2, 2)
!
      y = x
      p = pin
      q = qin
      if (q.le.p .and. x.lt.0.8) go to 20
      if (x.lt.0.2) go to 20
      y = 1.0 - y
      p = qin
      q = pin
!
 20   if ((p+q)*y/(p+1.).lt.eps) go to 80
!
! EVALUATE THE INFINITE SUM FIRST.
! TERM WILL EQUAL Y**P/BETA(PS,P) * (1.-PS)I * Y**I / FAC(I)
!
      ps = q - aint(q)
      if (ps.eq.0.) ps = 1.0
      xb = p*log(y) -  albeta(ps, p) - log(p)
      betai = 0.0
      if (xb.ge.alnsml) then
         betai = exp(xb)
         fac2 = 1.0
         if (ps.ne.1.0e0) then
            fac1 = 1.0
            n = max(alneps/log(y), 4.0e0)
            do 30 i=1,n
               if ((i-ps.eq.0.0e0) .or. (fac1.eq.0.0e0)) then
                  fac1 = 0.0e0
               else
                 if (log(abs(fac1)) + log(abs(i-ps)) + log(y) -&
     &                log(real(i)) .lt. alnsml) then
                     fac1 = 0.0e0
                  else
                     fac1 = fac1 * (i-ps)*y/i
                  end if
               end if
               fac2 = fac2 + fac1*p/(p+i)
 30         continue
         end if
         betai = betai*fac2
      end if
!
! NOW EVALUATE THE FINITE SUM, MAYBE.
!
      if (q.le.1.0) go to 70
!
      xb = p*log(y) + q*log(1.0-y) - albeta(p,q) - log(q)
      ib = max (xb/alnsml, 0.0)
      term = exp (xb - float(ib)*alnsml)
      c = 1.0/(1.0-y)
      p1 = q*c/(p+q-1.)
!
      finsum = 0.0
      n = q
      if (q.eq.float(n)) n = n - 1
      do 50 i=1,n
        if (p1.le.1.0 .and. term/eps.le.finsum) go to 60
        if (q-i+1.0e0 .eq. 0.0e0) then
          term = 0.0e0
        else
         if (log(abs(q-i+1.0e0)) + log(abs(c)) + log(abs(term)) -&
     &        log(abs(p+q-i)) .lt. alnsml) then
            term = 0.0e0
          else
            term = (q-i+1.0e0)*c*term/(p+q-i)
          end if
        end if
!
        if (term.gt.1.0) ib = ib - 1
        if (term.gt.1.0) term = term*sml
!
        if (ib.eq.0) finsum = finsum + term
 50   continue
!
 60   betai = betai + finsum
 70   if (y.ne.x .or. p.ne.pin) betai = 1.0 - betai
      betai = max (min (betai, 1.0), 0.0)
      return
!
 80   betai = 0.0
      xb = p*log(max(y,sml)) - log(p) - albeta(p,q)
      if (xb.gt.alnsml .and. y.ne.0.) betai = exp (xb)
      if (y.ne.x .or. p.ne.pin) betai = 1.0 - betai
      return
!
      end
