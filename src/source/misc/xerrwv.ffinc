!XERRWV
      subroutine xerrwv(messg,nmessg,nerr,level,ni,i1,i2,nr,r1,r2)
!
!     ABSTRACT
!        XERRWV PROCESSES A DIAGNOSTIC MESSAGE, IN A MANNER
!        DETERMINED BY THE VALUE OF LEVEL AND THE CURRENT VALUE
!        OF THE LIBRARY ERROR CONTROL FLAG, KONTRL.
!        (SEE SUBROUTINE XSETF FOR DETAILS.)
!        IN ADDITION, UP TO TWO INTEGER VALUES AND TWO REAL
!        VALUES MAY BE PRINTED ALONG WITH THE MESSAGE.
!
!     DESCRIPTION OF PARAMETERS
!      --INPUT--
!        MESSG - THE HOLLERITH MESSAGE TO BE PROCESSED.
!        NMESSG- THE ACTUAL NUMBER OF CHARACTERS IN MESSG.
!        NERR  - THE ERROR NUMBER ASSOCIATED WITH THIS MESSAGE.
!                NERR MUST NOT BE ZERO.
!        LEVEL - ERROR CATEGORY.
!                =2 MEANS THIS IS AN UNCONDITIONALLY FATAL ERROR.
!                =1 MEANS THIS IS A RECOVERABLE ERROR.  (I.E., IT IS
!                   NON-FATAL IF XSETF HAS BEEN APPROPRIATELY CALLED.)
!                =0 MEANS THIS IS A WARNING MESSAGE ONLY.
!                =-1 MEANS THIS IS A WARNING MESSAGE WHICH IS TO BE
!                   PRINTED AT MOST ONCE, REGARDLESS OF HOW MANY
!                   TIMES THIS CALL IS EXECUTED.
!        NI    - NUMBER OF INTEGER VALUES TO BE PRINTED. (O TO 2)
!        I1    - FIRST INTEGER VALUE.
!        I2    - SECOND INTEGER VALUE.
!        NR    - NUMBER OF REAL VALUES TO BE PRINTED. (0 TO 2)
!        R1    - FIRST REAL VALUE.
!        R2    - SECOND REAL VALUE.
!
!     EXAMPLES
!        CALL XERROR('SMOOTH -- NUM (=I1) WAS ZERO.',29,1,2,
!    &   1,NUM,0,0,0.,0.)
!        CALL XERRWV(  'QUADXY -- REQUESTED ERROR (R1) LESS THAN MINIMUM
!    & (R2).',54,77,1,0,0,0,2,ERRREQ,ERRMIN)
!
!     WRITTEN BY RON JONES, WITH SLATEC COMMON MATH LIBRARY SUBCOMMITTEE
!     LATEST REVISION ---  19 MAR 1980
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      real r1,r2
      integer i1,i2,level,nerr,ni,nmessg,nr
!
!  ARRAY ARGUMENTS
      character messg(nmessg)*4
!
!  LOCAL SCALARS
     integer ifatal,iunit,junk,kdummy,kount,kunit,lerr,lkntrl,llevel,&
     &   lmessg,maxmes,mkntrl,nunit
      character lfirst*4
!
!  LOCAL ARRAYS
      integer lun(5)
!
!  EXTERNAL FUNCTIONS
!      INTEGER I1MACH,J4SAVE
!       EXTERNAL I1MACH,J4SAVE
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL FDUMP,XERABT,XERCTL,XERPRT,XERSAV,XGETUA
!
!  INTRINSIC FUNCTIONS
      intrinsic iabs,max,min
!
!     GET FLAGS
      lkntrl = j4save(2,0,.false.)
      maxmes = j4save(4,0,.false.)
!     CHECK FOR VALID INPUT
     if ((nmessg.gt.0).and.(nerr.ne.0).and.&
     &    (level.ge.(-1)).and.(level.le.2)) go to 10
         if (lkntrl.gt.0) call xerprt('FATAL ERROR IN...',17)
         call xerprt('XERROR -- INVALID INPUT',23)
         if (lkntrl.gt.0) call fdump
        if (lkntrl.gt.0) call xerprt('JOB ABORT DUE TO FATAL ERROR.',&
     &   29)
         if (lkntrl.gt.0) call xersav('    ',0,0,0,kdummy)
         call xerabt('XERROR -- INVALID INPUT',23)
         return
   10 continue
!     RECORD MESSAGE
      junk = j4save(1,nerr,.true.)
      call xersav(messg,nmessg,nerr,level,kount)
!     LET USER OVERRIDE
      lfirst = messg(1)
      lmessg = nmessg
      lerr = nerr
      llevel = level
      call xerctl(lfirst,lmessg,lerr,llevel,lkntrl)
!     RESET TO ORIGINAL VALUES
      lmessg = nmessg
      lerr = nerr
      llevel = level
      lkntrl = max(-2,min(2,lkntrl))
      mkntrl = iabs(lkntrl)
!     DECIDE WHETHER TO PRINT MESSAGE
      if ((llevel.lt.2).and.(lkntrl.eq.0)) go to 100
     if (((llevel.eq.(-1)).and.(kount.gt.min(1,maxmes)))&
    &.or.((llevel.eq.0)   .and.(kount.gt.maxmes))&
    &.or.((llevel.eq.1)   .and.(kount.gt.maxmes).and.(mkntrl.eq.1))&
     &.or.((llevel.eq.2)   .and.(kount.gt.max(1,maxmes)))) go to 100
         if (lkntrl.le.0) go to 20
            call xerprt('    ',1)
!           INTRODUCTION
           if (llevel.eq.(-1)) call xerprt&
     &('WARNING MESSAGE...THIS MESSAGE WILL ONLY BE PRINTED ONCE.',57)
            if (llevel.eq.0) call xerprt('WARNING IN...',13)
           if (llevel.eq.1) call xerprt&
     &      ('RECOVERABLE ERROR IN...',23)
            if (llevel.eq.2) call xerprt('FATAL ERROR IN...',17)
   20    continue
!        MESSAGE
         call xerprt(messg,lmessg)
         call xgetua(lun,nunit)
         do 50 kunit=1,nunit
            iunit = lun(kunit)
            if (iunit.eq.0) iunit = i1mach(4)
            if (ni.ge.1) write (iunit,22) i1
            if (ni.ge.2) write (iunit,23) i2
            if (nr.ge.1) write (iunit,24) r1
            if (nr.ge.2) write (iunit,25) r2
   22       format (11x,'IN ABOVE MESSAGE, I1=',i10)
   23       format (11x,'IN ABOVE MESSAGE, I2=',i10)
   24       format (11x,'IN ABOVE MESSAGE, R1=',e20.10)
   25       format (11x,'IN ABOVE MESSAGE, R2=',e20.10)
            if (lkntrl.le.0) go to 40
!              ERROR NUMBER
               write (iunit,30) lerr
   30          format (' ERROR NUMBER =',i10)
   40       continue
   50    continue
!        TRACE-BACK
         if (lkntrl.gt.0) call fdump
  100 continue
      ifatal = 0
     if ((llevel.eq.2).or.((llevel.eq.1).and.(mkntrl.eq.2)))&
     &ifatal = 1
!     QUIT HERE IF MESSAGE IS NOT FATAL
      if (ifatal.le.0) return
      if ((lkntrl.le.0).or.(kount.gt.max(1,maxmes))) go to 120
!        PRINT REASON FOR ABORT
        if (llevel.eq.1) call xerprt&
     &   ('JOB ABORT DUE TO UNRECOVERED ERROR.',35)
        if (llevel.eq.2) call xerprt&
     &   ('JOB ABORT DUE TO FATAL ERROR.',29)
!        PRINT ERROR SUMMARY
         call xersav('    ',-1,0,0,kdummy)
  120 continue
!     ABORT
      if ((llevel.eq.2).and.(kount.gt.max(1,maxmes))) lmessg = 0
      call xerabt(messg,lmessg)
      return
      end
