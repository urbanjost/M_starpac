!XERRWV
      SUBROUTINE XERRWV(MESSG,NMESSG,NERR,LEVEL,NI,I1,I2,NR,R1,R2)
!
!     ABSTRACT
!        XERRWV PROCESSES A DIAGNOSTIC MESSAGE, IN A MANNER
!        DETERMINED BY THE VALUE OF LEVEL AND THE CURRENT VALUE
!        OF THE LIBRARY ERROR CONTROL FLAG, KONTRL.
!        (SEE SUBROUTINE XSETF FOR DETAILS.)
!        IN ADDITION, UP TO TWO INTEGER VALUES AND TWO REAL
!        VALUES MAY BE PRINTED ALONG WITH THE MESSAGE.
!
!     DESCRIPTION OF PARAMETERS
!      --INPUT--
!        MESSG - THE HOLLERITH MESSAGE TO BE PROCESSED.
!        NMESSG- THE ACTUAL NUMBER OF CHARACTERS IN MESSG.
!        NERR  - THE ERROR NUMBER ASSOCIATED WITH THIS MESSAGE.
!                NERR MUST NOT BE ZERO.
!        LEVEL - ERROR CATEGORY.
!                =2 MEANS THIS IS AN UNCONDITIONALLY FATAL ERROR.
!                =1 MEANS THIS IS A RECOVERABLE ERROR.  (I.E., IT IS
!                   NON-FATAL IF XSETF HAS BEEN APPROPRIATELY CALLED.)
!                =0 MEANS THIS IS A WARNING MESSAGE ONLY.
!                =-1 MEANS THIS IS A WARNING MESSAGE WHICH IS TO BE
!                   PRINTED AT MOST ONCE, REGARDLESS OF HOW MANY
!                   TIMES THIS CALL IS EXECUTED.
!        NI    - NUMBER OF INTEGER VALUES TO BE PRINTED. (O TO 2)
!        I1    - FIRST INTEGER VALUE.
!        I2    - SECOND INTEGER VALUE.
!        NR    - NUMBER OF REAL VALUES TO BE PRINTED. (0 TO 2)
!        R1    - FIRST REAL VALUE.
!        R2    - SECOND REAL VALUE.
!
!     EXAMPLES
!        CALL XERROR('SMOOTH -- NUM (=I1) WAS ZERO.',29,1,2,
!    1   1,NUM,0,0,0.,0.)
!        CALL XERRWV(  'QUADXY -- REQUESTED ERROR (R1) LESS THAN MINIMUM
!    1 (R2).',54,77,1,0,0,0,2,ERRREQ,ERRMIN)
!
!     WRITTEN BY RON JONES, WITH SLATEC COMMON MATH LIBRARY SUBCOMMITTEE
!     LATEST REVISION ---  19 MAR 1980
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      REAL R1,R2
      INTEGER I1,I2,LEVEL,NERR,NI,NMESSG,NR
!
!  ARRAY ARGUMENTS
      CHARACTER MESSG(NMESSG)*4
!
!  LOCAL SCALARS
      INTEGER IFATAL,IUNIT,JUNK,KDUMMY,KOUNT,KUNIT,LERR,LKNTRL,LLEVEL,
     +   LMESSG,MAXMES,MKNTRL,NUNIT
      CHARACTER LFIRST*4
!
!  LOCAL ARRAYS
      INTEGER LUN(5)
!
!  EXTERNAL FUNCTIONS
      INTEGER I1MACH,J4SAVE
      EXTERNAL I1MACH,J4SAVE
!
!  EXTERNAL SUBROUTINES
      EXTERNAL FDUMP,XERABT,XERCTL,XERPRT,XERSAV,XGETUA
!
!  INTRINSIC FUNCTIONS
      INTRINSIC IABS,MAX,MIN
!
!     GET FLAGS
      LKNTRL = J4SAVE(2,0,.FALSE.)
      MAXMES = J4SAVE(4,0,.FALSE.)
!     CHECK FOR VALID INPUT
      IF ((NMESSG.GT.0).AND.(NERR.NE.0).AND.
     1    (LEVEL.GE.(-1)).AND.(LEVEL.LE.2)) GO TO 10
         IF (LKNTRL.GT.0) CALL XERPRT('FATAL ERROR IN...',17)
         CALL XERPRT('XERROR -- INVALID INPUT',23)
         IF (LKNTRL.GT.0) CALL FDUMP
         IF (LKNTRL.GT.0) CALL XERPRT('JOB ABORT DUE TO FATAL ERROR.',
     1   29)
         IF (LKNTRL.GT.0) CALL XERSAV(' ',0,0,0,KDUMMY)
         CALL XERABT('XERROR -- INVALID INPUT',23)
         RETURN
   10 CONTINUE
!     RECORD MESSAGE
      JUNK = J4SAVE(1,NERR,.TRUE.)
      CALL XERSAV(MESSG,NMESSG,NERR,LEVEL,KOUNT)
!     LET USER OVERRIDE
      LFIRST = MESSG(1)
      LMESSG = NMESSG
      LERR = NERR
      LLEVEL = LEVEL
      CALL XERCTL(LFIRST,LMESSG,LERR,LLEVEL,LKNTRL)
!     RESET TO ORIGINAL VALUES
      LMESSG = NMESSG
      LERR = NERR
      LLEVEL = LEVEL
      LKNTRL = MAX(-2,MIN(2,LKNTRL))
      MKNTRL = IABS(LKNTRL)
!     DECIDE WHETHER TO PRINT MESSAGE
      IF ((LLEVEL.LT.2).AND.(LKNTRL.EQ.0)) GO TO 100
      IF (((LLEVEL.EQ.(-1)).AND.(KOUNT.GT.MIN(1,MAXMES)))
     1.OR.((LLEVEL.EQ.0)   .AND.(KOUNT.GT.MAXMES))
     2.OR.((LLEVEL.EQ.1)   .AND.(KOUNT.GT.MAXMES).AND.(MKNTRL.EQ.1))
     3.OR.((LLEVEL.EQ.2)   .AND.(KOUNT.GT.MAX(1,MAXMES)))) GO TO 100
         IF (LKNTRL.LE.0) GO TO 20
            CALL XERPRT(' ',1)
!           INTRODUCTION
            IF (LLEVEL.EQ.(-1)) CALL XERPRT
     1('WARNING MESSAGE...THIS MESSAGE WILL ONLY BE PRINTED ONCE.',57)
            IF (LLEVEL.EQ.0) CALL XERPRT('WARNING IN...',13)
            IF (LLEVEL.EQ.1) CALL XERPRT
     1      ('RECOVERABLE ERROR IN...',23)
            IF (LLEVEL.EQ.2) CALL XERPRT('FATAL ERROR IN...',17)
   20    CONTINUE
!        MESSAGE
         CALL XERPRT(MESSG,LMESSG)
         CALL XGETUA(LUN,NUNIT)
         DO 50 KUNIT=1,NUNIT
            IUNIT = LUN(KUNIT)
            IF (IUNIT.EQ.0) IUNIT = I1MACH(4)
            IF (NI.GE.1) WRITE (IUNIT,22) I1
            IF (NI.GE.2) WRITE (IUNIT,23) I2
            IF (NR.GE.1) WRITE (IUNIT,24) R1
            IF (NR.GE.2) WRITE (IUNIT,25) R2
   22       FORMAT (11X,'IN ABOVE MESSAGE, I1=',I10)
   23       FORMAT (11X,'IN ABOVE MESSAGE, I2=',I10)
   24       FORMAT (11X,'IN ABOVE MESSAGE, R1=',E20.10)
   25       FORMAT (11X,'IN ABOVE MESSAGE, R2=',E20.10)
            IF (LKNTRL.LE.0) GO TO 40
!              ERROR NUMBER
               WRITE (IUNIT,30) LERR
   30          FORMAT (' ERROR NUMBER =',I10)
   40       CONTINUE
   50    CONTINUE
!        TRACE-BACK
         IF (LKNTRL.GT.0) CALL FDUMP
  100 CONTINUE
      IFATAL = 0
      IF ((LLEVEL.EQ.2).OR.((LLEVEL.EQ.1).AND.(MKNTRL.EQ.2)))
     1IFATAL = 1
!     QUIT HERE IF MESSAGE IS NOT FATAL
      IF (IFATAL.LE.0) RETURN
      IF ((LKNTRL.LE.0).OR.(KOUNT.GT.MAX(1,MAXMES))) GO TO 120
!        PRINT REASON FOR ABORT
         IF (LLEVEL.EQ.1) CALL XERPRT
     1   ('JOB ABORT DUE TO UNRECOVERED ERROR.',35)
         IF (LLEVEL.EQ.2) CALL XERPRT
     1   ('JOB ABORT DUE TO FATAL ERROR.',29)
!        PRINT ERROR SUMMARY
         CALL XERSAV(' ',-1,0,0,KDUMMY)
  120 CONTINUE
!     ABORT
      IF ((LLEVEL.EQ.2).AND.(KOUNT.GT.MAX(1,MAXMES))) LMESSG = 0
      CALL XERABT(MESSG,LMESSG)
      RETURN
      END
