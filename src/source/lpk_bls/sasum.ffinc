!SASUM
      real function sasum(n,sx,incx)
!***BEGIN PROLOGUE  SASUM
!***DATE WRITTEN   791001   (YYMMDD)
!***REVISION DATE  820801   (YYMMDD)
!***CATEGORY NO.  D1A3A
!***KEYWORDS  ADD,BLAS,LINEAR ALGEBRA,MAGNITUDE,SUM,VECTOR
!***AUTHOR  LAWSON, C. L., (JPL)
!           HANSON, R. J., (SNLA)
!           KINCAID, D. R., (U. OF TEXAS)
!           KROGH, F. T., (JPL)
!***PURPOSE  SUM OF MAGNITUDES OF S.P VECTOR COMPONENTS
!***DESCRIPTION
!                B L A S  SUBPROGRAM
!    DESCRIPTION OF PARAMETERS
!     --INPUT--
!        N  NUMBER OF ELEMENTS IN INPUT VECTOR(S)
!       SX  SINGLE PRECISION VECTOR WITH N ELEMENTS
!     INCX  STORAGE SPACING BETWEEN ELEMENTS OF SX
!     --OUTPUT--
!    SASUM  SINGLE PRECISION RESULT (ZERO IF N .LE. 0)
!     RETURNS SUM OF MAGNITUDES OF SINGLE PRECISION SX.
!     SASUM = SUM FROM 0 TO N-1 OF  ABS(SX(1+I*INCX))
!***REFERENCES  LAWSON C.L., HANSON R.J., KINCAID D.R., KROGH F.T.,
!                 *BASIC LINEAR ALGEBRA SUBPROGRAMS FOR FORTRAN USAGE*,
!                 ALGORITHM NO. 539, TRANSACTIONS ON MATHEMATICAL
!                 SOFTWARE, VOLUME 5, NUMBER 3, SEPTEMBER 1979, 308-323
!***ROUTINES CALLED  (NONE)
!***END PROLOGUE  SASUM

!...SCALAR ARGUMENTS
     integer&
     &   incx,n

!...ARRAY ARGUMENTS
      real sx(*)

!...LOCAL SCALARS
     integer&
     &   i,m,mp1,ns

!...INTRINSIC FUNCTIONS
     intrinsic&
     &   abs,mod

!***FIRST EXECUTABLE STATEMENT  SASUM

      sasum = 0.0_wp
      if(n.le.0)return
      if(incx.eq.1)goto 20

!        CODE FOR INCREMENTS NOT EQUAL TO 1.

      ns = n*incx
          do 10 i=1,ns,incx
          sasum = sasum + abs(sx(i))
   10     continue
      return

!        CODE FOR INCREMENTS EQUAL TO 1.

!        CLEAN-UP LOOP SO REMAINING VECTOR LENGTH IS A MULTIPLE OF 6.

   20 m = mod(n,6)
      if( m .eq. 0 ) go to 40
      do 30 i = 1,m
        sasum = sasum + abs(sx(i))
   30 continue
      if( n .lt. 6 ) return
   40 mp1 = m + 1
      do 50 i = mp1,n,6
       sasum = sasum + abs(sx(i)) + abs(sx(i + 1)) + abs(sx(i + 2))&
     &  + abs(sx(i + 3)) + abs(sx(i + 4)) + abs(sx(i + 5))
   50 continue
      return
      end
