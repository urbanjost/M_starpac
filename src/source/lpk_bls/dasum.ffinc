!DASUM
      double precision function dasum(n,dx,incx)
!***BEGIN PROLOGUE  DASUM
!***DATE WRITTEN   791001   (YYMMDD)
!***REVISION DATE  820801   (YYMMDD)
!***CATEGORY NO.  D1A3A
!***KEYWORDS  ADD,BLAS,DOUBLE PRECISION,LINEAR ALGEBRA,MAGNITUDE,SUM,
!             VECTOR
!***AUTHOR  LAWSON, C. L., (JPL)
!           HANSON, R. J., (SNLA)
!           KINCAID, D. R., (U. OF TEXAS)
!           KROGH, F. T., (JPL)
!***PURPOSE  SUM OF MAGNITUDES OF D.P. VECTOR COMPONENTS
!***DESCRIPTION
!                B L A S  SUBPROGRAM
!    DESCRIPTION OF PARAMETERS
!     --INPUT--
!        N  NUMBER OF ELEMENTS IN INPUT VECTOR(S)
!       DX  DOUBLE PRECISION VECTOR WITH N ELEMENTS
!     INCX  STORAGE SPACING BETWEEN ELEMENTS OF DX
!     --OUTPUT--
!    DASUM  DOUBLE PRECISION RESULT (ZERO IF N .LE. 0)
!     RETURNS SUM OF MAGNITUDES OF DOUBLE PRECISION DX.
!     DASUM = SUM FROM 0 TO N-1 OF DABS(DX(1+I*INCX))
!***REFERENCES  LAWSON C.L., HANSON R.J., KINCAID D.R., KROGH F.T.,
!                 *BASIC LINEAR ALGEBRA SUBPROGRAMS FOR FORTRAN USAGE*,
!                 ALGORITHM NO. 539, TRANSACTIONS ON MATHEMATICAL
!                 SOFTWARE, VOLUME 5, NUMBER 3, SEPTEMBER 1979, 308-323
!***ROUTINES CALLED  (NONE)
!***END PROLOGUE  DASUM

!...SCALAR ARGUMENTS
      integer incx,n

!...ARRAY ARGUMENTS
      double precision dx(*)

!...LOCAL SCALARS
      integer i,m,mp1,ns

!...INTRINSIC FUNCTIONS
      intrinsic dabs,mod

!***FIRST EXECUTABLE STATEMENT  DASUM

      dasum = 0.d0
      if(n.le.0)return
      if(incx.eq.1)goto 20

!        CODE FOR INCREMENTS NOT EQUAL TO 1.

      ns = n*incx
          do 10 i=1,ns,incx
          dasum = dasum + dabs(dx(i))
   10     continue
      return

!        CODE FOR INCREMENTS EQUAL TO 1.

!        CLEAN-UP LOOP SO REMAINING VECTOR LENGTH IS A MULTIPLE OF 6.

   20 m = mod(n,6)
      if( m .eq. 0 ) go to 40
      do 30 i = 1,m
         dasum = dasum + dabs(dx(i))
   30 continue
      if( n .lt. 6 ) return
   40 mp1 = m + 1
      do 50 i = mp1,n,6
        dasum = dasum + dabs(dx(i)) + dabs(dx(i+1)) + dabs(dx(i+2))&
     &   + dabs(dx(i+3)) + dabs(dx(i+4)) + dabs(dx(i+5))
   50 continue
      return
      end
