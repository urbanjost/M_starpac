!RANDN
      function randn(jd,typ) result(randn_)
      real(kind=wp) :: randn_
      real(kind=wp),intent(in) :: typ
!***BEGIN PROLOGUE  RANDN (ORIGINALLY RNOR)
!***DATE WRITTEN   810915
!***REVISION DATE  900315
!***CATEGORY NO.  L6A14
!***KEYWORDS  RANDOM NUMBERS, UNIFORM RANDOM NUMBERS
!***AUTHOR    KAHANER, DAVID
!             APPLIED AND COMPUTATIONAL MATHEMATICS DIVISTION, NIST
!
!             MARSAGLIA, GEORGE
!             COMPUTER SCIENCE DEPT., WASH STATE UNIV
!
!             MODIFIED BY -
!             DONALDSON, JANET
!             APPLIED AND COMPUTATIONAL MATHEMATICS DIVISTION, NIST
!
!***PURPOSE  GENERATES QUASI NORMAL RANDOM NUMBERS, WITH MEAN ZERO AND
!             UNIT STANDARD DEVIATION, AND CAN BE USED WITH ANY COMPUTER
!             WITH INTEGERS AT LEAST AS LARGE AS 32767.
!***DESCRIPTION
!
!       RANDN GENERATES QUASI NORMAL RANDOM NUMBERS WITH ZERO MEAN AND
!       UNIT STANDARD DEVIATION.
!       IT CAN BE USED WITH ANY COMPUTER WITH INTEGERS AT LEAST AS
!       LARGE AS 32767.
!
!
!   USE
!       FIRST TIME....
!                   Z = RANDN(JD)
!                     HERE JD IS ANY  N O N - Z E R O  INTEGER.
!                     THIS CAUSES INITIALIZATION OF THE PROGRAM
!                     AND THE FIRST RANDOM NUMBER TO BE RETURNED AS Z.
!       SUBSEQUENT TIMES...
!                   Z = RANDN(0)
!                     CAUSES THE NEXT RANDOM NUMBER TO BE RETURNED AS Z.
!
!=======================================================================
!
!    NOTE: USERS WHO WISH TO TRANSPORT THIS PROGRAM TO OTHER
!           COMPUTERS SHOULD READ THE FOLLOWING ....
!
!   MACHINE DEPENDENCIES...
!      MDIG = A LOWER BOUND ON THE NUMBER OF BINARY DIGITS AVAILABLE
!              FOR REPRESENTING INTEGERS, INCLUDING THE SIGN BIT.
!              THIS MUST BE AT LEAST 16, BUT CAN BE INCREASED IN
!              LINE WITH REMARK A BELOW.
!
!   REMARKS...
!     A. THIS PROGRAM CAN BE USED IN TWO WAYS:
!        (1) TO OBTAIN REPEATABLE RESULTS ON DIFFERENT COMPUTERS,
!            SET 'MDIG' TO THE SMALLEST OF ITS VALUES ON EACH, OR,
!        (2) TO ALLOW THE LONGEST SEQUENCE OF RANDOM NUMBERS TO BE
!            GENERATED WITHOUT CYCLING (REPEATING) SET 'MDIG' TO THE
!            LARGEST POSSIBLE VALUE.
!     B. THE SEQUENCE OF NUMBERS GENERATED DEPENDS ON THE INITIAL
!          INPUT 'JD' AS WELL AS THE VALUE OF 'MDIG'.
!          IF MDIG=16 ONE SHOULD FIND THAT
!            THE FIRST EVALUATION
!              Z=RANDN(87) GIVES  Z=-.40079207...
!            THE SECOND EVALUATION
!              Z=RANDN(0) GIVES   Z=-1.8728870...
!            THE THIRD EVALUATION
!              Z=RANDN(0) GIVES   Z=1.8216004...
!            THE FOURTH EVALUATION
!              Z=RANDN(0) GIVES   Z=.69410355...
!            THE THOUSANDTH EVALUATION
!              Z=RANDN(0) GIVES   Z=.96782424...
!
!***REFERENCES  MARSAGLIA & TSANG, "A FAST, EASILY IMPLEMENTED
!                 METHOD FOR SAMPLING FROM DECREASING OR
!                 SYMMETRIC UNIMODAL DENSITY FUNCTIONS", TO BE
!                 PUBLISHED IN SIAM J SISC 1983.
!***ROUTINES CALLED  I1MACH,XERROR
!***END PROLOGUE  RANDN
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      integer
     &   jd
!
!  LOCAL SCALARS
      real(kind=wp) ::
     &   aa,b,c,c1,c2,one,p5,pc,rmax,s,x,xn,y
      integer
     &   i,i1,j,j0,j1,jseed,k0,k1,m1,m2,mdig
!
!  LOCAL ARRAYS
      real(kind=wp) ::
     &   v(65),w(65)
      integer
     &   m(17)
!
!  EXTERNAL FUNCTIONS
      real(kind=wp) ::
     &   randu
      integer
     &   i1mach
      external randu,i1mach
!
!  EXTERNAL SUBROUTINES
      external xerror
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,exp,log,min,mod,real,sign
!
!  SAVE STATEMENT
      save i1,j1,m,m1,m2,rmax
!
      data aa,b,c,rmax/12.37586_wp,0.4878992_wp,12.67706_wp,
     & 3.0518509e-5_wp/
      data c1,c2,pc,xn/0.9689279_wp,1.301198_wp,0.1958303e-1_wp,
     & 2.776994_wp/
      data (v(i),i=1,15)/0.3409450_wp,0.4573146_wp,0.5397793_wp,
     &     0.6062427_wp,0.6631691_wp,0.7136975_wp,0.7596125_wp,
     & 0.8020356_wp,
     &     0.8417227_wp,0.8792102_wp,0.9148948_wp,0.9490791_wp,
     & 0.9820005_wp,
     &     1.0138492_wp,1.0447810_wp/
      data (v(i),i=16,30)/1.0749254_wp,1.1043917_wp,1.1332738_wp,
     &     1.1616530_wp,1.1896010_wp,1.2171815_wp,1.2444516_wp,
     & 1.2714635_wp,
     &     1.2982650_wp,1.3249008_wp,1.3514125_wp,1.3778399_wp,
     & 1.4042211_wp,
     &     1.4305929_wp,1.4569915_wp/
      data (v(i),i=31,45)/1.4834526_wp,1.5100121_wp,1.5367061_wp,
     &     1.5635712_wp,1.5906454_wp,1.6179680_wp,1.6455802_wp,
     & 1.6735255_wp,
     &     1.7018503_wp,1.7306045_wp,1.7598422_wp,1.7896223_wp,
     & 1.8200099_wp,
     &     1.8510770_wp,1.8829044_wp/
      data (v(i),i=46,60)/1.9155830_wp,1.9492166_wp,1.9839239_wp,
     &     2.0198430_wp,2.0571356_wp,2.0959930_wp,2.1366450_wp,
     & 2.1793713_wp,
     &     2.2245175_wp,2.2725185_wp,2.3239338_wp,2.3795007_wp,
     & 2.4402218_wp,
     &     2.5075117_wp,2.5834658_wp/
      data (v(i),i=61,65)/2.6713916_wp,2.7769943_wp,2.7769943_wp,
     &     2.7769943_wp,2.7769943/
      data (w(i),i=1,20)/0.10405134e-04_wp,0.13956560e-04_wp,
     & 0.16473259e-04_wp,
     &     0.18501623e-04_wp,0.20238931e-04_wp,0.21780983e-04_wp,
     & 0.23182241e-04_wp,
     &     0.24476931e-04_wp,0.25688121e-04_wp,0.26832186e-04_wp,
     & 0.27921226e-04_wp,
     &     0.28964480e-04_wp,0.29969191e-04_wp,0.30941168e-04_wp,
     & 0.31885160e-04_wp,
     &     0.32805121e-04_wp,0.33704388e-04_wp,0.34585827e-04_wp,
     & 0.35451919e-04_wp,
     &     0.36304851e-04_wp/
      data (w(i),i=21,40)/0.37146564e-04_wp,0.37978808e-04_wp,
     & 0.38803170e-04_wp,
     &     0.39621114e-04_wp,0.40433997e-04_wp,0.41243096e-04_wp,
     & 0.42049621e-04_wp,
     &     0.42854734e-04_wp,0.43659562e-04_wp,0.44465208e-04_wp,
     & 0.45272764e-04_wp,
     &     0.46083321e-04_wp,0.46897980e-04_wp,0.47717864e-04_wp,
     & 0.48544128e-04_wp,
     &     0.49377973e-04_wp,0.50220656e-04_wp,0.51073504e-04_wp,
     & 0.51937936e-04_wp,
     &     0.52815471e-04_wp/
      data (w(i),i=41,60)/0.53707761e-04_wp,0.54616606e-04_wp,
     & 0.55543990e-04_wp,
     &     0.56492112e-04_wp,0.57463436e-04_wp,0.58460740e-04_wp,
     & 0.59487185e-04_wp,
     &     0.60546402e-04_wp,0.61642600e-04_wp,0.62780711e-04_wp,
     & 0.63966581e-04_wp,
     &     0.65207221e-04_wp,0.66511165e-04_wp,0.67888959e-04_wp,
     & 0.69353880e-04_wp,
     &     0.70922996e-04_wp,0.72618816e-04_wp,0.74471933e-04_wp,
     & 0.76525519e-04_wp,
     &     0.78843526e-04_wp/
      data (w(i),i=61,65)/0.81526890e-04_wp,0.84749727e-04_wp,
     & 0.84749727e-04_wp,
     &     0.84749727e-04_wp,0.84749727e-04_wp/
      data m(1),m(2),m(3),m(4),m(5),m(6),m(7),m(8),m(9),m(10),m(11),
     &     m(12),m(13),m(14),m(15),m(16),m(17)/30788,23052,2053,19346,
     &     10646,19427,23975,19049,10949,19693,29746,26748,2796,23890,
     &     29168,31924,16499/
      data m1,m2,i1,j1/32767,256,5,17/
      data p5,one/0.5_wp,1.0_wp/
!
! FAST PART...
!
!
!***FIRST EXECUTABLE STATEMENT  RANDN
      if (jd.ne.0) then
!  FILL
          mdig = i1mach(8) + 1
!
!  MODIFICATION SO SAME NUMBERS WILL BE GENERATED ON ALL MACHINES
!  WITH I1MACH(8) AT LEAST 31
!
          mdig = min(mdig,32)
!
!  BE SURE THAT MDIG AT LEAST 16...
          if (mdig.lt.16) call xerror('RANDN--MDIG LESS THAN 16',23,1,2)
!
          m1 = 2** (mdig-2) + (2** (mdig-2)-1)
          m2 = 2** (mdig/2)
          jseed = min(abs(jd),m1)
          if (mod(jseed,2).eq.0) jseed = jseed - 1
          k0 = mod(9069,m2)
          k1 = 9069/m2
          j0 = mod(jseed,m2)
          j1 = jseed/m2
          do 10 i = 1,17
              jseed = j0*k0
              j1 = mod(jseed/m2+j0*k1+j1*k0,m2/2)
              j0 = mod(jseed,m2)
              m(i) = j0 + m2*j1
   10     continue
          j1 = 17
          i1 = 5
          rmax = one/real(m1,kind=wp)
!  SEED UNIFORM (0,1] GENERATOR.  (JUST A DUMMY CALL)
          randn_ = randu(jd)
          do 20 i = 1,65
              w(i) = rmax*v(i)
   20     continue
      end if

      i = m(i1) - m(j1)
      if (i.lt.0) i = i + m1
      m(j1) = i
      i1 = i1 - 1
      if (i1.eq.0) i1 = 17
      j1 = j1 - 1
      if (j1.eq.0) j1 = 17
      j = mod(i,64) + 1
      randn_ = i*w(j+1)
      if (((i/m2)/2)*2.eq. (i/m2)) randn_ = -randn_
      if (abs(randn_).gt.v(j)) then
!  SLOW PART; AA IS A*F(0)
          x = (abs(randn_)-v(j))/ (v(j+1)-v(j))
          y = randu(0)
          s = x + y
          if (s.le.c2) then
              if (s.le.c1) then
                  return
              else if (y.le.c-aa*exp(-p5 * (b-b*x)**2)) then
                  if (exp(-p5*v(j+1)**2)+y*pc/v(j+1).gt.
     &                exp(-p5*randn_**2)) then
   30                 continue
! TAIL PART; 3.855849 IS .5*XN**2
                      s = xn - log(randu(0))/xn
                      if (3.855849_wp+log(randu(0))-xn*s.gt.
     &                    -p5*s**2) go to 30
                      randn_ = sign(s,randn_)
                  end if
                  return
              else
              end if
          end if
          randn_ = sign(b-b*x,randn_)
      end if
      end
