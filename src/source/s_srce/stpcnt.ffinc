!STPCNT
     subroutine stpcnt(xm, n, m, ixm, mdl, par, npar, stp,&
    &   exmpt, neta, scale, lscale, nprt, hdr, page, wide, isubhd,&
     &   hlfrpt, prtfxd, ifixed, lifixd)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS ROUTINE CONTROLS THE STEP SIZE SELECTION PROCESS.
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  APRIL 2, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   exmpt
     integer&
     &   isubhd,ixm,lifixd,lscale,m,n,neta,npar,nprt
     logical&
     &   hlfrpt,page,prtfxd,wide
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   par(npar),scale(lscale),stp(npar),xm(ixm,m)
     integer&
     &   ifixed(lifixd)
!
!  SUBROUTINE ARGUMENTS
       external hdr,mdl
!
!  SCALARS IN COMMON
     real(kind=wp) ::&
     &   q
     integer&
     &   ierr
!
!  ARRAYS IN COMMON
      double precision dstak(12)
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   eta,exm,fplrs,scl,tau
     integer&
    &   cd,fd,fdlast,fdsave,ifailj,ifixd,ifp,itemp,j,mxfail,nall0,&
    &   ndd,ndgt1,nexmpt,nfail,nfailj,partmp,pv,pvmcd,pvnew,pvpcd,&
     &   pvstp,pvtemp
     logical&
     &   head
!
!  LOCAL ARRAYS
     real(kind=wp) ::&
     &   rstak(12)
     integer&
     &   istak(12)
!
!  EXTERNAL FUNCTIONS
     real(kind=wp) ::&
     &   r1mach
     integer&
     &   stkst
!       EXTERNAL R1MACH,STKST
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL CPYVII,ETAMDL,SETIV,STKCLR,STPMN,STPOUT
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,int,log10,max,min
!
!  COMMON BLOCKS
      common /cstak/dstak
      common /errchk/ierr
      common /notopt/q
!
!  EQUIVALENCES
      equivalence (dstak(1),istak(1))
      equivalence (dstak(1),rstak(1))
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     INTEGER CD
!        THE STARTING LOCATION IN THE WORK AREA OF
!        THE CENTRAL DIFFERENCE QUOTIENT APPROXIMATION TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER.
!     DOUBLE PRECISION DSTAK(12)
!        THE DOUBLE PRECISION VERSION OF THE /CSTAK/ WORK AREA.
!     REAL(KIND=WP) :: ETA
!        THE RELATIVE NOISE IN THE MODEL
!     REAL(KIND=WP) :: EXM
!        THE PROPORTION OF OBSERVATIONS ACTUALLY USED FOR WHICH THE
!        COMPUTED NUMERICAL DERIVATIVES WRT A GIVEN PARAMETER ARE
!        EXEMPTED FROM MEETING THE DERIVATIVE ACCEPTANCE CRITERIA.
!     REAL(KIND=WP) :: EXMPT
!        THE PROPORTION OF OBSERVATIONS FOR WHICH THE COMPUTED
!        NUMERICAL DRVATIVES WRT A GIVEN PARAMETER ARE EXEMPTED
!        FROM MEETING THE DERIVATIVE ACCEPTANCE CRITERIA.
!     INTEGER FD
!        THE STARTING LOCATION IN THE WORK AREA OF
!        THE FORWARD DIFFERENCE QUOTIENT APPROXIMATION TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER.
!     INTEGER FDLAST
!        THE STARTING LOCATION IN THE WORK AREA OF
!        THE FORWARD DIFFERENCE QUOTIENT APPROXIMATION TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER
!        FOR THE LAST STEP SIZE TRIED.
!     INTEGER FDSAVE
!        THE STARTING LOCATION IN THE WORK AREA OF
!        THE FORWARD DIFFERENCE QUOTIENT APPROXIMATION TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER
!        FOR THE BEST STEP SIZE TRIED SO FAR.
!     REAL(KIND=WP) :: FPLRS
!        THE FLOATING POINT LARGEST RELATIVE SPACING.
!     EXTERNAL HDR
!        THE NAME OF THE ROUTINE WHICH PRODUCES THE HEADING
!     LOGICAL HEAD
!        A FLAG INDICATING WHETHER THE HEADING SHOULD BE PRINTED
!        (TRUE) OR NOT (FALSE).  IF A HEADING IS PRINTED, THE VALUE
!        OF HEAD WILL BE CHANGED TO FALSE.
!     LOGICAL HLFRPT
!        THE VARIABLE WHICH INDICATES WHETHER THE STEP SIZE SELECTION
!        ROUTINE HAS ALREADY PRINTED PART OF THE INITIAL SUMMARY (TRUE)
!        OR NOT (FALSE).
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED
!        IF IERR .EQ. 1, ERRORS HAVE BEEN DETECTED
!     INTEGER IFAILJ
!        THE STARTING LOCATION IN ISTAK FOR
!        THE ARRAY OF INDICATOR VARIABLES DESIGNATING WHETHER
!        THE SETP SIZE SELECTED WAS SATISFACOTRY FOR A GIVEN
!        OBSERVATION AND THE JTH PARAMETER.
!     INTEGER IFIXD
!        THE STARTING LOCATION IN ISTAK OF
!        THE INDICATOR VALUES USED TO DESIGNATE WHETHER THE
!        PARAMETERS ARE TO BE OPTIMIZED OR ARE TO BE HELD FIXED.
!     INTEGER IFIXED(LIFIXD)
!        THE INDICATOR VALUES USED TO DESIGNATE WHETHER THE
!        PARAMETERS ARE TO BE OPTIMIZED OR ARE TO BE HELD FIXED.  IF
!        IFIXED(I).NE.0, THEN PAR(I) WILL BE OPTIMIZED.  IF
!        IFIXED(I).EQ.0, THEN PAR(I) WILL BE HELD FIXED.
!     INTEGER IFP
!        AN INDICATOR FOR STACK ALLOCATION TYPE, WHERE IFP=3 INDICATES
!        REAL AND IFP=4 INDICATES DOUBLE PRECISION.
!     INTEGER ISTAK(12)
!        THE INTEGER VERSION OF THE /CSTAK/ WORK AREA.
!     INTEGER ISUBHD
!        AN INDICATOR VALUE SPECIFYING SUBHEADINGS TO BE PRINTED.
!     INTEGER ITEMP
!        THE STARTING LOCATION IN ISTAK FOR
!        A TEMPORARY STORAGE VECTOR.
!     INTEGER IXM
!        THE FIRST DIMENSION OF THE INDEPENDENT VARIABLE ARRAY.
!     INTEGER J
!        THE INDEX OF THE PARAMETER BEING EXAMINED.
!     INTEGER LIFIXD
!        THE LENGTH OF THE VECTOR IFIXED.
!     INTEGER LSCALE
!        THE LENGTH OF VECTOR SCALE.
!     INTEGER M
!        THE NUMBER OF INDEPENDENT VARIABLES.
!     EXTERNAL MDL
!        THE NAME OF THE USER SUPPLIED SUBROUTINE WHICH COMPUTES THE
!        PREDICTED VALUES BASED ON THE CURRENT PARAMETER ESTIMATES.
!     INTEGER MXFAIL
!        THE MAXIMUM NUMBER OF FAILURES FOR ANY PARAMETER.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NALL0
!        THE NUMBER OF STACK ALLOCATIONS ON ENTRY.
!     INTEGER NDD
!        THE NUMBER OF DECIMAL DIGITS CARRIED FOR A REAL
!        NUMBERS.
!     INTEGER NDGT1
!        THE NUMBER OF RELIABLE DIGITS IN THE MODEL USED, EITHER
!        SET TO THE USER SUPPLIED VALUE OF NETA, OR COMPUTED
!        BY ETAMDL.
!     INTEGER NETA
!        THE USER SUPPLIED NUMBER OF RELIABLE DIGITS IN THE MODEL.
!     INTEGER NEXMPT
!        THE NUMBER OF OBSERVATIONS FOR WHICH A GIVEN STEP SIZE
!        DOES NOT HAVE TO BE SATISFACTORY AND THE SELECTED STEP
!        SIZE STILL BE CONSIDERED OK.
!     INTEGER NFAIL
!        THE NUMBER OF OBSERVATIONS FOR WHICH THE SELECTED STEP SIZE
!        FOR THE PARAMETER DOES NOT MEET THE CRITERIA.
!     INTEGER NFAILJ
!        THE NUMBER OF OBSERVATIONS FOR WHICH THE SELECTED STEP SIZE
!        FOR THE JTH PARAMETER DOES NOT MEET THE CRITERIA.
!     INTEGER NPAR
!        THE NUMBER OF PARAMETERS IN THE MODEL.
!     INTEGER NPRT
!        THE INDICATOR VARIABLE USED TO SPECIFY WHETHER OR NOT
!        PRINTED OUTPUT IS TO BE PROVIDED, WHERE IF THE VALUE OF
!        NPRT IS ZERO, NO PRINTED OUTPUT IS GIVEN.
!     LOGICAL PAGE
!        THE VARIABLE USED TO INDICATE WHETHER A GIVEN SECTION OF
!        THE OUTPUT IS TO BEGIN ON A NEW PAGE (TRUE) OR NOT (FALSE).
!     REAL(KIND=WP) :: PAR(NPAR)
!        THE ARRAY IN WHICH THE CURRENT ESTIMATES OF THE UNKNOWN
!        PARAMETERS ARE STORED.
!     INTEGER PARTMP
!        THE STARTING LOCATION IN THE WORK AREA OF
!        THE MODIFIED MODEL PARAMETERS
!     LOGICAL PRTFXD
!        THE INDICATOR VALUE USED TO DESIGNATE WHETHER THE
!        OUTPUT IS TO INCLUDE INFORMATION ON WHETHER THE
!        PARAMETER IS FIXED (TRUE) OR NOT (FALSE).
!     INTEGER PV
!        THE STARTING LOCATION IN THE WORK AREA OF
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!     INTEGER PVMCD
!        THE STARTING LOCATION IN THE WORK AREA OF
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!     INTEGER PVNEW
!        THE STARTING LOCATION IN THE WORK AREA OF
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J)+STPNEW.
!     INTEGER PVPCD
!        THE STARTING LOCATION IN THE WORK AREA OF
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J)+STPCD.
!     INTEGER PVSTP
!        THE STARTING LOCATION IN THE WORK AREA OF
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J)+STP(J).
!     INTEGER PVTEMP
!        THE STARTING LOCATION IN THE WORK AREA OF
!        A TEMPORY STORAGE LOCATION FOR PREDICTED VALUES BEGINS.
!     REAL(KIND=WP) :: Q
!        A DUMMY VARIABLE WHICH IS USED, ALONG WITH COMMON NOTOPT (NO
!        OPTIMIZATION), TO COMPUTE THE STEP SIZE.
!     REAL(KIND=WP) :: RSTAK(12)
!        THE REAL VERSION OF THE /CSTAK/ WORK AREA.
!     REAL(KIND=WP) :: SCALE(LSCALE)
!        THE TYPICAL SIZE OF THE PARAMETERS.
!     REAL(KIND=WP) :: SCL
!        THE ACTUAL TYPICAL SIZE USED.
!     REAL(KIND=WP) :: STP(NPAR)
!        THE SELECTED STEP SIZES.
!     REAL(KIND=WP) :: TAU
!        THE AGREEMENT TOLERANCE.
!     LOGICAL WIDE
!        THE VARIABLE USED TO INDICATE WHETHER THE HEADING SHOULD
!        BE FULL WIDTH (TRUE) OR NOT (FALSE).
!     REAL(KIND=WP) :: XM(IXM,M)
!        THE ARRAY IN WHICH ONE ROW OF THE INDEPENDENT VARIABLE ARRAY
!        IS STORED.
!
!
      nall0 = stkst(1)
!
      fplrs = r1mach(4)
      ifp = 3
!
!     SET PRINT CONTROLS
!
      head = .true.
!
!     SUBDIVIDE WORK AREA
!
      ifixd = stkget(npar, 2)
      itemp = stkget(n, 2)
      ifailj = stkget(n, 2)
      nfail = stkget(npar, 2)
!
      cd = stkget(max(n,npar), ifp)
      fd = stkget(n, ifp)
      fdlast = stkget(n, ifp)
      fdsave = stkget(n, ifp)
      pv = stkget(n, ifp)
      pvmcd = stkget(n, ifp)
      pvnew = stkget(n, ifp)
      pvpcd = stkget(n, ifp)
      pvstp = stkget(n, ifp)
      pvtemp = stkget(n, ifp)
!
      if (ierr .eq. 1) return
!
      partmp = cd
!
!     SET UP IFIXD
!
      if (ifixed(1).lt.0) then
         call setiv(istak(ifixd), npar, 0)
      else
         call cpyvii(npar, ifixed, 1, istak(ifixd), 1)
      end if
!
!     SET PARAMETERS NECESSARY FOR THE COMPUTATIONS
!
      ndd = int(-log10(fplrs))
!
      if ((neta.ge.2) .and. (neta.le.ndd)) then
         eta = 10.0e0 ** (-neta)
         ndgt1 = neta
      else
        call etamdl(mdl, par, npar, xm, n, m, ixm, eta, ndgt1,&
     &               rstak(partmp), rstak(pvtemp), 0)
      end if
!
      tau = min(eta ** (0.25e0), 0.01e0)
!
      exm = exmpt
      if ((exm.lt.0.0e0) .or. (exm.gt.1.0e0)) exm = 0.10e0
      nexmpt = exm * n
      if (exm .ne. 0.0e0) nexmpt = max(nexmpt, 1)
!
!     COMPUTE PREDICTED VALUES OF THE MODEL USING THE INPUT PARAMETER
!     ESTIMATES
!
      call mdl(par, npar, xm, n, m, ixm, rstak(pv))
!
      mxfail = 0
      nfailj = nfail
!
      do 120 j = 1, npar
         if (istak(ifixd-1+j).eq.0) then
            if (scale(1).le.0.0e0) then
               if (par(j).eq.0.0e0) then
                  scl = 1.0e0
               else
                  scl = abs(par(j))
               end if
            else
               scl = scale(j)
            end if
!
           call stpmn(j, xm, n, m, ixm, mdl, par, npar, nexmpt,&
    &         eta, tau, scl, stp(j), istak(nfailj), istak(ifailj),&
    &         rstak(cd), istak(itemp), rstak(fd), rstak(fdlast),&
    &         rstak(fdsave), rstak(pv), rstak(pvmcd), rstak(pvnew),&
     &         rstak(pvpcd), rstak(pvstp), rstak(pvtemp))
!
!     COMPUTE THE MAXIMUM NUMBER OF FAILURES FOR ANY PARAMETER
!
            mxfail = max(istak(nfailj), mxfail)
!
         else
            stp(j) = 0.0
         end if
!
!     PRINT RESULTS IF THEY ARE DESIRED
!
        if ((nprt.ne.0) .or. (mxfail.gt.nexmpt))&
    &      call stpout(head, n, exm, nexmpt, ndgt1, j, par, npar,&
    &            stp, istak(nfail), istak(ifailj), scale,  lscale, hdr,&
     &            page, wide, isubhd, nprt, prtfxd, istak(ifixd))
         nfailj = nfailj + 1
  120 continue
!
      hlfrpt = .false.
      if ((nprt.ne.0) .or. (mxfail.gt.nexmpt)) hlfrpt = .true.
!
      if (mxfail.gt.nexmpt) ierr = 2
!
      call stkclr(nall0)
!
      return
!
      end
