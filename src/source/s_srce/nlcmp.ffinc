!NLCMP
     subroutine nlcmp (y, weight, wt, lwt, n, npar, npare,&
    &   res, d, rd, cond, vcvl, lvcvl, nnzw, idf, rsshlf, rss, rsd,&
     &   yss, exact, pvt, sdpvt, sdrest, iskull)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS ROUTINE COMPUTES VARIOUS STATISTICS AND VALUES RETURNED
!     AND/OR PRINTED BY THE NLS FAMILY OF ROUTINES WHEN WEIGHTS ARE
!     INVOLVED.
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  APRIL 2, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   cond,rsd,rss,rsshlf,yss
     integer&
     &   idf,lvcvl,lwt,n,nnzw,npar,npare
     logical&
     &   exact,weight
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
    &   d(n,npar),pvt(n),rd(n),res(n),sdpvt(n),sdrest(n),vcvl(lvcvl),&
     &   wt(lwt),y(n)
     integer&
     &   iskull(10)
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   fac,fplm,rvar,sm,tj,wti,wtsum,ywtsm,ywtysm
     integer&
     &   i,j,jk,k
!
!  EXTERNAL FUNCTIONS
     real(kind=wp) ::&
     &   r1mach
!       EXTERNAL R1MACH
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL FITEXT
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,max,sqrt
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: COND
!        THE CONDITION NUMBER OF D.
!     REAL(KIND=WP) :: D(N,NPAR)
!        THE FIRST DERIVATIVE OF THE MODEL (JACOBIAN).
!     LOGICAL EXACT
!        AN INDICATOR VALUE USED TO DESIGNATE WHETHER THE FIT
!        WAS EXACT TO MACHINE PRECISION (TRUE) OR NOT (FALSE).
!     REAL(KIND=WP) :: FAC
!        A FACTOR USED TO CORRECT FOR ZERO WEIGHTED OBSERVATIONS IN
!        THE VARIANCE COVARIANCE COMPUTATION.
!     REAL(KIND=WP) :: FPLM
!        THE FLOATING POINT LARGEST MAGNITUDE.
!     INTEGER I
!        AN INDEX VARIABLE.
!     INTEGER IDF
!        THE DEGREES OF FREEDOM IN THE FIT.
!     INTEGER IERR
!        THE VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST.
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED.
!        IF IERR .GE. 1, ERRORS WERE DETECTED.
!     INTEGER ISKULL(10)
!        AN ERROR MESSAGE INDICATOR VARIABLE.
!     INTEGER J
!        AN INDEX VARIABLE.
!     INTEGER JK
!        THE INDEX OF THE (J,K)TH ELEMENT OF THE VARIANCE-COVARIANCE
!        MATRIX.
!     INTEGER K
!        AN INDEX VARIABLE.
!     INTEGER LVCVL
!        THE DIMENSION OF VECTOR VCVL.
!     INTEGER LWT
!        THE DIMENSION OF VECTOR WT.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NNZW
!        THE NUMBER OF NON ZERO WEIGHTS.
!     INTEGER NPAR
!        THE NUMBER OF PARAMETERS IN THE MODEL.
!     INTEGER NPARE
!        THE NUMBER OF PARAMETERS TO BE OPTIMIZED.
!     REAL(KIND=WP) :: PVT(N)
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES.
!     REAL(KIND=WP) :: RD(N)
!        THE DIAGONAL ELEMENTS OF THE R MATRIX OF THE Q - R
!        FACTORIZATION OF D.
!     REAL(KIND=WP) :: RES(N)
!        THE RESIDUALS FROM THE FIT.
!     REAL(KIND=WP) :: RSD
!        THE RESIDUAL STANDARD DEVIATION.
!     REAL(KIND=WP) :: RSS
!        THE RESIDUAL SUM OF SQUARES.
!     REAL(KIND=WP) :: RSSHLF
!        HALF THE RESIDUAL SUM OF SQUARES.
!     REAL(KIND=WP) :: RVAR
!        THE RESIDUAL VARIANCE.
!     REAL(KIND=WP) :: SDPVT(N)
!        THE STANDARD DEVIATIONS OF THE PREDICTED VALUES.
!     REAL(KIND=WP) :: SDREST(N)
!        THE STANDARDIZED RESIDUALS.
!     REAL(KIND=WP) :: SM
!        A VARIABLE USED FOR SUMMATION.
!     REAL(KIND=WP) :: TJ
!        ...
!     REAL(KIND=WP) :: VCVL(LVCVL)
!        THE LOWER HALF OF THE VARIANCE-COVARIANCE MATRIX, STORED
!        ROW WISE.
!     LOGICAL WEIGHT
!        THE VARIABLE USED TO INDICATE WHETHER WEIGHTED ANALYSIS IS TO
!        BE PERFORMED (TRUE) OR NOT (FALSE).
!     REAL(KIND=WP) :: WT(LWT)
!        THE USER SUPPLIED WEIGHTS.
!     REAL(KIND=WP) :: WTI
!        THE ACTUAL WEIGHT USED FOR THE ITH OBSERVATION.
!     REAL(KIND=WP) :: WTSUM
!        THE SUM OF THE WEIGHTS.
!     REAL(KIND=WP) :: Y(N)
!        THE DEPENDENT VARIABLE.
!     REAL(KIND=WP) :: YSS
!        THE SUM OF THE SQUARES ABOUT THE MEAN Y VALUE.
!     REAL(KIND=WP) :: YWTSM
!        THE SUM OF THE VALUES Y(I)*WT(I), I=1,N.
!     REAL(KIND=WP) :: YWTYSM
!        THE SUM OF THE VALUES Y(I)*WT(I)*WT(I), I=1,N.
!
      fplm = r1mach(2)
!
!     COMPUTE RESIDUALS
!
      do 10 i=1,n
         res(i) = y(i) - pvt(i)
   10 continue
!
!     COMPUTE VARIOUS STATISTICS
!
      idf = nnzw - npare
      rss = 2.0e0*rsshlf
      rvar = 0.0e0
      if (idf.ge.1) rvar = rss/idf
      rsd = sqrt(rvar)
      ywtsm = 0.0e0
      ywtysm = 0.0e0
      wtsum = 0.0e0
      do 20 i=1,n
         wti = 1.0e0
         if (weight) wti = wt(i)
         ywtsm = ywtsm + y(i)*wti
         ywtysm = ywtysm + y(i)*wti*y(i)
         wtsum = wtsum + wti
   20 continue
      yss = max(ywtysm-(ywtsm*ywtsm)/wtsum,0.0e0)
!
      call fitext(rss, yss, exact)
!
      cond = fplm
      if (rd(npare).ne.0.0e0) cond = abs(rd(1)/rd(npare))
!
      if (ierr.ne.0) return
!
!     CORRECT FOR DEGREES OF FREEDOM IF NECESSARY BECAUSE OF ZERO
!     WEIGHTED OBSERVATIONS.
!
      if (n.eq.nnzw) go to 40
!
      fac = n-npare
      if (idf.ge.1) fac = fac/idf
      do 30 i=1,lvcvl
         vcvl(i) = vcvl(i)*fac
   30 continue
!
   40 continue
!
!     IF THE RESIDUAL SUM OF SQUARES IS IDENTICALLY ZERO, THEN
!     NO FURTHER COMPUTATIONS ARE NECESSARY
!
      if ((idf.le.0) .or. exact) return
!
!     IF THE STANDARD DEVIATIONS OF THE PREDICTED VALUES AND
!     STANDARDIZED RESIDUALS ARE NOT SAVED OR PRINTED, THEN NO
!     FURTHER COMPUTATIONS ARE NECESSARY.
!
!     COMPUTE THE STANDARD DEVIATIONS OF THE PREDICTED VALUES (SDPVT)
!
      do 90 i=1,n
         sm = 0.0e0
         do 60 j=1,npare
            tj = 0.0e0
            do 50 k=1,npare
               if (j.ge.k) then
                  jk = j*(j-1)/2 + k
               else
                  jk = k*(k-1)/2 + j
               end if
               tj = tj + vcvl(jk)*d(i,k)
   50       continue
               sm = sm + d(i,j)*tj
   60    continue
         if (sm.lt.0.0e0) sm = 0.0e0
         sdpvt(i) = sqrt(sm)
!
         sdrest(i) = fplm
         wti = 1.0e0
         if (weight) wti = wt(i)
         if (wti.eq.0.0e0) go to 90
!
         if (rvar/wti-sm.le.0.0e0) go to 70
         go to 80
!
!           THEN
!
   70    sdrest(i) = fplm
         iskull(1) = 1
         iskull(4) = 1
         ierr = 4
         go to 90
!
!           ELSE
!
   80    sdrest(i) = res(i)/sqrt(rvar/wti-sm)
!
!        END IF
!
   90 continue
!
      return
!
      end
