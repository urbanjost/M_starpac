!NLER
     subroutine nler (nmsub, weight, wt, lwt, n, m, ixm,&
    &   ifixed, lifixd, npar, npare,&
     &   ldstak, ldsmin, stp, lstp, scale, lscale, ivcv, save, nnzw)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS IS THE ERROR CHECKING ROUTINE FOR NONLINEAR LEAST SQUARES
!     ESTIMATION ROUTINES.
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  OCTOBER 3, 1983
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
    &   ivcv,ixm,ldsmin,ldstak,lifixd,lscale,lstp,lwt,m,n,nnzw,&
     &   npar,npare
     logical&
     &   save,weight
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   scale(*),stp(*),wt(*)
     integer&
     &   ifixed(*)
     character&
     &   nmsub(6)*1
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  LOCAL SCALARS
     integer&
     &   i,nfix,nnfix,nv,nzw
     logical&
     &   head
!
!  LOCAL ARRAYS
     logical&
     &   error(20)
     character&
    &   lifix(8)*1,livcv(8)*1,lixm(8)*1,llds(8)*1,lm(8)*1,&
    &   ln(8)*1,lnpar(8)*1,lnpare(8)*1,lone(8)*1,lscl(8)*1,&
     &   lstep(8)*1,lwgt(8)*1,lzero(8)*1
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL EISGE,EIVEQ,ERVGT,ERVWT
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     LOGICAL ERROR(20)
!        VALUE(S) INDICATING WHETHER AN ERROR WAS DETECTED (TRUE) OR NOT
!        (FALSE).
!     LOGICAL HEAD
!        A FLAG INDICATING WHETHER THE HEADING SHOULD BE PRINTED
!        (TRUE) OR NOT (FALSE).  IF A HEADING IS PRINTED, THE VALUE
!        OF HEAD WILL BE CHANGED TO FALSE.
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST.
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED.
!        IF IERR .EQ. 1, ERRORS WERE DETECTED.
!     INTEGER IFIXED(LIFIXD)
!        THE INDICATOR VALUES USED TO DESIGNATE WHETHER THE
!        PARAMETERS ARE TO BE OPTIMIZED OR ARE TO BE HELD FIXED.  IF
!        IFIXED(I).NE.0, THEN PAR(I) WILL BE OPTIMIZED.  IF
!        IFIXED(I).EQ.0, THEN PAR(I) WILL BE HELD FIXED.
!        IFIXED(1).LT.0, THEN ALL PAR(I),I=1,NPAR, WILL BE OPTIMIZED..
!     INTEGER IVCV
!        THE FIRST DIMENSION OF THE VARIANCE COVARIANCE MATRIX VCV.
!     INTEGER IXM
!        THE FIRST DIMENSION OF THE INDEPENDENT VARIABLE ARRAY XM.
!     INTEGER LDSMIN
!        THE MINIMUM LENGTH ALLOWED FOR THE ARRAY DSTAK.
!     INTEGER LDSTAK
!        THE LENGTH OF THE ARRAY DSTAK.
!     CHARACTER*1
!    +   LIFIX(8), LIVCV(8), LIXM(8), LLDS(8), LM(8), LN(8), LNPAR(8),
!    +   LNPARE(8), LONE(8), LSCL(8), LSTEP(8), LWGT(8), LZERO(8)
!        THE ARRAY(S) CONTAINING THE NAME(S) OF INPUT PARAMETER(S)
!        CHECKED FOR ERRORS.
!     INTEGER LSCALE
!        THE ACTUAL LENGTH OF THE VECTOR SCALE.
!     INTEGER LSTP
!        THE ACTUAL LENGTH OF THE VECTOR STP.
!     INTEGER LWT
!        THE ACTUAL LENGTH OF THE VECTOR WT.
!     INTEGER M
!        THE NUMBER OF INDEPENDENT VARIABLES.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NPAR
!        THE NUMBER OF PARAMETERS IN THE MODEL.
!     INTEGER NPARE
!        THE NUMBER OF PARAMETERS TO BE ESTIMATED.
!     CHARACTER*1 NMSUB(6)
!        THE NAME OF THE SUBROUTINE CALLING THE ERROR CHECKING
!        SUBROUTINES.
!     INTEGER NNZW
!        THE NUMBER OF NON ZERO WEIGHTS.
!     INTEGER NZW
!        THE NUMBER OF ZERO WEIGHTS.
!     LOGICAL SAVE
!        THE VARIABLE USED TO INDICATE WHETHER ANY RESULTS OTHER THAN
!        THE RESIDUALS AND PARAMETERS ARE TO BE SAVED (TRUE) OR NOT
!        (FALSE).
!     REAL(KIND=WP) :: SCALE(LSCALE)
!        THE TYPICAL SIZE OF THE PARAMETERS.
!     REAL(KIND=WP) :: STP(LSTP)
!        THE STEP SIZE ARRAY.
!     LOGICAL WEIGHT
!        THE VARIABLE USED TO INDICATE WHETHER WEIGHTED ANALYSIS IS TO
!        BE PERFORMED (TRUE) OR NOT (FALSE).
!     REAL(KIND=WP) :: WT(LWT)
!        THE USER SUPPLIED WEIGHTS.
!
!
!     SET UP NAME ARRAYS
!
     data lifix(1), lifix(2), lifix(3), lifix(4), lifix(5),&
     &   lifix(6), lifix(7), lifix(8) /'I','F','I','X','E','D',' ',' '/
     data livcv(1), livcv(2), livcv(3), livcv(4), livcv(5),&
     &   livcv(6), livcv(7), livcv(8) /'I','V','C','V',' ',' ',' ',' '/
     data lixm(1), lixm(2), lixm(3), lixm(4), lixm(5), lixm(6),&
     &   lixm(7), lixm(8) /'I','X','M',' ',' ',' ',' ',' '/
     data llds(1), llds(2), llds(3), llds(4), llds(5), llds(6),&
     &   llds(7), llds(8) /'L','D','S','T','A','K',' ',' '/
     data lm(1), lm(2), lm(3), lm(4), lm(5), lm(6), lm(7), lm(8) /'M',&
     &   ' ',' ',' ',' ',' ',' ',' '/
     data ln(1), ln(2), ln(3), ln(4), ln(5), ln(6), ln(7), ln(8) /'N',&
     &   ' ',' ',' ',' ',' ',' ',' '/
     data lnpar(1), lnpar(2), lnpar(3), lnpar(4), lnpar(5),&
    &   lnpar(6), lnpar(7), lnpar(8) /'N','P','A','R',' ',' ',' ',&
     &   ' '/
     data lnpare(1), lnpare(2), lnpare(3), lnpare(4), lnpare(5),&
    &   lnpare(6), lnpare(7), lnpare(8) /'N','P','A','R','E',' ',' ',&
     &   ' '/
     data lone(1), lone(2), lone(3), lone(4), lone(5),&
     &   lone(6), lone(7), lone(8) /'O','N','E',' ',' ',' ',' ',' '/
     data lscl(1), lscl(2), lscl(3), lscl(4), lscl(5),&
    &   lscl(6), lscl(7), lscl(8) /'S','C','A','L','E',' ',' ',&
     &   ' '/
     data lstep(1), lstep(2), lstep(3), lstep(4), lstep(5),&
     &   lstep(6), lstep(7), lstep(8) /'S','T','P',' ',' ',' ',' ',' '/
     data lwgt(1), lwgt(2), lwgt(3), lwgt(4), lwgt(5),&
     &   lwgt(6), lwgt(7), lwgt(8) /'W','T',' ',' ',' ',' ',' ',' '/
     data lzero(1), lzero(2), lzero(3), lzero(4), lzero(5),&
     &   lzero(6), lzero(7), lzero(8) /'Z','E','R','O',' ',' ',' ',' '/
!
!     ERROR CHECKING
!
      do 10 i=1,20
         error(i) = .false.
   10 continue
!
      ierr = 0
      head = .true.
      nnzw = n
!
      call eisge(nmsub, lnpar, npar, 1, 2, head, error(1), lone)
      if (error(1)) then
        error(7) = .true.
      else
        if (ifixed(1).lt.0) then
          call eisge(nmsub, ln, n, npar, 2, head, error(7), lnpar)
          if (weight) then
           call ervwt(nmsub, lwgt, wt, lwt, npar, head, nnzw,&
     &                 nzw, 2, error(3), lnpar)
          end if
        else
         call eiveq(nmsub, lifix, ifixed, npar, 0, 1, head, nnfix,&
     &               nfix, 1, error(2), lzero, lone)
          if (.not.error(2)) then
            call eisge(nmsub, ln, n, npare, 2, head, error(7), lnpare)
            if (weight) then
             call ervwt(nmsub, lwgt, wt, lwt, npare, head, nnzw,&
     &                   nzw, 2, error(3), lnpare)
            end if
          end if
        end if
      end if
!
      call eisge(nmsub, lm, m, 1, 2, head, error(4), lone)
!
     if (.not.error(7))&
     &   call eisge(nmsub, lixm, ixm, n, 3, head, error(5), ln)
!
!
      if (.not.error(1)) then
        if ((.not.error(2)) .and. (.not.error(7)))&
    &      call eisge(nmsub, llds, ldstak, ldsmin, 9, head, error(6),&
     &      llds)
!
        call ervgt(nmsub, lstep, stp, lstp, 0.0_wp, 0, head, 6, nv,&
     &      error(8), lzero)
!
        call ervgt(nmsub, lscl, scale, lscale, 0.0_wp, 0, head, 6, nv,&
     &      error(12), lzero)
!
        if (save)&
    &      call eisge(nmsub, livcv, ivcv, npare, 3, head, error(15),&
     &      lnpare)
      end if
!
!
      do 20 i=1,20
         if (error(i)) go to 30
   20 continue
      return
!
   30 continue
      ierr = 1
      return
!
      end
