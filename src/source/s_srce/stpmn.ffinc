!STPMN
     subroutine stpmn(j,xm,n,m,ixm,mdl,par,npar,&
    &   nexmpt,eta,reltol,scale,stp,nfail,ifail,cd,&
     &   itemp,fd,fdlast,fdsave,pv,pvmcd,pvnew,pvpcd,pvstp,pvtemp)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS IS THE MAIN SUBROUTINE FOR SELECTING THE STEP SIZE FOR
!     COMPUTING AGAINST NUMERICAL DERIVATIVES
!
!     WRITTEN BY  -  ROBERT B. SCHNABEL (CODED BY JANET R. DONALDSON)
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  APRIL 2, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   eta,reltol,scale,stp
     integer&
     &   ixm,j,m,n,nexmpt,nfail,npar
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
    &   cd(n),fd(n),fdlast(n),fdsave(n),par(npar),pv(n),pvmcd(n),&
     &   pvnew(n),pvpcd(n),pvstp(n),pvtemp(n),xm(ixm,m)
     integer&
     &   ifail(n),itemp(n)
!
!  SUBROUTINE ARGUMENTS
       external mdl
!
!  SCALARS IN COMMON
     real(kind=wp) ::&
     &   q
!
!  LOCAL SCALARS
     real(kind=wp) ::&
    &   abstol,curve,eta3,fplrs,parmx,pvmean,pvtyp,stpcd,stplow,&
     &   stpmid,stpup,tauabs,temp,third
     integer&
     &   i
!
!  EXTERNAL FUNCTIONS
     real(kind=wp) ::&
     &   r1mach
!       EXTERNAL R1MACH
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL CMPFD,GMEAN,RELCOM,STPADJ,STPSEL
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,max,sign,sqrt
!
!  COMMON BLOCKS
      common /notopt/q
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL ABSTOL
!        THE ABSOLUTE AGREEMENT TOLERANCE.
!     REAL CD(N)
!        THE CENTRAL DIFFERENCE QUOTIENT APPROXIMATION TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER.
!     REAL CURVE
!        A MEASURE OF THE CURVATURE OF THE MODEL.
!     REAL ETA
!        THE RELATIVE NOISE IN THE MODEL
!     REAL ETA3
!        THE CUBE ROOT OF ETA.
!     REAL FD(N)
!        THE FORWARD DIFFERENCE QUOTIENT APPROXIMATION TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER
!     REAL FDLAST(N)
!        THE FORWARD DIFFERENCE QUOTIENT APPROXIMATION TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER
!        COMPUTED WITH THE MOST RECENT STEP SIZE SELECTED.
!     REAL FDSAVE(N)
!        A VECTOR USED TO SAVE THE BEST OF THE
!        THE FORWARD DIFFERENCE QUOTIENT APPROXIMATIONS TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER
!     REAL FPLRS
!        THE FLOATING POINT LARGEST RELATIVE SPACING.
!     INTEGER I
!        AN INDEX VARIABLE.
!     INTEGER IFAIL(N)
!        THE VECTOR OF INDICATOR VARIABLES DESIGNATING WHETHER
!        THE STEP SIZE SELECTED WAS SATISFACTORY FOR A GIVEN
!        OBSERVATION AND PARAMETER.
!     INTEGER ITEMP(N)
!        A TEMPORARY STORAGE VECTOR.
!     INTEGER IXM
!        THE FIRST DIMENSION OF THE INDEPENDENT VARIABLE ARRAY.
!     INTEGER J
!        THE INDEX OF THE PARAMETER BEING EXAMINED.
!     INTEGER M
!        THE NUMBER OF INDEPENDENT VARIABLES.
!     EXTERNAL MDL
!        THE NAME OF THE USER SUPPLIED SUBROUTINE WHICH COMPUTES THE
!        PREDICTED VALUES BASED ON THE CURRENT PARAMETER ESTIMATES.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NPAR
!        THE NUMBER OF UNKNOWN PARAMETERS IN THE MODEL.
!     INTEGER NEXMPT
!        THE NUMBER OF OBSERVATIONS FOR WHICH A GIVEN STEP SIZE
!        DOES NOT HAVE TO BE SATISFACTORY AND THE SELECTED STEP
!        SIZE STILL BE CONSIDERED OK.
!     INTEGER NFAIL
!        THE VECTOR CONTAINING THE COUNTS FOR EACH PARAMETER
!        OF THE NUMBER OF OBSERVATIONS THE SELECTED STEP SIZE WAS
!        NOT SATISFACTORY.
!     REAL PAR(NPAR)
!        THE ARRAY IN WHICH THE CURRENT ESTIMATES OF THE UNKNOWN
!        PARAMETERS ARE STORED.
!     REAL PARMX
!        THE MAXIMUM OF THE CURRENT PARAMETER ESTIMATE AND THE
!        TYPICAL VALUE OF THAT PARAMETER
!     REAL PV(N)
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!     REAL PVMCD(N)
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J)-STPCD.
!     REAL PVMEAN
!        THE MEAN OF A FUNCTION OF THE PREDICTED VALUES.
!     REAL PVNEW(N)
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J)+STPNEW.
!     REAL PVPCD(N)
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J)+STPCD.
!     REAL PVSTP(N)
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J)+STP.
!     REAL PVTEMP(N)
!        A TEMPORARY STORAGE VECTOR FOR PREDICTED VALUES.
!     REAL PVTYP
!        THE TYPICAL SIZE OF THE PREDICTED VALUES OF THE MODEL.
!     REAL Q
!        A DUMMY VARIABLE WHICH IS USED, ALONG WITH COMMON NOTOPT (NO
!        OPTIMIZATION), TO COMPUTE THE STEP SIZE.
!     REAL SCALE
!        THE TYPICAL SIZE OF THE JTH PARAMETER.
!     REAL STP
!        THE STEP SIZE CURRENTLY BEING EXAMINED FOR THE FORWARD
!        DIFFERENCE APPROXIMATION TO THE DERIVATIVE.
!     REAL STPCD
!        THE STEP SIZE USED FOR THE CENTRAL DIFFERENCE QUOTIENT.
!     REAL STPLOW
!        THE LOWER LIMIT ON THE STEP SIZE.
!     REAL STPMID
!        THE MIDPOINT OF THE ACCEPTABLE RANGE OF THE STEP SIZE.
!     REAL STPUP
!        THE UPPER LIMIT ON THE STEP SIZE.
!     REAL RELTOL
!        THE RELATIVE AGREEMENT TOLERANCE.
!     REAL TAUABS
!        THE ABSOLUTE AGREEMENT TOLERANCE.
!     REAL TEMP
!        A TEMPORARY LOCATION IN WHICH THE CURRENT ESTIMATE OF THE JTH
!        PARAMETER IS STORED.
!     REAL THIRD
!        THE VALUE ONE THIRD.
!     REAL XM(IXM,M)
!        THE ARRAY IN WHICH ONE ROW OF THE INDEPENDENT VARIABLE ARRAY
!        IS STORED.
!
      fplrs = r1mach(4)
!
!     SET VARIOUS PARAMETERS NECESSARY FOR COMPUTING THE
!     OPTIMUM STEP SIZE
!
      third = 1.0e0 / 3.0e0
!
      eta3 = eta ** third
!
      parmx = max(abs(par(j)), abs(scale))
      if (parmx .eq. 0.0e0) parmx = 1.0e0
!
      stpcd = ((3.0e0 ** third) * eta3 * parmx * sign(1.0e0, par(j)))
!
      q = stpcd + par(j)
      stpcd = q - par(j)
!
      temp = par(j)
!
      par(j) = temp + stpcd
      call mdl(par, npar, xm, n, m, ixm, pvpcd)
!
      par(j) = temp - stpcd
      call mdl(par, npar, xm, n, m, ixm, pvmcd)
!
      par(j) = temp
!
!     ESTIMATE CURVATURE BY SECOND DERIVATIVE OF MODEL WITH RESPECT TO
!     PAR(J)
!
      do 10 i = 1, n
         pvtemp(i) = abs((pvpcd(i)+pvmcd(i)) - 2*pv(i))
         if (pvtemp(i).eq.0.0e0) then
            if (pv(i).eq.0.0e0) then
               pvtemp(i) = fplrs
            else
               pvtemp(i) = fplrs*abs(pv(i))
            end if
         end if
   10 continue
!
!     COMPUTE THE GEOMETRIC MEAN
!
      call gmean(pvtemp, n, pvmean)
!
      curve = abs(pvmean / stpcd / stpcd)
!
!     COMPUTE A TYPICAL VALUE OF THE MODEL
!
      do 20 i = 1, n
         pvtemp(i) = abs(pvpcd(i) + pv(i) + pvmcd(i))
         if (pvtemp(i).eq.0.0e0) then
            if (pv(i).eq.0.0e0) then
               pvtemp(i) = fplrs
            else
               pvtemp(i) = fplrs*abs(pv(i))
            end if
         end if
   20 continue
!
      call gmean(pvtemp, n, pvmean)
!
      pvtyp = abs(pvmean / 3.0e0)
!
!     SET VALUES REPRESENTATIVE OF THE RANGE THE STEP SIZE
!     CAN BE EXPECTED TO TAKE
!
      stpup = (eta3) * parmx
      stplow = (eta3) * stpup
      stpmid = sqrt(stplow) * sqrt(stpup)
!
!     SELECT AN OPTIMUM STARTING STEP SIZE
!
      if (curve.eq.0.0e0) then
         stp = parmx * sign(1.0e0, par(j))
      else
        stp = (2.0e0 * sqrt(eta) * sqrt(pvtyp) / sqrt(curve)) *&
     &         sign(1.0e0,par(j))
      end if
!
      if (abs(stp).gt.parmx) stp = parmx * sign(1.0e0,par(j))
!
      q = stp + par(j)
      stp = q - par(j)
!
      if (stp.eq.0.0e0) then
         stp = fplrs * par(j)
         if (stp.eq.0.0e0) stp = fplrs
!
   30    continue
         q = stp + par(j)
         stp = q - par(j)
!
         if (stp.eq.0.0e0) then
            stp = 2.0e0 * stp
            go to 30
         end if
      end if
!
!     COMPUTE THE ABSOLUTE TOLERANCES
!
      abstol = 10.0e0 * eta * pvtyp
!
      tauabs = 2.0e0 * sqrt(eta) * sqrt(pvtyp)
      if (curve .ne. 0.0e0) tauabs = tauabs * sqrt(curve)
!
      temp = par(j)
      par(j) = temp + stp
!
      call mdl(par, npar, xm, n, m, ixm, pvstp)
!
      par(j) = temp
!
!     COMPUTE THE FORWARD AND CENTRAL DIFFERENCE QUOTIENT ESTIMATE
!     OF THE DERIVATIVE
!
      call cmpfd(n, stp, pvstp, pv, fd)
!
      call cmpfd(n, 2.0e0*stpcd, pvpcd, pvmcd, cd)
!
!     COMPUTE THE NUMBER OF OBSERVATIONS FOR WHICH THE FD DOES NOT
!     AGREE WITH THE CD WITHIN THE TOLERANCE SPECIFIED.
!
      call relcom(n, fd, cd, reltol, abstol, nfail, ifail)
!
!     IF THE FORWARD DIFFERENCE APPROXIMATION DOES NOT AGREE WITHIN
!     TOLERANCE FOR MORE THAN   NEXMPT   OBSERVATION, SELECT NEW
!     VALUE OF THE STEP SIZE, ELSE ADJUST THE STEP SIZE AND RETURN.
!
      if (nfail.gt.nexmpt) then
!
!        SELECT NEW VALUE OF THE STEP SIZE
!
           call stpsel(xm, n, m, ixm, mdl, par, npar,&
    &         nexmpt, stp, nfail, ifail, j, eta3, reltol, abstol,&
    &         tauabs, stplow,&
     &         stpmid, stpup, itemp, fd, fdlast, fdsave, pv, pvnew)
      else
!
!        ADJUST THE CURRENT STEP SIZE VALUE
!
           call stpadj(xm, n, m, ixm, mdl, par, npar,&
    &         nexmpt, stp, nfail, ifail, j, reltol, abstol, stplow,&
     &         stpmid, stpup, itemp, fd, fdlast, pv, pvnew)
!
      end if
!
!     CONVERT SELECTED ABSOLUTE STEP SIZE TO RELATIVE STEP SIZE
!
      stp = abs(stp) / parmx
!
      return
!
      end
