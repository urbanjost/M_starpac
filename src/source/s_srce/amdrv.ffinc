!AMDRV
     subroutine amdrv (mdlts3, drv, done, ifixd, par, npar, xm, n, m,&
     &   ixm, nrests, rests, d, weight, wt, lwt, stpt, lstpt, scl, lscl)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS ROUTINE COMPUTES THE NUMERICAL APPROXIMATIONS TO THE
!     DERIVATIVE MATRIX (JACOBIAN).
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 2, 1985
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   ixm,lscl,lstpt,lwt,m,n,npar,nrests
     logical&
     &   done,weight
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   d(nrests,*),par(*),rests(*),scl(*),stpt(*),wt(*),xm(ixm,*)
     integer&
     &   ifixd(*)
!
!  SUBROUTINE ARGUMENTS
       external drv,mdlts3
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   pj,stpj
     integer&
     &   i,j,jpk
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,max,sign
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: D(NRESTS,NPAR)
!        THE FIRST DERIVATIVE OF THE MODEL (JACOBIAN).
!     EXTERNAL DRV
!        THE NAME OF THE USER SUPPLIED SUBROUTINE WHICH COMPUTES THE
!        DERIVATIVE (JACOBIAN) MATRIX OF THE MODEL.
!     LOGICAL DONE
!        THE VARIABLE USED TO INDICATE WHETHER THIS IS THE FINAL
!        COMPUTATION OF THE JACOBIAN OR NOT.
!     INTEGER I
!        AN INDEX VARIABLE.
!     INTEGER IERR
!        THE VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST.
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED.
!        IF IERR .GE. 1, ERRORS WERE DETECTED.
!     INTEGER IFIXD(NPAR)
!        THE INDICATOR VALUES USED TO DESIGNATE WHETHER THE
!        PARAMETERS ARE TO BE OPTIMIZED OR ARE TO BE HELD FIXED.
!        IF IFIXED(I).NE.0, THEN PAR(I) WILL BE HELD FIXED.
!        IF IFIXED(I).EQ.0, THEN PAR(I) WILL BE OPTIMIZED.
!     INTEGER IXM
!        THE FIRST DIMENSION OF MATRIX XM.
!     INTEGER J
!        AN INDEX VARIABLE.
!     INTEGER JPK
!        AN INDEX VARIABLE.
!     INTEGER LSCL
!        THE DIMENSION OF VECTOR SCL.
!     INTEGER LSTPT
!        THE DIMENSION OF VECTOR STPT.
!     INTEGER LWT
!        THE DIMENSION OF VECTOR WT.
!     INTEGER M
!        THE NUMBER OF INDEPENDENT VARIABLES.
!     EXTERNAL MDLTS3
!        THE STARPAC FORMAT SUBROUTINE FOR COMPUTING THE ARIMA MODEL
!        RESIDUALS.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NPAR
!        THE NUMBER OF PARAMETERS IN THE MODEL.
!     INTEGER NRESTS
!        THE MAXIMUM NUMBER OF RESIDUALS TO BE COMPUTED.
!     REAL(KIND=WP) :: PAR(NPAR)
!        THE CURRENT ESTIMATES OF THE PARAMETERS.
!     REAL(KIND=WP) :: PJ
!        A TEMPORARY LOCATION FOR STORAGE OF THE JTH PARAMETER.
!     REAL(KIND=WP) :: RESTS(NRESTS)
!        THE RESIDUALS FROM THE ARIMA MODEL.
!     REAL(KIND=WP) :: SCL(LSCL)
!        THE SCALE VALUES.
!     REAL(KIND=WP) :: STPT(LSTPT)
!        THE STEP SIZE ARRAY.
!     REAL(KIND=WP) :: STPJ
!        THE JTH STEP SIZE.
!     LOGICAL WEIGHT
!        THE VARIABLE USED TO INDICATE WHETHER WEIGHTED ANALYSIS IS TO
!        BE PERFORMED (TRUE) OR NOT (FALSE).
!     REAL(KIND=WP) :: WT(LWT)
!        THE USER SUPPLIED WEIGHTS.
!     REAL(KIND=WP) :: XM(IXM,M)
!        THE INDEPENDENT VARIABLE.
!
!     COMPUTE FINITE-DIFFERENCE JACOBIAN OF THE OPTIMIZED PARAMETERS
!
      jpk = 0
!
      do 20 j=1,npar
!
         if (ifixd(j).ne.0) go to 20
!
         jpk = jpk + 1
!
         pj = par(j)
         if (scl(jpk).ne.0.0e0) then
           stpj = stpt(j)*sign(1.0_wp,par(j))*max(abs(par(j)),1.0_wp/&
     &             abs(scl(jpk)))
         else
            if (par(j).ne.0.0e0) then
               stpj = stpt(j)*sign(1.0_wp,par(j))*abs(par(j))
            else
               stpj = stpt(j)
            end if
         end if
!
         stpj = stpj + par(j)
         stpj = stpj - par(j)
!
         par(j) = pj + stpj
         call mdlts3(par, npar, xm, n, m, ixm, d(1,j))
!
         do 10 i=1,nrests
            d(i,jpk) = (-rests(i)+d(i,j))/stpj
   10    continue
!
         par(j) = pj
!
   20 continue
!
      return
!
      end
