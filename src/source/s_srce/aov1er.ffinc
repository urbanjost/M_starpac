!AOV1ER
     subroutine aov1er(y, tag, n, igstat, nztags, ng, ldstak, nmsub,&
     &   index, isaov1, nall0)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS ROUTINE DOES PRELIMINARY CHECKING FOR ERRORS IN THE INPUT
!     PARAMETERS OF THE ONEWAY FAMILY.
!
!     WRITTEN BY -
!        LINDA L. MITCHELL AND JANET R. DONALDSON
!        STATISTICAL ENGINEERING DIVISION
!        NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  MAY 17, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   igstat,index,isaov1,ldstak,n,nall0,ng,nztags
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   tag(*),y(*)
     character&
     &   nmsub(6)*1
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  ARRAYS IN COMMON
      double precision dstak(12)
!
!  LOCAL SCALARS
     integer&
     &   i,iprt,j,ldsmin,nv
     logical&
     &   error,head
!
!  LOCAL ARRAYS
     integer&
     &   istak(12)
     character&
    &   ligsta(8)*1,llds(8)*1,ln(8)*1,lng(8)*1,ltag(8)*1,&
     &   ltwo(8)*1,lzero(8)*1
!
!  EXTERNAL FUNCTIONS
!      INTEGER
!     +   STKST
!      EXTERNAL STKST
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL EISGE,EISII,ERVGT,GENI,IPRINT,LDSCMP,SRTIRR,SRTRRI,
!     +   STKCLR,STKSET
!
!  COMMON BLOCKS
      common /cstak/dstak
      common /errchk/ierr
!
!  EQUIVALENCES
      equivalence (dstak(1),istak(1))
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     DOUBLE PRECISION DSTAK(12)
!        THE DOUBLE PRECISION VERSION OF THE /CSTAK/ WORK AREA.
!     LOGICAL ERROR
!        SET TRUE IF THE ERROR CHECKING ROUTINE FOUND ANY ERRORS
!     LOGICAL HEAD
!        INDICATES WHETHER HEADING NEEDS TO BE PRINTED
!        TRUE - YES, NEEDS TO BE PRINTED
!        FALSE - NO, HAS BEEN PRINTED
!     INTEGER I
!        *
!     INTEGER IERR
!        IF IERR .NE. 0, THEN ERRORS WHERE FOUND IN THE PARAMETERS
!     INTEGER IGSTAT
!        *
!     INTEGER INDEX
!        THE STARTING LOCATION IN THE STACH AREA OF THE INDEX FOR
!        THE SORTED TAGS.
!     INTEGER IPRT
!        THE OUTPUT LOGICAL UNIT NUMBER
!     INTEGER ISAOV1
!        AN INDICATOR VARIABLE USED FOR THE COMPUTATION OF WORK
!        SPACE.  IF ISAOV1 = 0, THE CALLING ROUTINE IS AOV1S.  IF
!        ISAOV1 = 1, THE CALLING ROUTINE IS AOV1.
!     INTEGER ISTAK(12)
!        THE INTEGER VERSION OF THE /CSTAK/ WORK AREA.
!     INTEGER J
!        *
!     INTEGER LDSMIN
!        THE MINIMUM SIZE ALLOWED FOR THE STACK
!     INTEGER LDSTAK
!        SIZE OF STACK ALLOCATED IN THE USERS MAIN PROGRAM
!     CHARACTER*1 LIGSTA(8), LLDS(8), LN(8), LNG(8), LTAG(8),
!    *   LTWO(8), LZERO(8)
!        THE ARRAY(S) CONTAINING THE NAME(S) OF THE VARIABLE(S) CHECKED
!        ERRORS
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS
!     INTEGER NALL0
!        OUTPUT PARAMETER.  NUMBER OF STACK ALLOCATIONS AFTER
!        STACK IS INITIALIZED.
!     INTEGER NG
!        *
!     CHARACTER*1 NMSUB(6)
!        NAME OF THE CALLING SUBROUTINE
!     INTEGER NV
!        THE NUMBER OF VALUES LESS THAN OR EQUAL TO ZERO.
!     INTEGER NZTAGS
!        THE NUMBER OF POSITIVE NON-ZERO TAGS, TO BE DETERMINED BY
!        THIS ROUTINE
!     REAL TAG(N)
!        THE VECTOR OF TAGS.
!     REAL Y(N)
!        THE VECTOR OF OBSERVATIONS.
!
     data  ligsta(1),ligsta(2),ligsta(3),ligsta(4),ligsta(5),ligsta(6),&
    &      ligsta(7),ligsta(8)&
     &     / 'I', 'G', 'S', 'T', 'A', 'T', ' ', ' '/
     data   llds(1),  llds(2),  llds(3),  llds(4),  llds(5),  llds(6),&
    &       llds(7),  llds(8)&
     &     / 'L', 'D', 'S', 'T', 'A', 'K', ' ', ' '/
     data     ln(1),    ln(2),    ln(3),    ln(4),    ln(5),    ln(6),&
    &         ln(7),    ln(8)&
     &     / 'N', ' ', ' ', ' ', ' ', ' ', ' ', ' '/
     data    lng(1),   lng(2),   lng(3),   lng(4),   lng(5),   lng(6),&
    &        lng(7),   lng(8)&
     &     / 'N', 'G', ' ', ' ', ' ', ' ', ' ', ' '/
     data   ltag(1),  ltag(2),  ltag(3),  ltag(4),  ltag(5),  ltag(6),&
    &       ltag(7),  ltag(8)&
     &     / 'T', 'A', 'G', ' ', ' ', ' ', ' ', ' '/
     data   ltwo(1),  ltwo(2),  ltwo(3),  ltwo(4),  ltwo(5),  ltwo(6),&
    &       ltwo(7),  ltwo(8)&
     &     / 'T', 'W', 'O', ' ', ' ', ' ', ' ', ' '/
     data  lzero(1), lzero(2), lzero(3), lzero(4), lzero(5), lzero(6),&
    &      lzero(7), lzero(8)&
     &     / 'Z', 'E', 'R', 'O', ' ', ' ', ' ', ' '/
!
!     COMMENCE BODY OF ROUTINE
!
      ierr = 0
      head = .true.
!
!     SET UP OUTPUT UNIT
      call iprint(iprt)
!
!     BEGIN ERROR CHECKING.
!
!     NUMBER OF OBSERVATIONS LESS THAN 2
!
      call eisge(nmsub, ln, n, 2, 2, head, error, ltwo)
      if (error) go to 50
!
!     NUMBER OF NON-ZERO TAGS LESS THAN 2
!
     call ervgt(nmsub, ltag, tag, n, 0.0e0, (n-2), head, 7, nv, error,&
     &   lzero)
      if (error) go to 50
!
      nztags = n - nv
!
!     STACK MUST BE LARGE ENOUGH FOR A VECTOR OF LENGTH N TO CONTINUE
!
      call ldscmp(1, 0, n, 0, 0, 0, 'S', 0, ldsmin)
      call eisge(nmsub, llds, ldstak, ldsmin, 9, head, error, llds)
      if (error) write(iprt, 1000)
      if (error) go to 50
!
!     INITIALIZE STACK AND NALL0
!
      call stkset(ldstak, 4)
      nall0 = stkst(1)
!
      index = stkget(n,2)
!
!     SORT TAG VECTOR CARRYING ALONG INDEX TO ORIGINAL ORDER AND THE
!     VECTOR OF OBSERVATIONS
!
      call geni(istak(index), n, 1, 1)
      call srtirr(istak(index), y, n, tag)
!
!     COUNT THE NUMBER OF DIFFERENT TAG VALUES
!
      j = n - nztags + 2
      ng = 1
      do 10 i=j,n
         if (tag(i).gt.tag(i-1)) ng = ng + 1
   10 continue
!
!     LESS THAN 2 DIFFERENT TAG GROUPS
!
     call eisii(nmsub, lng, ng, 2, nztags-1, 3, head, error,&
     &  ltwo, ln)
      if (error) go to 40
!
!     CHECK THAT DIMENSION OF STATISTICS MATRIX IS SUFFICIENT
!
      call eisge(nmsub, ligsta, igstat, ng, 3, head, error, lng)
      if (error) go to 40
!
!     COMPUTE AND CHECK FOR SUFFICIENT STACK
!
     call ldscmp(11, 0, n+nztags, 0, 0, 0,&
     &            'S', isaov1*4*ng+4*ng+nztags, ldsmin)
!
      call eisge(nmsub, llds, ldstak, ldsmin, 9, head, error, llds)
      if (.not.error) return
!
   40 continue
!
!     REORDER DATA
!
      call srtrri(tag, y, n, istak(index))
!
!     CLEAR STACK, IN CASE WHERE ERROR FOLLOWS ALLOCATION OF STACK.
!
      call stkclr (nall0)
!
   50 continue
      ierr = 1
      return
!
!     FORMAT STATEMENTS
!
1000 format(/' NOTE.  THE VALUE OF LDSTAK MENTIONED ABOVE IS THE',&
    &  ' MINIMUM NECESSARY'/&
    &  ' TO CONTINUE CHECKING FOR ERRORS AND',&
    &  ' TO CALCULATE THE CORRECT VALUE'/&
    &  ' OF LDSTAK.  THE CORRECT',&
    &  ' VALUE WILL BE LARGER.  CONSULT THE DOCUMENTATION'/&
     &  ' FOR THE FORMULAS USED TO CALCULATE LDSTAK.')
      end
