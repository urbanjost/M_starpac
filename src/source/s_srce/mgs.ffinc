!MGS
      subroutine mgs(a, b, n, np, x, c, d, r, ir, ia, ier)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS ROUTINE COMPUTES THE SOLUTION  X  TO THE LINEAR SYSTEM OF
!     EQUATIONS  AX=B, USING THE METHOD OF MODIFIED GRAM-SCHMIDT.
!     THE MATRIX A IS DECOMPOSED INTO THREE MATRICES
!        Q  AN ORTHOGONAL MATRIX
!        D  A DIAGONAL MATRIX AND
!        R  AN UPPER TRIANGULAR MATRIX
!     THE SOLUTION VECTOR X IS THE VECTOR WHICH SOLVES THE SYSTEM
!     OF EQUATIONS  RX = C
!     X, A, AND B ARE NOT PRESERVED ON OUTPUT
!
!     ADAPTED FROM OMNITAB II BY -
!                  JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  MAY 17, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   ia,ier,ir,n,np
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   a(ia,np),b(n),c(np),d(np),r(ir,np),x(np)
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   sm1,sm2
     integer&
     &   i,j,jj,k,npjjmj
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL A(IA,NP)
!           THE COEFFICIENTS MATRIX (NOT PRESERVED ON OUTPUT)
!     REAL B(N)
!           THE CONSTANT COLUMN MATRIX OF THE SYSTEM (NOT PRESERVED
!           ON OUTPUT)
!     REAL C(NP)
!           THE MATRIX C DESCRIBED ABOVE
!     REAL D(NP)
!           THE DIAGONAL ELEMENTS OF THE MATRIX D DESCRIBED ABOVE
!     INTEGER I
!           *
!     INTEGER IA
!           THE ROW DIMENSION OF A.
!     INTEGER IER
!           *
!     INTEGER IR
!           THE ROW DIMENSION OF R.
!     INTEGER J
!           *
!     INTEGER JJ
!           *
!     INTEGER K
!           *
!     INTEGER N
!           THE NUMBER OF OBSERVATIONS
!     INTEGER NP
!           THE NUMBER OF PARAMETERS
!     INTEGER NPJJMJ
!           *
!     REAL R(IR,NP)
!           THE UPPER ELEMENTS OF THE MATRIX R DESCRIBED ABOVE
!     REAL SM1
!           *
!     REAL SM2
!           *
!     REAL X(NP)
!           THE SOLUTION MATRIX
!
!
      ier = 0
!
      sm1 = 0.0e0
      sm2 = 0.0e0
      do 10 i=1,n
         sm1 = a(i,1)*a(i,1) + sm1
         sm2 = a(i,1)*b(i) + sm2
   10 continue
      if (sm1.eq.0.0e0) go to 100
      d(1) = sm1
      c(1) = sm2/sm1
      if (np.eq.1) go to 70
      do 60 k=2,np
         do 40 j=k,np
            sm1 = 0.0e0
            do 20 i=1,n
               sm1 = a(i,k-1)*a(i,j) + sm1
   20       continue
            r(k-1,j) = sm1/d(k-1)
            do 30 i=1,n
               a(i,j) = a(i,j) - a(i,k-1)*r(k-1,j)
   30       continue
   40    continue
         sm1 = 0.0e0
         sm2 = 0.0e0
         do 50 i=1,n
            b(i) = b(i) - a(i,k-1)*c(k-1)
            sm1 = a(i,k)*a(i,k) + sm1
            sm2 = a(i,k)*b(i) + sm2
   50    continue
         if (sm1.eq.0.0e0) go to 100
         d(k) = sm1
         c(k) = sm2/sm1
   60 continue
!
!     COMPLETE BACKSOLVE
!
   70 x(np) = c(np)
      if (np.eq.1) return
      do 90 i=2,np
         k = np + 1 - i
         jj = k + 1
         sm1 = 0.0e0
         do 80 j=jj,np
            npjjmj = np + jj - j
            sm1 = r(k,npjjmj)*x(npjjmj) + sm1
   80    continue
         x(k) = c(k) - sm1
   90 continue
      return
  100 ier = 1
      return
      end
