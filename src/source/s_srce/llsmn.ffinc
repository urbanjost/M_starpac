!LLSMN
     subroutine llsmn(y, x, wt, n, m, npar, ix, res, par, nnzw,&
    &   rsd, pv, sdpv, sdres, iptout, wy, xw, vcv, fc, red,&
     &   t, par1, acc, ifit, weight, c, llhdr, page, wide)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS IS THE MAIN PROGRAM FOR THE LINEAR LEAST SQUARES FITTING
!     PROGRAMS
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 29, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   rsd
     integer&
     &   ifit,ix,m,n,nnzw,npar
     logical&
     &   page,weight,wide
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
    &   acc(npar),c(npar),fc(n,npar),par(npar),par1(npar),pv(n),&
    &   red(npar),res(n),sdpv(n),sdres(n),t(npar,npar),&
     &   vcv(npar,npar),wt(n),wy(n),x(ix,m),xw(n,npar),y(n)
     integer&
     &   iptout(4)
!
!  SUBROUTINE ARGUMENTS
       external llhdr
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  LOCAL SCALARS
     real(kind=wp) ::&
    &   cond,df,fplm,fplrs,fpspm,probt,probt1,px,r2,ratio,ratio1,&
     &   rsd1,rss,rss1,rvar,rvar1,sdc,sdc1,sm,td,wtsqrt,wtsum,wtym,ysum
     integer&
     &   i,idf,idf1,ier,iprt,irefit,isubhd,j,k,nc
     logical&
     &   const
!
!  LOCAL ARRAYS
     real(kind=wp) ::&
     &   det(2)
!
!  EXTERNAL FUNCTIONS
!      REAL(KIND=WP) ::
!     +   CDFT,R1MACH
!      EXTERNAL CDFT,R1MACH
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL ACCDIG,FITPT1,FITPT2,IPRINT,MGS,OANOVA,VCVOUT
!      EXTERNAL STRCO,STRDI
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,max,sqrt
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: ACC(NPAR)
!        THE NUMBER OF ACCURATE DIGITS.
!     REAL(KIND=WP) :: C(NPAR)
!        A WORK VECTOR.
!     REAL(KIND=WP) :: COND
!        THE CONDITION NUMBER OF THE DESIGN MATRIX.
!     LOGICAL CONST
!        AN INDICATOR VALUE DESIGNATING WHETHER THE FIRST COLUMN OF
!        THE DESIGN MATRIX IS ALL ONES FOR A CONSTANT.
!     REAL(KIND=WP) :: DET(2)
!        THE DETERMINENT.
!     REAL(KIND=WP) :: DF
!        THE DEGREES OF FREEDOM.
!     REAL(KIND=WP) :: FC(N,NPAR)
!        THE ORTHONORMALIZATION MATRIX.
!     REAL(KIND=WP) :: FPLM
!        THE FLOATING POINT LARGEST MAGNITUDE.
!     REAL(KIND=WP) :: FPLRS
!        THE FLOATING POINT LARGEST RELATIVE SPACING.
!     REAL(KIND=WP) :: FPSPM
!        THE FLOATING POINT SMALLEST POSITIVE MAGNITUDE.
!     INTEGER I
!        AN INDEX.
!     INTEGER IDF
!        THE DEGREES OF FREEDOM
!     INTEGER IDF1
!        THE DEGREES OF FREEDOM FOR THE FIT WITHOUT THE LAST INDEPENDENT
!        VARIABLE.
!     INTEGER IER
!        THE ERROR FLAG RETURNED BY THE INVERSION ROUTINES.
!     INTEGER IERR
!        THE INTEGER VALUE DESIGNATING WHETHER ANY ERRORS WERE
!        DETECTED IN THE PARAMETER LIST.
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED.
!        IF IERR .EQ. 1, ERRORS WERE DETECTED.
!     INTEGER IFIT
!        THE INDICATOR VALUE DESIGNATING WHETHER THE FIT IS OF A
!        GENERAL MODEL (IFIT=3) OR A POLYNOMIAL MODEL (IFIT=1).
!     INTEGER IPRT
!        THE UNIT NUMBER FOR PRINTED OUTPUT.
!     INTEGER IPTOUT(4)
!        THE VARIABLE USED TO CONTROL PRINTED OUTPUT FOR EACH SECTION.
!     INTEGER IREFIT
!        AN INDICATOR USED TO DESIGNATE WHETHER THE FIT IS OF THE
!        FULL DESIGN MATRIX (IREFIT=0) OR IS OMITTING THE LAST
!        INDEPENDENT VARIABLE (IREFIT=1).
!     INTEGER ISUBHD
!        AN INDICATOR VALUE SPECIFYING SUBHEADINGS TO BE PRINTED.
!     INTEGER IX
!        THE FIRST DIMENSION OF THE MATRIX X.
!     INTEGER J
!        AN INDEX.
!     INTEGER K
!        AN INDEX.
!     EXTERNAL LLHDR
!        THE NAME OF THE ROUTINE THAT PRODUCED THE HEADING.
!     INTEGER M
!        THE NUMBER OF INDEPENDENT VARIABLES.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NC
!        THE NUMBER OF PARAMETERS BEING FIT.
!     INTEGER NNZW
!        THE NUMBER OF NON ZERO WEIGHTS.
!     INTEGER NPAR
!        THE NUMBER OF PARAMETERS.
!     LOGICAL PAGE
!        THE VARIABLE USED TO INDICATE WHETHER A GIVEN SECTION OF
!        THE OUTPUT IS TO BEGIN ON A NEW PAGE (TRUE) OR NOT (FALSE).
!     REAL(KIND=WP) :: PAR(NPAR)
!        THE PARAMETERS  TO BE ESTIMATED.
!     REAL(KIND=WP) :: PAR1(NPAR)
!        THE PARAMETERS TO BE ESTIMATED OMMITTING THE LAST
!        INDEPENDENT VARIABLE.
!     REAL(KIND=WP) :: PROBT
!        ...
!     REAL(KIND=WP) :: PROBT1
!        ...
!     REAL(KIND=WP) :: PV(N)
!        THE PREDICTED VALUES.
!     REAL(KIND=WP) :: PX
!        A WORK VARIABLE.
!     REAL(KIND=WP) :: RATIO
!        THE RATIO OF THE PARAMETERS TO THEIR STANDARD DEVIATIONS.
!     REAL(KIND=WP) :: RATIO1
!        THE RATIO OF THE PARAMETERS COMPUTED OMITTING THE LAST
!        INDEPENDENT VARIABLE TO THEIR STANDARD DEVIATIONS.
!     REAL(KIND=WP) :: RED(NPAR)
!        THE REDUCTION TO THE SUM OF SQUARES DUE TO EACH PARAMETER.
!     REAL(KIND=WP) :: RES(N)
!        THE RESIDUALS.
!     REAL(KIND=WP) :: RSD
!        THE RESIDUAL STANDARD DEVIATION.
!     REAL(KIND=WP) :: RSD1
!        THE RESIDUAL STANDARD DEVIATION FROM THE FIT OMITTING
!        THE LAST INDEPENDENT VARIABLE.
!     REAL(KIND=WP) :: RSS
!        THE RESIDUAL SUM OF SQUARES.
!     REAL(KIND=WP) :: RSS1
!        THE RESIDUAL SUM OF SQUARES FROM THE FIT OMITTING
!        THE LAST INDEPENDENT VARIABLE.
!     REAL(KIND=WP) :: RVAR
!        THE RESIDUAL VARIANCE.
!     REAL(KIND=WP) :: RVAR1
!        THE RESIDUAL VARIANCE FROM THE FIT OMITTING
!        THE LAST INDEPENDENT VARIABLE.
!     REAL(KIND=WP) :: R2
!        THE MULTIPLE CORRELATION PARAMETER.
!     REAL(KIND=WP) :: SDC
!        THE ESTIMATED STANDARD DEVIATIONS OF THE PARAMETERS.
!     REAL(KIND=WP) :: SDC1
!        THE ESTIMATED STANDARD DEVIATIONS OF THE PARAMETERS OMITTING
!        THE LAST INDEPENDENT VARIABLE.
!     REAL(KIND=WP) :: SDPV(N)
!        THE STANDARD DEVIATIONS OF THE PREDICTED VALUES.
!     REAL(KIND=WP) :: SDRES(N)
!        THE STANDARDIZED RESIDUALS.
!     REAL(KIND=WP) :: SM
!        A WORK VARIABLE.
!     REAL(KIND=WP) :: T(NPAR,NPAR)
!        THE TRIANGULAR MATRIX FROM THE DECOMPOSITION.
!     REAL(KIND=WP) :: TD
!        A WORK VARIABLE.
!     REAL(KIND=WP) :: VCV(NPAR,NPAR)
!        THE VARIANCE COVARIANCE MATRIX.
!     LOGICAL WEIGHT
!        THE VARIABLE USED TO INDICATE WHETHER WEIGHTED ANALYSIS IS TO
!        BE PERFORMED (TRUE) OR NOT (FALSE).
!     LOGICAL WIDE
!        THE VARIABLE USED TO INDICATE WHETHER THE HEADING SHOULD
!        BE FULL WIDTH (TRUE) OR NOT (FALSE).
!     REAL(KIND=WP) :: WT(N)
!        THE WEIGHTS (A DUMMY VECTOR IN THE UNWEIGHTED CASE).
!     REAL(KIND=WP) :: WTSQRT
!        THE SQUARE ROOT OF THE WEIGHT.
!     REAL(KIND=WP) :: WTSUM
!        THE SUM OF THE WEIGHTS.
!     REAL(KIND=WP) :: WTYM
!        THE SUM OF THE WEIGHTED DEPENDENT VARIABLES.
!     REAL(KIND=WP) :: WY(N)
!        THE VECTOR CONTAINING SQRT(WT)*Y.
!     REAL(KIND=WP) :: X(IX,M)
!        THE INDEPENDENT VARIABLE.
!     REAL(KIND=WP) :: XW(N,NPAR)
!        THE MATRIX CONTAINING X * SQRT(WT).
!     REAL(KIND=WP) :: Y(N)
!        THE DEPENDENT VARIABLE.
!     REAL(KIND=WP) :: YSUM
!        THE SUM OF THE WEIGHTED DEPENDENT VARIABLES SQUARED.
!
      call iprint(iprt)
!
!     INITIALIZE VARIABLES
!
      fplm = r1mach(2)
      fplrs = r1mach(4)
      fpspm = r1mach(1)
      nc = npar
      idf = nnzw - nc
      df = idf
!
      r2 = 0.0
      rvar1 = 0.0
      rsd1 = 0.0
      j = 0
      idf1 = 0
      const = .false.
!
      ysum = 0.0e0
      wtsum = 0.0e0
      do 10 i=1,n
         if (wt(i).le.0.0e0) go to 10
         ysum = ysum + wt(i)*y(i)*y(i)
         wtsum = wtsum + wt(i)
   10 continue
!
!     BEGIN FIT
!
      irefit = -1
!
!     IF IREFIT IS EQUAL TO 1 FIT IS OMITTING THE LAST VARIABLE
!
   50 irefit = irefit + 1
!
!     COMPUTE WORKING VECTORS
!
      wtym = 0.0e0
      i = 0
      do 70 k=1,n
         if (wt(k).le.0.0e0) go to 70
         wtsqrt = sqrt(wt(k))
         i = i + 1
         px = wtsqrt
         do 60 j=1,nc
            if (ifit.eq.1 .and. j.ge.2) px = px*x(k,1)
            if (ifit.eq.3) px = x(k,j)*wtsqrt
            xw(i,j) = px
   60    continue
!
!     COMPUTE WY ( WEIGHTS * Y VECTOR )
!
         wy(i) = y(k)*wtsqrt
         wtym = wtym + wt(k)*y(k)
   70 continue
      wtym = wtym/wtsum
!
!     COMPUTE ESTIMATED VALUES OF PARAMETERS
!
      if (irefit.eq.1) go to 80
      ier = 0
      call mgs(xw, wy, nnzw, nc, par, c, t(1,1), t, npar, n, ier)
      if (ier.eq.0) go to 90
      ierr = 3
      isubhd = 0
      call llhdr(page, wide, isubhd)
      write (iprt,1160)
      write (iprt,1150)
      return
   80 continue
      ier = 0
      call mgs(xw, wy, nnzw, nc, par1, c, t(1,1), t, npar, n, ier)
!
!     COMPUTE PREDICTED VALUES (PV) AND RESIDUALS (RES)
!             RESIDUAL SUM OF SQUARES (RSS) AND
!             RESIDUAL STANDARD DEVIATION (RSD) AND
!             SUM OF WEIGHTS (WTSUM) AND
!             RESIDUAL VARAINCE (RVAR)
!
   90 rss = 0.0e0
      rss1 = 0.0e0
      do 120 i=1,n
         sm = 0.0e0
         px = 1.0e0
         do 100 j=1,nc
            if (ifit.eq.1 .and. j.ge.2) px = px*x(i,1)
            if (ifit.eq.3) px = x(i,j)
            if (irefit.eq.0) sm = sm + par(j)*px
            if (irefit.eq.1) sm = sm + par1(j)*px
  100    continue
         if (irefit.eq.0) then
            pv(i) = sm
            res(i) = y(i) - pv(i)
            rss = rss + res(i)*wt(i)*res(i)
         else
            rss1 = rss1 + (y(i)-sm)*wt(i)*(y(i)-sm)
         end if
  120 continue
!
      if (irefit.eq.0) go to 130
      rvar1 = rss1/(df+1.0e0)
      rsd1 = sqrt(rvar1)
      go to 380
  130 rvar = 0.0e0
      if (df.gt.0.0e0) rvar = rss/df
      rsd = sqrt(rvar)
!
!     COMPUTE MULTIPLE CORRELATION PARAMETER SQUARED (R2)
!
      sm = 0.0e0
      const = .true.
      do 140 i=1,n
         if ((x(i,1).ne.1.0e0) .and. (ifit.eq.3)) const = .false.
         sm = sm + (y(i)-wtym)*wt(i)*(y(i)-wtym)
  140 continue
      r2 = 1.0e0
      if (sm.gt.0.0e0) r2 = 1.0e0-rss/sm
!
!     CHECK FOR -EXACT- FIT
!
      td = 0.0e0
      if (df.gt.0.0e0) td = sqrt(rss)
      if (ysum.gt.0.0e0) td = td/sqrt(ysum)
      if (td.gt.10.0e0*fplrs) go to 180
!
      ierr = 0
     if ((iptout(1).eq.0) .and. (iptout(2).eq.0) .and. (iptout(3).eq.0)&
     &   .and. (iptout(4).eq.0)) go to 145
      isubhd = 0
      call llhdr(page, wide, isubhd)
      write (iprt,1180)
      write (iprt,1020) (i,par(i),i=1,npar)
!
!     ZERO OUT VCV MATRIX AND SDRES AND SDPV VECTORS
!
  145 continue
      do 150 i=1,n
         sdpv(i) = 0.0e0
         sdres(i) = 0.0e0
  150 continue
      do 170 i=1,npar
         do 160 j=1,npar
            vcv(i,j) = 0.0e0
  160    continue
  170 continue
      return
!
  180 continue
!
!     COMPUTE ORTHO NORMALIZATION
!
      do 200 i=1,nc
         t(i,i) = sqrt(t(i,1))
         do 190 j=i,nc
            if (i.eq.j) go to 190
            t(i,j) = t(i,j)*t(i,i)
  190    continue
  200 continue
!
      call strco(t, npar, nc, cond, c, 1)
      if (cond.ne.0.0e0) then
         cond = 1.0_wp/cond
      else
         cond = fplm
      end if
      call strdi(t, npar, nc, det, 011, ier)
!
      if (ier.eq.0) go to 210
      ierr = 3
      isubhd = 0
      call llhdr(page, wide, isubhd)
      write (iprt,1160)
      write (iprt,1120)
      return
  210 continue
      do 240 i=1,n
         do 230 j=1,nc
            sm = 0.0e0
            px = 1.0e0
            do 220 k=1,j
               if (ifit.eq.1 .and. k.ge.2) px = px*x(i,1)
               if (ifit.eq.3) px = x(i,k)
               sm = sm + px*t(k,j)
  220       continue
            fc(i,j) = sm
  230    continue
  240 continue
!
!     COMPUTE REDUCTION TO RSS DUE TO FITTING
!
      do 260 j=1,nc
         sm = 0.0e0
         do 250 i=1,n
            sm = sm + (fc(i,j))*wt(i)*y(i)
  250    continue
         red(j) = (sm*sm)
  260 continue
!
!     COMPUTE ESTIMATED VARIANCE COVARIANCE MATRIX
!
      do 290 i=1,nc
         do 280 j=i,nc
            sm = 0.0e0
            do 270 k=j,nc
               sm = sm + t(i,k)*t(j,k)
  270       continue
            if (sqrt(abs(sm))*sqrt(rvar).ge.sqrt(fpspm)) then
               vcv(i,j) = sm*rvar
            else
               vcv(i,j) = 0.0e0
            end if
            vcv(j,i) = vcv(i,j)
  280    continue
  290 continue
!
!     REFIT TO PREDICTED VALUES
!
      i = 0
      do 310 k=1,n
         if (wt(k).le.0.0e0) go to 310
         wtsqrt = sqrt(wt(k))
         i = i + 1
         px = wtsqrt
         do 300 j=1,nc
            if (ifit.eq.1 .and. j.ge.2) px = px*x(k,1)
            if (ifit.eq.3) px = x(k,j)*wtsqrt
            xw(i,j) = px
  300    continue
         wy(i) = pv(k)*wtsqrt
  310 continue
!
      ier = 0
      call mgs(xw, wy, nnzw, nc, par1, c, t(1,1), t, npar, n, ier)
!
      call accdig(par, par1, acc, nc)
!
!     COMPUTE STANDARD DEVIATION OF PREDICTED VALUES (SDPV)
!     AND STANDARDIZED RESIDUALS (SDRES)
!
      do 360 i=1,n
         sm = 0.0e0
         do 330 j=1,nc
            sm = 0.0e0
            px = 1.0e0
            do 320 k=1,nc
               if (ifit.eq.1 .and. k.ge.2) px = px*x(i,1)
               if (ifit.eq.3) px = x(i,k)
               sm = sm + px*vcv(j,k)
  320       continue
            xw(i,j) = sm
  330    continue
         sm = 0.0e0
         px = 1.0e0
         do 340 k=1,nc
            if (ifit.eq.1 .and. k.ge.2) px = px*x(i,1)
            if (ifit.eq.3) px = x(i,k)
            sm = sm + xw(i,k)*px
  340    continue
         sm = max(0.0_wp, sm)
         sdpv(i) = sqrt(sm)
         sdres(i) = fplm
         if (wt(i).le.0.0e0) go to 360
         if ((rvar/wt(i)-sm).le.0.0e0) ierr = 4
        if (rvar/wt(i)-sm.gt.0.0e0)&
     &      sdres(i) = (res(i)/sqrt(rvar/wt(i)-sm))
  360 continue
!
!     CHECK FOR PRINTED OUTPUT
!
     if ((iptout(1).eq.0) .and. (iptout(2).eq.0) .and.&
     &   (iptout(3).eq.0) .and. (iptout(4).eq.0)) return
!
!     BEGIN PRINTED OUTPUT
!
      if (iptout(1).eq.0) go to 370
!
!     PRINT FIRST PAGE OF OUTPUT
!
      isubhd = 0
      call llhdr(page, wide, isubhd)
     call fitpt1(n, m, x, y, pv, sdpv, res, sdres, wt, ix, nnzw,&
     &   weight, iptout(1))
!
!     PRINT PLOTS
!
  370 continue
      if (iptout(2).eq.0) go to 375
      isubhd = 0
      call llhdr(page, wide, isubhd)
      call fitpt2 (sdres, pv, wt, n, nnzw, weight, res, rss)
!
  375 continue
      if (iptout(3).eq.0) go to 376
!
!     PRINT ANALYSIS OF VARIANCE
!
      isubhd = 0
      call llhdr(page, wide, isubhd)
      call oanova(ysum, red, npar, rvar, nnzw, par1, iprt)
!
  376 continue
      if (iptout(4).eq.0) return
!
      if (npar.eq.1) go to 450
      nc = nc - 1
      idf1 = nnzw - nc
      go to 50
  380 continue
      do 400 i=1,nc
         t(i,i) = sqrt(t(i,1))
         do 390 j=i,nc
            if (i.eq.j) go to 390
            t(i,j) = t(i,j)*t(i,i)
  390    continue
  400 continue
!
      call strdi(t, npar, nc, det, 011, ier)
!
      if (ier.eq.0) go to 420
      write (iprt,1140)
      do 410 i=1,nc
         par1(i) = 0.0e0
         t(i,i) = 0.0e0
  410 continue
      go to 450
  420 continue
      do 440 i=1,nc
         sm = 0.0e0
         do 430 k=i,nc
            sm = sm + t(i,k)*t(i,k)
  430    continue
         t(i,i) = sm
  440 continue
!
!     PRINT PAGE HEADINGS
!
  450 continue
      isubhd = 0
      call llhdr(page, wide, isubhd)
!
!     PRINT VARIANCE COVARIANCE MATRIX
!
      call vcvout(npar, vcv, npar, .true.)
!
      write (iprt,1030)
      if (npar.gt.1) write (iprt,1040)
      write (iprt,1050)
      if (npar.gt.1) write (iprt,1060)
      write (iprt, 1170)
      if (npar.ge.2) then
         do 460 i=1,nc
            sdc = sqrt(vcv(i,i))
            ratio = fplm
            probt = 0.0e0
            if (sdc.gt.0.0e0) ratio = par(i)/sdc
           if (sdc.gt.0.0e0)&
     &         probt = (1.0e0-cdft(abs(ratio), nnzw-npar)) * 2.0e0
            sdc1 = sqrt(t(i,i))*sqrt(rvar1)
            ratio1 = fplm
            probt1 = 0.0e0
            if (sdc1.gt.0.0e0) ratio1 = par1(i)/sdc1
           if (sdc1.gt.0.0e0)&
     &         probt1 = (1.0e0 - cdft(abs(ratio1), nnzw-npar+1)) * 2.0e0
           write (iprt,1070) i, par(i), sdc, ratio, probt, acc(i),&
     &         par1(i), sdc1, ratio1, probt1
  460    continue
      end if
      sdc = sqrt(vcv(npar,npar))
      ratio = fplm
      probt = 0.0e0
      if (sdc.gt.0.0e0) ratio = par(npar)/sdc
     if (sdc.gt.0.0e0)&
     &   probt = (1.0e0 - cdft(abs(ratio), nnzw-npar)) * 2.0e0
      write (iprt,1070) npar, par(npar), sdc, ratio, probt, acc(npar)
      if (npar.eq.1) write (iprt,1080) rsd
      if (npar.gt.1) write (iprt,1080) rsd, rsd1
      write (iprt,1090) nnzw, npar, idf
      if (npar.gt.1) write (iprt,1100) nnzw, nc, idf1
      if (const) write (iprt,1010) r2
      write (iprt,1000) cond
      write (iprt,1110)
      return
!
!     FORMAT STATEMENTS
!
 1000 format (/29h approximate condition number, 10x, g15.7)
 1010 format (/44h multiple correlation coefficient squared   , f7.4)
1020 format (//46h the values computed for the parameters are - /(5x,&
     &   4hpar(, i3, 4h) = , g15.7))
 1030 format (////1x, 25('-'), 1x, 18hestimates from fit, 1x, 24('-'))
1040 format ('+', 72x, 4('-'), 1x,&
    &   48hestimates from fit omitting last predictor value, 1x,&
     &   4('-'))
1050 format (/2x, 19hestimated parameter, 7x, 9hsd of par, 5x,&
     &   8ht(par=0), 3x, 7hprob(t), 2x, 8hacc dig*)
1060 format ('+', 72x, 19hestimated parameter, 7x, 9hsd of par, 5x,&
     &   8ht(par=0), 3x, 7hprob(t))
1070 format (1x, i3, 2x, g16.9, 3x, g16.9, 2x, g10.4, 1x, f5.3, 2x,&
     &   f7.1, 9x, g16.9, 3x, g16.9, 2x, g10.4, 1x, f5.3)
1080 format (//1x, 30hresidual standard deviation   , 9x, g15.7, 56x,&
     &   g15.7)
1090 format (1x, 27hbased on degrees of freedom, 7x, i4, 3h - , i2,&
     &   3h = , i4)
 1100 format ('+', 105x, i4, 3h - , i2, 3h = , i4)
1110 format (//52h * the number of correctly computed digits in each p,&
    &   56harameter usually differs by less than 1 from the value g,&
     &   10hiven here.)
1120 format (/47h the program was unable to compute the variance,&
    &   19h-covariance matrix./&
    &   52h the design matrix is either nearly singular or very,&
    &   17h ill conditioned./&
     &   29h check your input for errors.)
1140 format (54h0estimates for the standard deviation of the estimated,&
    &   55hparameters omitting the last independent variable could/&
    &   59h not be computed.  the zeros printed for the estimates of t,&
    &   50hhe parameters, their standard deviations and their/&
    &   59h ratios for the fit omitting the last variable are meaningl,&
     &   4hess.)
1150 format (/30h the design matrix is singular,&
    &   29h to within machine precision./&
    &   50h check the design matrix for a linear relationship,&
     &   29h between some of the columns.)
 1160 format (//1x, 11('*')/ 1x, 11h*  error  */ 1x, 11('*'))
 1170 format (' ')
1180 format (/50h the least squares fit of the data to the model is,&
    &   35h exact to within machine precision./&
     &   38h statistical analysis is not possible.)
      end
