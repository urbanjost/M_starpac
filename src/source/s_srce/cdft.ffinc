!CDFT
      real(kind=wp) function cdft(x, idf)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     PURPOSE--THIS SUBROUTINE COMPUTES THE CUMULATIVE DISTRIBUTION
!              FUNCTION VALUE FOR STUDENT"S T DISTRIBUTION
!              WITH INTEGER DEGREES OF FREEDOM PARAMETER = IDF.
!              THIS DISTRIBUTION IS DEFINED FOR ALL X.
!              THE PROBABILITY DENSITY FUNCTION IS GIVEN
!              IN THE REFERENCES BELOW.
!     INPUT  ARGUMENTS--X      = THE VALUE AT
!                                WHICH THE CUMULATIVE DISTRIBUTION
!                                FUNCTION IS TO BE EVALUATED.
!                                X SHOULD BE NON-NEGATIVE.
!                     --IDF     = THE INTEGER NUMBER OF DEGREES
!                                OF FREEDOM.
!                                IDF SHOULD BE POSITIVE.
!     OUTPUT ARGUMENTS--CDF    = THE SINGLE PRECISION CUMULATIVE
!                                DISTRIBUTION FUNCTION VALUE.
!     OUTPUT--THE SINGLE PRECISION CUMULATIVE DISTRIBUTION
!             FUNCTION VALUE CDF FOR THE STUDENT"S T DISTRIBUTION
!             WITH DEGREES OF FREEDOM PARAMETER = IDF.
!     PRINTING--NONE UNLESS AN INPUT ARGUMENT ERROR CONDITION EXISTS.
!     RESTRICTIONS--IDF SHOULD BE A POSITIVE INTEGER VARIABLE.
!     OTHER DATAPAC   SUBROUTINES NEEDED--NORCDFC     LANGUAGE--ANSI FOR
!     REFERENCES--NATIONAL BUREAU OF STANDARDS APPLIED MATHMATICS
!                 SERIES 55, 1964, PAGE 948, FORMULAE 26.7.3 AND 26.7.4.
!               --JOHNSON AND KOTZ, CONTIIDFOUS UNIVARIATE
!                 DISTRIBUTIONS--2, 1970, PAGES 94-129.
!               --FEDERIGHI, EXTENDED TABLES OF THE
!                 PERCENTAGE POINTS OF STUDENT"S
!                 T-DISTRIBUTION, JOURNAL OF THE
!                 AMERICAN STATISTICAL ASSOCIATION,
!                 1959, PAGES 683-688.
!               --OWEN, HANDBOOK OF STATISTICAL TABLES,
!                 1962, PAGES 27-30.
!               --PEARSON AND HARTLEY, BIOMETRIKA TABLES
!                 FOR STATISTICIANS, VOLUME 1, 1954,
!                 PAGES 132-134.
!     WRITTEN BY--JAMES J. FILLIBEN
!                 STATISTICAL ENGINEERING LABORATORY (205.03)
!                 NATIONAL BUREAU OF STANDARDS
!                 WASHINGTON, D. C. 20234
!     ORIGINAL VERSION--JUNE      1972.
!     UPDATED         --MAY       1974.
!     UPDATED         --SEPTEMBER 1975.
!     UPDATED         --NOVEMBER  1975.
!     UPDATED         --OCTOBER   1976.
!
!---------------------------------------------------------------------
!
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   x
     integer&
     &   idf
!
!  LOCAL SCALARS
     real(kind=wp) ::&
    &   b11,b21,b22,b23,b24,b25,b31,b32,b33,b34,b35,b36,b37,c,csq,d1,&
    &   d11,d3,d5,d7,d9,dconst,df,fpspm,pi,sd,sum,term,term1,term2,&
     &   term3,z
     integer&
     &   i,idfcut,ievodd,imax,imin,iprt
!
!  EXTERNAL FUNCTIONS
!      REAL(KIND=WP) ::
!     +   CDFNML,R1MACH
!      EXTERNAL CDFNML,R1MACH
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL GETPI,IPRINT
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,atan,exp,log,sqrt
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: B11, B21, B22, B23, B24, B25
!        CONSTANTS USED IN THE COMPUTATIONS.
!     REAL(KIND=WP) :: B31, B32, B33, B34, B35, B36, B37
!        CONSTANTS USED IN THE COMPUTATIONS.
!     REAL(KIND=WP) :: C
!        ...
!     REAL(KIND=WP) :: CSQ
!        ...
!     REAL(KIND=WP) :: DCONST
!        ...
!     REAL(KIND=WP) :: DF
!        THE DEGREES OF FREEDOM.
!     REAL(KIND=WP) :: D1, D11, D3, D5, D7, D9
!        CONSTANTS USED IN THE COMPUTATIONS.
!     REAL(KIND=WP) :: FPSPM
!        THE FLOATING POINT SMALLEST POSITIVE MAGNITUDE.
!     INTEGER I
!        AN INDEX.
!     INTEGER IDF
!        THE DEGREES OF FREEDOM.
!     INTEGER IDFCUT
!        ...
!     INTEGER IEVODD
!        ...
!     INTEGER IMAX
!        ...
!     INTEGER IMIN
!        ...
!     INTEGER IPRT
!        THE PRINT UNIT.
!     REAL(KIND=WP) :: PI
!        PI.
!     REAL(KIND=WP) :: SD
!        ...
!     REAL(KIND=WP) :: SUM
!        ...
!     REAL(KIND=WP) :: TERM, TERM1, TERM2, TERM3
!        ...
!     REAL(KIND=WP) :: X
!        THE T STATISTIC.
!     REAL(KIND=WP) :: Z
!        ...
!
      data idfcut /1000/
      data dconst /0.3989422804_wp/
      data b11 /0.25_wp/
      data b21 /96.0_wp/
!     DATA B21 /0.01041666666667E0/
      data b22, b23, b24, b25 /3.0_wp,-7.0_wp,-5.0_wp,-3.0_wp/
      data b31 /0.00260416666667_wp/
     data b32, b33, b34, b35, b36, b37&
     &    /1.0_wp,-11.0_wp,14.0_wp,6.0_wp,-3.0_wp,-15.0_wp/
!
!
      call getpi(pi)
      call iprint(iprt)
      fpspm = r1mach(1)
!
!     CHECK THE INPUT ARGUMENTS FOR ERRORS
!
      if (idf.le.0) go to 10
      go to 20
   10 write (iprt, 1000)
      write (iprt, 1010) idf
      cdft = 0.0e0
      return
   20 continue
!
!-----START POINT-----------------------------------------------------
!
      df = idf
!
!     IF IDF IS 3 THROUGH 9 AND X IS MORE THAN 3000
!     STANDARD DEVIATIONS BELOW THE MEAN,
!     SET CDFT = 0.0E0 AND RETURN.
!     IF IDF IS 10 OR LARGER AND X IS MORE THAN 150
!     STANDARD DEVIATIONS BELOW THE MEAN,
!     SET CDFT = 0.0E0 AND RETURN.
!     IF IDF IS 3 THROUGH 9 AND X IS MORE THAN 3000
!     STANDARD DEVIATIONS ABOVE THE MEAN,
!     SET CDFT = 1.0E0 AND RETURN.
!     IF IDF IS 10 OR LARGER AND X IS MORE THAN 150
!     STANDARD DEVIATIONS ABOVE THE MEAN,
!     SET CDFT = 1.0E0 AND RETURN.
!
      if (idf.le.2) go to 50
      sd = sqrt(df/(df-2.0e0))
      z = x/sd
      if (idf.lt.10 .and. z.lt.(-3000.0e0)) go to 30
      if (idf.ge.10 .and. z.lt.(-150.0e0)) go to 30
      if (idf.lt.10 .and. z.gt.3000.0e0) go to 40
      if (idf.ge.10 .and. z.gt.150.0e0) go to 40
      go to 50
   30 cdft = 0.0e0
      return
   40 cdft = 1.0e0
      return
   50 continue
!
!     DISTINGUISH BETWEEN THE SMALL AND MODERATE
!     DEGREES OF FREEDOM CASE VERSUS THE
!     LARGE DEGREES OF FREEDOM CASE
!
      if (idf.lt.idfcut) go to 60
      go to 120
!
!     TREAT THE SMALL AND MODERATE DEGREES OF FREEDOM CASE
!     METHOD UTILIZED--EXACT FINITE SUM
!     (SEE AMS 55, PAGE 948, FORMULAE 26.7.3 AND 26.7.4).
!
   60 continue
      csq = df/(x*x+df)
      c = sqrt(csq)
      imax = idf - 2
      ievodd = idf - 2*(idf/2)
      if (ievodd.ne.0) then
         if (idf.eq.1) then
            sum = 0.0e0
         else
            sum = c
         end if
         term = c
         imin = 3
      else
         sum = 1.0e0
         term = 1.0e0
         imin = 2
      end if
!
      do 90 i=imin,imax,2
         if (term.ne.0.0e0) then
            if (log(term)+log((i-1.0e0)/i)+log(csq).ge.log(fpspm)) then
               term = term*((i-1.0e0)/i)*csq
               sum = sum + term
            else
               term = 0.0e0
            end if
         end if
   90 continue
!
      if (sum.eq.0.0e0 .or. x.eq.0.0e0) then
         sum = 0.0e0
      else
         if (log(sum)+log(abs(x))-0.5*log(x*x+df) .lt. log(fpspm)) then
            sum = 0.0e0
         else
            sum = sum*x/sqrt(x*x+df)
         end if
      end if
      if (ievodd.eq.0) go to 110
      sum = (2.0_wp/pi)*(atan(x/sqrt(df))+sum)
  110 cdft = 0.5e0 + sum/2.0e0
      return
!
!     TREAT THE LARGE DEGREES OF FREEDOM CASE.
!     METHOD UTILIZED--TRUNCATED ASYMPTOTIC EXPANSION
!     (SEE JOHNSON AND KOTZ, VOLUME 2, PAGE 102, FORMULA 10?
!     SEE FEDERIGHI, PAGE 687).
!
  120 continue
      d1 = x
      d3 = x**3
      d5 = x**5
      d7 = x**7
      d9 = x**9
      d11 = x**11
      term1 = b11*(d3+d1)/df
!     TERM2 = B21*(B22*D7+B23*D5+B24*D3+B25*D1)/(DF**2)
      term2 = (b22*d7+b23*d5+b24*d3+b25*d1)/(df**2) / b21
      term3 = b31*(b32*d11+b33*d9+b34*d7+b35*d5+b36*d3+b37*d1)/(df**3)
      cdft = term1 + term2 + term3
      cdft = cdfnml(x) - (dconst*(exp(-x*x/2.0e0)))*cdft
      return
!
!     FORMAT STATEMENTS
!
1000 format (' ', 49h***** fatal error--the second input argument to t,&
     &   42hhe cdft   subroutine is non-positive *****)
 1010 format (' ', 35h***** the value of the argument is , i8, 6h *****)
      end
