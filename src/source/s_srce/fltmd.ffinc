!FLTMD
      subroutine fltmd (x, y, n, kmd, sym)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS ROUTINE APPLIES ONE MODIFIED DANIEL FILTERS TO A SYMMETRIC
!     SERIES.  THIS ROUTINE IS ADAPTED FROM BLOOMFIELDS ROUTINE MODDAN.
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 7, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   sym
     integer&
     &   kmd,n
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   x(n),y(n)
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   con
     integer&
     &   i,j,kused,lim
!
!  EXTERNAL FUNCTIONS
     real(kind=wp) ::&
     &   extend
!       EXTERNAL EXTEND
!
!  INTRINSIC FUNCTIONS
      intrinsic mod
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL CON
!        A FACTOR USED IN THE COMPUTATIONS.
!     INTEGER I
!        AN INDEXING VARIABLE.
!     INTEGER J
!        AN INDEXING VARIABLE.
!     INTEGER KMD
!        THE INPUT FILTER LENGTH.
!     INTEGER KUSED
!        THE FILTER LENGTH ACTUALLY USED.
!     INTEGER LIM
!        A LOOP LIMIT.
!     INTEGER N
!        THE NUMBER OF POINTS IN THE SERIES TO BE FILTERED.
!     REAL SYM
!        AN INDICATOR VARIABLE USED TO DESIGNATE WHETHER THE SERIES
!        IS SYMMETRIC (SYM = 1.0E0) OR NOT (SYM = -1.0E0).
!     REAL X(N)
!        ON INPUT, THE SERIES TO BE FILTERED.  ON OUTPUT, THE
!        SMOOTHED SERIES.
!     REAL Y(N)
!        ON INPUT, A WORK VECTOR.  ON OUTPUT, THE INPUT SERIES X.
!
!
      do 10 i = 1, n
         y(i) = x(i)
   10 continue
!
      if (kmd .le. 0) return
!
      kused = kmd + mod(kmd,2)
      if (kused .gt. n) kused = kused - 2
!
      lim = kused-1
      con = 1.0e0 / (2*kused)
      do 40 i = 1, n
         x(i) = y(i)
         if (lim .eq. 0) go to 30
         do 20 j = 1, lim
           x(i) = x(i) + extend(y, i-j, n, sym)&
     &         + extend(y, i+j, n, sym)
   20    continue
  30    x(i) = (x(i) + (extend(y, i-kused, n, sym)&
     &      + extend(y, i+kused, n, sym)) * 0.5e0) * con
   40 continue
!
      return
!
      end
