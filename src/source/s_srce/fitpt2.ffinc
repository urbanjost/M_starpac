!FITPT2
      subroutine fitpt2 (sdres, pv, wt, n, nnzw, weight, res, rss)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS SUBROUTINE, ADAPTED FROM OMNITAB II, PRINTS
!     THE FOUR STANDARDIZED RESIDUAL PLOTS.
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  APRIL 2, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   rss
     integer&
     &   n,nnzw
     logical&
     &   weight
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   pv(n),res(n),sdres(n),wt(n)
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  LOCAL SCALARS
     real(kind=wp) ::&
    &   annzw,dot,fac1,fac2,fplm,gamma,pi,pvdiv,pvmax,pvmid,pvmin,&
    &   ratio,rowdiv,rowmax,rowmid,rowmin,w,xdiv,xmax,xmin,ylabel,&
     &   ymax,ymin
     integer&
    &   i,i1,i2,idot,ifirst,imid,iplot,iprb,iprt,ipv,irow,ix,k,l,&
     &   ncol,ncolp1,ncolpl,ncolt2,ndot,nrow
     character&
     &   iblank*1,iminus*1,iplus*1,istar*1
!
!  LOCAL ARRAYS
     character&
     &   line(102)*1
!
!  EXTERNAL FUNCTIONS
!      REAL(KIND=WP) ::
!     +   R1MACH
!      LOGICAL
!     +   MVCHK
!      EXTERNAL R1MACH,MVCHK
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL GETPI,IPRINT
!
!  INTRINSIC FUNCTIONS
      intrinsic int,max,min,mod
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL ANNZW
!        THE NUMBER OF NONZERO WEIGHTS, USED IN COMPUTING
!        THE NORMAL PROBABILITY PLOT.
!     REAL DOT
!        ...
!     REAL FAC1, FAC2
!        FACTORS USED IN COMPUTING THE NORMAL PROBABILITY PLOT.
!     REAL FPLM
!        THE FLOATING POINT LARGEST MAGNITUDE.
!     REAL GAMMA
!        A VALUE USED IN COMPUTING THE NORMAL PROBABILITY PLOT.
!     INTEGER I
!        AN INDEX VARIABLE.
!     CHARACTER*1 IBLANK
!        THE VALUE OF THE CHARACTER -BLANK-.
!     INTEGER IERR
!        THE INTEGER VALUE DESIGNATING WHETHER ANY ERRORS HAVE
!        BEEN DETECTED.
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED
!        IF IERR .NE. 0, ERRORS HAVE BEEN DETECTED.
!     INTEGER IFIRST
!        THE FIRST ROW OF THE VARIABLES TO BE PLOTTED.
!     INTEGER IMID
!        THE MIDPOINT OF THE FIRST PLOT OF THE SECOND SET
!     CHARACTER*1 IMINUS
!        THE CHARACTER MINUS.
!     INTEGER IPLOT
!        AN INDICATOR VARIABLE DESIGNATING WHETHER THE FIRST OR
!        SECOND SET OF TWO PLOTS ARE BEING PRINTED.
!     CHARACTER*1 IPLUS
!        THE CHARACTER PLUS.
!     INTEGER IPRB
!        THE LOCATION IN THE PLOT STRING OF THE SYMBOL FOR THE
!        PROBABILITY PLOT.
!     INTEGER IPRT
!        THE UNIT NUMBER FOR PRINTED OUTPUT.
!     INTEGER IPV
!        THE LOCATION IN THE PLOT STRING OF THE SYMBOL FOR THE PLOT
!        VERSUS PREDICTED VALUE.
!     INTEGER IROW
!        THE ROW OF THE VARIABLES BEING PLOTTED.
!     CHARACTER*1 ISTAR
!        THE CHARACTER STAR.
!     INTEGER IX
!        THE LOCATION IN THE PLOT STRING OF THE SYMBOL FOR THE PLOTS
!        VERSUS THE INDEPENDENT VARIABLE.
!     INTEGER I1, I2
!        ...
!     INTEGER K, L
!        INDEX VARIABLES.
!     CHARACTER*1 LINE(102)
!        THE SYMBOLS (BLANKS AND CHARACTERS) FOR A GIVEN LINE
!        OF THE PLOT.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS IN EACH COLUMN OF DATA.
!     INTEGER NCOL, NCOLPL, NCOLP1, NCOLT2
!        THE NUMBER OF COLUMNS IN THE PLOT, NCOL+L, NCOL+1,
!        AND NCOL * 2.
!     INTEGER NDOT
!        ...
!     INTEGER NNZW
!        THE NUMBER OF NON ZERO WEIGHTS.
!     INTEGER NROW
!        THE NUMBER OF COLUMNS IN THE PLOT.
!     REAL PI
!        THE VALUE OF PI.
!     REAL PV(N)
!        THE PREDICTED VALUE BASED ON THE CURRENT COEFFICIENT ESTIMATES
!     REAL PVDIV
!        THE VALUE OF A DIVISION ALONG THE -PREDICTED VALUE- AXIS.
!     REAL PVMAX
!        THE LARGEST VALUE IN THE VECTOR PV.
!     REAL PVMID
!        THE MIDPOINT OF THE RANGE OF VALUES IN THE VECTOR PV.
!     REAL PVMIN
!        THE SMALLEST VALUE IN THE VECTOR PV.
!     REAL RATIO
!        A VALUE USED TO PRODUCE THE NORMAL PROBABILITY PLOT.
!     REAL RES(N)
!        THE RESIDUALS FROM THE FIT.
!     REAL ROWDIV
!        THE VALUE OF A DIVISION ALONG THE -ROW- AXIS.
!     REAL ROWMAX
!        THE LARGEST ROW VALUE.
!     REAL ROWMID
!        THE MIDPOINT OF THE RANGE OF THE ROWS PLOTTED.
!     REAL ROWMIN
!        THE SMALLEST ROW VALUE PLOTTED.
!     REAL RSS
!        THE RESIDUAL SUM OF SQUARES.
!     REAL SDRES(N)
!        THE STANDARD DEVIATIONS OF THE RESIDUALS.
!     REAL W
!        THE VALUE OF THE WEIGHT FOR THE CURRENT VALUE BEING PLOTTED.
!     LOGICAL WEIGHT
!        THE VARIABLE USED TO INDICATE WHETHER WEIGHTED ANALYSIS IS TO
!        BE PERFORMED (TRUE) OR NOT (FALSE).
!     REAL WT(N)
!        THE USER SUPPLIED WEIGHTS.
!     REAL XDIV
!        THE VALUE OF A DIVISION ALONG THE X AXIS.
!     REAL XMAX
!        THE LARGEST VALUE ALONG THE X AXIS.
!     REAL XMIN
!        THE SMALLEST VALUE ALONG THE X AXIS.
!     REAL YLABEL
!        THE LABEL TO BE PRINTED ALONG THE Y AXIS.
!     REAL YMAX
!        THE LARGEST VALUE ALONG THE Y AXIS
!     REAL YMIN
!        THE SMALLEST VALUE ALONG THE Y AXIS.
!
      data iplus/'+'/, iminus/'-'/, istar/'*'/, iblank/' '/
!
      call iprint(iprt)
!
      fplm = r1mach(2)
!
!     CHECK FOR INSUFFICIENT POINTS TO PLOT
!
      if (ierr.eq.4) then
         do 1 i = 1, n
            if (sdres(i).ne.fplm) go to 5
    1    continue
         write (iprt, 1090)
         return
      end if
    5 continue
!
!     INITIALIZE VARIABLES FOR PROBABILITY PLOT
!
      call getpi(pi)
      gamma = pi/8.0e0
      annzw = nnzw
      fac1 = 1.0e0 / (annzw - 2.0e0*gamma + 1.0e0)
      fac2 = 10.0e0
!
!     INITIALIZE THE PLOT SIZE (IN PLOT UNITS)
!
      nrow = 26
      ncol = 51
      ncolp1 = ncol + 1
      ncolt2 = 2*ncol
      imid = (ncol-1)/2
!
!     FIND THE FIRST ROW OF OBSERVATIONS WITH NONZERO WEIGHTS
!
      ifirst = 1
      if (.not. weight) go to 20
      do 10 i=1,n
         if (wt(i).le.0.0e0) go to 10
         ifirst = i
         go to 20
   10 continue
!
!     BEGIN COMPUTATIONS FOR FIRST SET OF PLOTS
!
   20 iplot = 1
!
!     SET X AXIS LIMITS FOR STANDARDIZED RESIDUAL VS ROW PLOT,
!     AND STANDARDIZED RESIDUALS VS PREDICTED VALUES PLOT.
!
      rowmin = ifirst
      pvmin = pv(ifirst)
      pvmax = pv(ifirst)
      rowmax = ifirst
      do 30 i=ifirst,n
         w = 1.0e0
         if (weight) w = wt(i)
         if (w.gt.0.0e0) then
            rowmax = i
            if (pv(i).lt.pvmin) pvmin = pv(i)
            if (pv(i).gt.pvmax) pvmax = pv(i)
         end if
   30 continue
!
      if (pvmin.lt.pvmax) go to 35
         if (pvmin.eq.0.0e0) go to 33
            pvmin = pvmin - pvmin/2.0e0
            pvmax = pvmax + pvmax/2.0e0
         go to 35
   33    continue
            pvmin = -0.5e0
            pvmax = 0.5e0
   35 continue
!
      rowmid = (rowmax+rowmin)/2.0e0
      rowdiv = (rowmax-rowmin)/(ncol-1)
      pvmid = (pvmax+pvmin)/2.0e0
      pvdiv = (pvmax-pvmin)/(ncol-1)
!
!     PRINT TITLES FOR FIRST PLOTS
!
      write (iprt,1000)
      go to 90
!
!     BEGIN COMPUTATIONS FOR SECOND SET OF PLOTS
!
   40 iplot = 2
!
!     SET AXIS LIMITS FOR THE STANDARDIZED RESIDUALS VS
!     STANDARDIZED RESIDUALS LAGED BY ONE AND FOR PROBABILITY PLOT
!
      xmin = -3.75e0
      xmax = 3.75e0
      xdiv = (xmax-xmin)/(ncol-1)
!
!     PRINT TITLES FOR SECOND PLOTS
!
      write (iprt,1050)
!
!     WRITE FIRST LINE OF PLOTS
!
   90 continue
!
!     PRINT PLOTS, ONE LINE AT A TIME
!
      ylabel = 3.75e0
      ymax = fplm
      ymin = 4.05e0
      do 160 k=1,nrow
         ymin = ymin - 0.3e0
         if (-3.70e0.ge.ymin) ymin = -fplm
         do 100 l=1,ncol
            ncolpl = l + ncol
            line(l) = iblank
            line(ncolpl) = iblank
            if ((k.ne.1) .and. (k.ne.nrow)) go to 100
               line(l) = iminus
               line(ncolpl) = iminus
               if ((mod(l,10).ne.1) .and. (l.ne.1+ncol/2)) go to 100
                  line(l) = iplus
                  line(ncolpl) = iplus
  100    continue
         do 110 i=1,n
            if (weight) then
               w = wt(i)
            else
               w = 1.0e0
            end if
            if ((w.ne.0.0e0) .and. (.not.mvchk(sdres(i),fplm))) then
               if ((sdres(i).gt.ymin) .and. (sdres(i).le.ymax)) then
                  if (iplot.eq.1) then
!
!     SET PLOT LINE FOR FIRST SET OF PLOTS
!
                     irow = int(((i-rowmin)/rowdiv)+1.5e0)
                     line(irow) = istar
                     ipv = int((pv(i)-pvmin)/pvdiv+1.5e0) + ncol
                     line(ipv) = istar
                  else
!
!     SET PLOT LINE FOR PROBABILITY PLOT
!
                     ratio = (annzw-gamma) * fac1
                    iprb = int(4.91e0*(ratio**0.14e0-&
     &                         (1.0e0-ratio)**0.14e0)*fac2) + 77
                     if (iprb.le.ncol) iprb = ncol+1
                     if (iprb.ge.103) iprb = 102
                     line(iprb) = istar
                     annzw = annzw - 1.0e0
                     if ((annzw.lt.2.0e0) .and. (nnzw.le.10)) then
                        gamma = 1.0e0/3.0e0
                     end if
                  end if
               end if
            end if
  110    continue
!
!     SET PLOT LINE FOR CORRELATION PLOT
!
         if (iplot.eq.2) then
            if (k.le.n-1) then
              dot = 0.0e0
              if (weight) then
                ndot = 0
                do 120 idot = 1, n-k
                 if ((wt(idot).gt.0.0e0) .and.&
     &                (wt(idot+k).gt.0.0e0)) then
                    ndot = ndot + 1
                    dot = dot + res(idot)*res(idot+k)
                  end if
  120           continue
                if (ndot.ge.1) then
                   dot = dot * (n-k) / ndot
                end if
              else
                do 130 idot = 1, n-k
                  dot = dot + res(idot)*res(idot+k)
  130           continue
              end if
              ix = int(imid*dot/rss) + imid + 1
              i1 = min(ix,imid+1)
              i2 = max(ix,imid+1)
              do 140 ix=i1,i2
                line(ix) = istar
  140         continue
            end if
         end if
         if (mod(k,5).eq.1) then
            if (iplot.eq.1) then
              write (iprt,2020) ylabel, (line(l),l=1,ncol), ylabel,&
     &         (line(l),l=ncolp1,ncolt2)
            else
              write (iprt,1020) k, (line(l),l=1,ncol), ylabel,&
     &         (line(l),l=ncolp1,ncolt2)
            end if
            ylabel = ylabel - 1.5
         else
            write (iprt,1030) (line(l),l=1,102)
         end if
         ymax = ymin
  160 continue
!
!     PRINT BOTTOM LINE OF GRAPHS
!
      if (iplot.eq.1) then
!
!     PRINT X AXIS LABELS FOR FIRST SET OF PLOTS
!
         write (iprt,1040) rowmin, rowmid, rowmax, pvmin, pvmid, pvmax
         go to 40
      else
!
!     PRINT X AXIS LABELS FOR SECOND SET OF PLOTS
!
         write (iprt,1070)
      end if
!
      return
!
!     FORMAT STATEMENTS
!
1000 format (/20x, 23h std res vs row number , 35x,&
     &   29h std res vs predicted values )
!1010 FORMAT (7X, 2('+', 9A1), '+', 4A1, 'X', 4A1, 2('+', 9A1), '+',
!    *   10X, 2('+', 9A1), '+', 4A1, 'X', 4A1, 2('+', 9A1), '+')
 1020 format (1x, i5, '+', 51a1, '+', 3x, f5.2, '+', 51a1, '+')
 1030 format (6x, '-', 51a1, '-', 8x, '-', 51a1, '-')
1040 format (1x, f8.1, 17x, f8.1, 17x, f8.1, 4x, g11.4, 14x, g11.4,&
     &   10x, g11.4)
1050 format (/13x, 'AUTOCORRELATION FUNCTION OF RESIDUALS',&
     &   23x, 36h normal probability plot of std res )
!1060 FORMAT ('+', F5.2, '+', 51A1, '+', 3X, F5.2, '+', 51A1, '+')
1070 format (4x, 5h-1.00, 22x, 3h0.0, 21x, 4h1.00, 5x, 4h-2.5, 23x,&
     &   3h0.0, 22x, 3h2.5)
!1080 FORMAT ('+', 6X, 2('+', 9A1), '+', 4A1, 'X', 4A1, 2('+', 9A1),
!    *   '+', 10X, 2('+', 9A1), '+', 4A1, 'X', 4A1, 2('+', 9A1), '+')
1090 format (// 1x, 13('*')/ 1x, 13h*  warning  */ 1x, 13('*')//&
    &   54h the standardized residual plots have been suppressed.,&
    &   45h  none of the standardized residuals could be,&
    &   10h computed,/&
    &   50h because for each observation either the weight or,&
     &   48h the standard deviation of the residual is zero.)
 2020 format (1x, f5.2, '+', 51a1, '+', 3x, f5.2, '+', 51a1, '+')
      end
