!PPFT
      real(kind=wp) function ppft(p, idf)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS FUNCTION IS A VERSION OF DATAPAC SUBROUTINE
!     TPPF, WITH MODIFICATIONS TO FACILITATE CONVERSION TO
!     DOUBLE PRECISION AUTOMATICALLY USING THE NAG, INC. CODE APT,
!     AND TO CORRESPOND TO STARPAC CONVENTIONS.
!
!     PURPOSE--THIS SUBROUTINE COMPUTES THE PERCENT POINT
!              FUNCTION VALUE FOR THE STUDENT"S T DISTRIBUTION
!              WITH INTEGER DEGREES OF FREEDOM PARAMETER = IDF.
!              THE STUDENT"S T DISTRIBUTION USED
!              HEREIN IS DEFINED FOR ALL X,
!              AND ITS PROBABILITY DENSITY FUNCTION IS GIVEN
!              IN THE REFERENCES BELOW.
!              NOTE THAT THE PERCENT POINT FUNCTION OF A DISTRIBUTION
!              IS IDENTICALLY THE SAME AS THE INVERSE CUMULATIVE
!              DISTRIBUTION FUNCTION OF THE DISTRIBUTION.
!     ERROR CHECKING--NONE
!     RESTRICTIONS--IDF SHOULD BE A POSITIVE INTEGER VARIABLE.
!                 --P SHOULD BE BETWEEN 0.0E0 (EXCLUSIVELY)
!                   AND 1.0E0 (EXCLUSIVELY).
!     COMMENT--FOR IDF = 1 AND IDF = 2, THE PERCENT POINT FUNCTION
!              FOR THE T DISTRIBUTION EXISTS IN SIMPLE CLOSED FORM
!              AND SO THE COMPUTED PERCENT POINTS ARE EXACT.
!            --FOR OTHER SMALL VALUES OF IDF (IDF BETWEEN 3 AND 6,
!              INCLUSIVELY), THE APPROXIMATION
!              OF THE T PERCENT POINT BY THE FORMULA
!              GIVEN IN THE REFERENCE BELOW IS AUGMENTED
!              BY 3 ITERATIONS OF NEWTON"S METHOD FOR
!              ROOT DETERMINATION.
!              THIS IMPROVES THE ACCURACY--ESPECIALLY FOR
!              VALUES OF P NEAR 0 OR 1.
!     REFERENCES--NATIONAL BUREAU OF STANDARDS APPLIED MATHMATICS
!                 SERIES 55, 1964, PAGE 949, FORMULA 26.7.5.
!               --JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE
!                 DISTRIBUTIONS--2, 1970, PAGE 102,
!                 FORMULA 11.
!               --FEDERIGHI, "EXTENDED TABLES OF THE
!                 PERCENTAGE POINTS OF STUDENT"S T
!                 DISTRIBUTION, JOURNAL OF THE
!                 AMERICAN STATISTICAL ASSOCIATION,
!                 1969, PAGES 683-688.
!               --HASTINGS AND PEACOCK, STATISTICAL
!                 DISTRIBUTIONS--A HANDBOOK FOR
!                 STUDENTS AND PRACTITIONERS, 1975,
!                 PAGES 120-123.
!     WRITTEN BY--JAMES J. FILLIBEN
!                 STATISTICAL ENGINEERING DIVISION
!                 NATIONAL BUREAU OF STANDARDS
!                 WASHINGTON, D. C. 20234
!     ORIGINAL VERSION--OCTOBER   1975.
!     UPDATED         --NOVEMBER  1975.
!
!     MODIFIED BY     --JANET R. DONALDSON, DECEMBER 7, 1981
!                       STATISTICAL ENGINEERING DIVISION
!                       NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   p
     integer&
     &   idf
!
!  LOCAL SCALARS
     real(kind=wp) ::&
    &   arg,b21,b31,b32,b33,b34,b41,b42,b43,b44,b45,&
    &   b51,b52,b53,b54,b55,b56,c,con,d1,d3,d5,d7,d9,df,pi,ppfn,&
     &   s,sqrt2,term1,term2,term3,term4,term5,z
     integer&
     &   ipass,maxit
!
!  EXTERNAL FUNCTIONS
     real(kind=wp) ::&
     &   ppfnml
!       EXTERNAL PPFNML
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL GETPI
!
!  INTRINSIC FUNCTIONS
      intrinsic atan,cos,sin,sqrt
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: ARG
!        *
!     REAL(KIND=WP) :: B21
!        *
!     REAL(KIND=WP) :: B31, B32, B33, B34
!        *
!     REAL(KIND=WP) :: B41, B42, B43, B44, B45
!        *
!     REAL(KIND=WP) :: B51, B52, B53, B54, B55, B56
!        *
!     REAL(KIND=WP) :: C, CON
!        *
!     REAL(KIND=WP) :: DF
!        THE DEGREES OF FREEDOM.
!     REAL(KIND=WP) :: D1, D3, D5, D7, D9
!        *
!     INTEGER IDF
!        THE (INTEGER) DEGREES OF FREEDOM.
!     INTEGER IPASS
!        *
!     INTEGER MAXIT
!        *
!     REAL(KIND=WP) :: P
!        THE PROBABILITY AT WHICH THE PERCENT POINT IS TO BE EVALUATED.
!     REAL(KIND=WP) :: PI
!        THE VALUE OF PI.
!     REAL(KIND=WP) :: PPFN
!        THE NORMAL PERCENT POINT VALUE.
!     REAL(KIND=WP) :: S
!        *
!     REAL(KIND=WP) :: SQRT2
!        THE SQUARE ROOT OF TWO.
!        *
!     REAL(KIND=WP) :: TERM1, TERM2, TERM3, TERM4, TERM5
!        *
!     REAL(KIND=WP) :: Z
!        *
!
!     DEFINE CONSTANTS USED IN THE APPROXIMATIONS
!
      data b21 /4.0_wp/
      data b31, b32, b33, b34 /96.0_wp, 5.0_wp, 16.0_wp, 3.0_wp/
     data b41, b42, b43, b44, b45&
     &  /384.0_wp, 3.0_wp, 19.0_wp, 17.0_wp, -15.0_wp/
     data b51, b52, b53, b54, b55, b56&
    &   /9216.0_wp, 79.0_wp, 776.0_wp, 1482.0_wp,&
     &   -1920.0_wp, -945.0_wp/
!
      call getpi(pi)
!
      sqrt2 = sqrt(2.0e0)
!
      df = idf
      maxit = 5
!
      if (idf.ge.3) go to 50
      if (idf.eq.1) go to 30
      if (idf.eq.2) go to 40
      ppft = 0.0e0
      return
!
!     TREAT THE IDF = 1 (CAUCHY) CASE
!
   30 arg = pi*p
      ppft = -cos(arg)/sin(arg)
      return
!
!     TREAT THE IDF = 2 CASE
!
   40 term1 = sqrt2/2.0e0
      term2 = 2.0e0*p - 1.0e0
      term3 = sqrt(p*(1.0e0-p))
      ppft = term1*term2/term3
      return
!
!     TREAT THE IDF GREATER THAN OR EQUAL TO 3 CASE
!
   50 ppfn = ppfnml(p)
      d1 = ppfn
      d3 = ppfn**3
      d5 = ppfn**5
      d7 = ppfn**7
      d9 = ppfn**9
      term1 = d1
      term2 = (1.0_wp/b21)*(d3+d1)/df
      term3 = (1.0_wp/b31)*(b32*d5+b33*d3+b34*d1)/(df**2)
      term4 = (1.0_wp/b41)*(b42*d7+b43*d5+b44*d3+b45*d1)/(df**3)
      term5 = (1.0_wp/b51)*(b52*d9+b53*d7+b54*d5+b55*d3+b56*d1)/(df**4)
      ppft = term1 + term2 + term3 + term4 + term5
      if (idf.ge.7) return
      if (idf.eq.3) go to 60
      if (idf.eq.4) go to 80
      if (idf.eq.5) go to 100
      if (idf.eq.6) go to 120
      return
!
!     AUGMENT THE RESULTS FOR THE IDF = 3 CASE
!
   60 con = pi*(p-0.5e0)
      arg = ppft/sqrt(df)
      z = atan(arg)
      do 70 ipass=1,maxit
         s = sin(z)
         c = cos(z)
         z = z - (z+s*c-con)/(2.0e0*c*c)
   70 continue
      ppft = sqrt(df)*s/c
      return
!
!     AUGMENT THE RESULTS FOR THE IDF = 4 CASE
!
   80 con = 2.0e0*(p-0.5e0)
      arg = ppft/sqrt(df)
      z = atan(arg)
      do 90 ipass=1,maxit
         s = sin(z)
         c = cos(z)
         z = z - ((1.0e0+0.5e0*c*c)*s-con)/(1.5e0*c*c*c)
   90 continue
      ppft = sqrt(df)*s/c
      return
!
!     AUGMENT THE RESULTS FOR THE IDF = 5 CASE
!
  100 con = pi*(p-0.5e0)
      arg = ppft/sqrt(df)
      z = atan(arg)
      do 110 ipass=1,maxit
         s = sin(z)
         c = cos(z)
         z = z - (z+(c+(2.0_wp/3.0e0)*c*c*c)*s-con)/((8.0_wp/3.0e0)*c**4)
  110 continue
      ppft = sqrt(df)*s/c
      return
!
!     AUGMENT THE RESULTS FOR THE IDF = 6 CASE
!
  120 con = 2.0e0*(p-0.5e0)
      arg = ppft/sqrt(df)
      z = atan(arg)
      do 130 ipass=1,maxit
         s = sin(z)
         c = cos(z)
        z = z - ((1.0e0+0.5e0*c*c+0.375e0*c**4)*s-con)/&
     &           ((15.0_wp/8.0e0)*c**5)
  130 continue
      ppft = sqrt(df)*s/c
      return
!
      end
