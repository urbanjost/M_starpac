!BFSDRV
     subroutine bfsdrv(y1, y2, ymiss1, ymiss2, ccov, nlppc, spcf1,&
    &   spcf2, nf, fmin, fmax, freq, n, nw, lagmax, lags, lagmx1,&
    &   work, lwork, delta, isym, xaxis, yaxis, lpcv, alpha, nprt,&
    &   window, iccov, jccov, m, index1, index2, cspc2, phas, icspc2,&
    &   iphas, codd, ceven, w, lw, nmsub, ldsmin, ldstak, option,&
     &   nfft, inlppc, jnlppc, ly)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS IS THE CONTROLING ROUTINE FOR TIME SERIES FOURIER
!     SPECTRUM ANALYSIS .
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 2, 1985
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      real(kind=wp) :: alpha,delta,fmax,fmin,ymiss1,ymiss2
     integer&
    &   iccov,icspc2,index1,index2,inlppc,iphas,jccov,jnlppc,&
    &   lagmax,lagmx1,ldsmin,ldstak,lpcv,lw,lwork,ly,m,n,nf,nfft,&
     &   nprt,nw
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
    &   ccov(*),ceven(*),codd(*),cspc2(*),freq(*),phas(*),spcf1(*),&
     &   spcf2(*),w(*),work(*),xaxis(*),y1(*),y2(*),yaxis(*)
     integer&
     &   isym(*),lags(*),nlppc(*)
     logical&
     &   option(4)
     character&
     &   nmsub(6)*1
!
!  SUBROUTINE ARGUMENTS
       external window
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   bw,df,fmn,fmx,xpltmn,xpltmx,ymean1,ymean2,ypltmn,ypltmx
     integer&
     &   i,ilog,ispcer,j,k,lag,laglst,nfused,npts,nwused
     logical&
     &   newpg,univar
!
!  EXTERNAL FUNCTIONS
     integer&
     &   lstlag
!       EXTERNAL LSTLAG
!
!  EXTERNAL SUBROUTINES
       external acvf,acvff,acvfm,bfser,bfslag,bfsmn,ccvf,ccvff,ccvfm,&
     &   dfbw,dfbwm,setfrq,ufsest,ufsout
!
!  INTRINSIC FUNCTIONS
      intrinsic int,max,min
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!  STATEMENT FUNCTIONS
     integer&
     &   i3c,i3n
!
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: ALPHA
!        THE DESIRED CONFIDENCE LEVEL.
!     REAL(KIND=WP) :: BW
!        THE BANDWIDTH.
!     REAL(KIND=WP) :: CCOV(ICCOV,JCCOV,M)
!        THE COVARIANCES.
!     REAL(KIND=WP) :: CEVEN(LAGMX1)
!        THE SUMS OF THE COVARIANCES FOR EACH LAG.
!     REAL(KIND=WP) :: CODD(LAGMX1)
!        THE DIFFERENCES OF THE COVARIANCES FOR EACH LAG.
!     REAL(KIND=WP) :: CSPC2(ICSPC2,NW)
!        THE SQUARED COHERENCY COMPONENT OF THE BIVARIATE SPECTRA.
!     REAL(KIND=WP) :: DELTA
!        THE SAMPLING INTERVAL.
!     REAL(KIND=WP) :: DF
!        THE EFFECTIVE DEGREES OF FREEDOM.
!     REAL(KIND=WP) :: FMAX, FMIN
!        THE MAXIMUM AND MINIMUM FREQUENCES AT WHICH THE
!        SPECTRUM IS TO BE COMPUTED.
!     REAL(KIND=WP) :: FMN, FMX
!        *
!     REAL(KIND=WP) :: FREQ(NF)
!        THE VECTOR OF FREQUENCIES AT WHICH THE SPECTRUM IS TO BE
!        COMPUTED.
!     INTEGER I
!        AN INDEX VARIABLE
!     INTEGER INDEX1, INDEX2
!        THE INDICES OF THE COVARIANCES OF THE TWO SERIES.
!     INTEGER INLPPC
!        THE FIRST DIMENSION OF THE ARRAY NLPPC.
!     INTEGER IPHAS
!        THE FIRST DIMENSION OF THE ARRAY PHAS.
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED
!        IF IERR .EQ. 1, ERRORS HAVE BEEN DETECTED
!     INTEGER ILOG
!        A CODE USED TO SPECIFY THE TYPE OF PLOT, WHERE IF
!        ILOG = 0 THE PLOT IS LINEAR/LINEAR, IF
!        ILOG = 1 THE PLOT IS LOG/LINEAR, IF
!     INTEGER ISPCER
!        AN ERROR FLAG USED FOR THE SPECTRUM PLOTS.
!     INTEGER ISYM(LPCV)
!        THE ARRAY CONTAINING THE CODE FOR THE PLOT SYMBOLS.
!     INTEGER I3C
!        STATEMENT FUNCTION FOR FINDING LOCATIONS WITHIN CCOV.
!     INTEGER I3N
!        STATEMENT FUNCTION FOR FINDING LOCATIONS WITHIN NLPPC.
!     INTEGER JCCOV
!        THE SECOND DIMENSION OF CCOV
!     INTEGER JNLPPC
!        THE SECOND DIMENSION OF NLPPC
!     INTEGER LAG
!        THE LAG WINDWO TRUNCATION POINT USED FOR A SPECIFIC WINDOW.
!     INTEGER LAGLST
!        THE LAST LAG BEFORE MISSING DATA CAUSED AN ACVF
!        TO BE UNABLE TO BE COMPUTED.
!     INTEGER LAGMAX
!        THE MAXIMUM LAG VALUE TO BE USED.
!     INTEGER LAGMX1
!        THE VALUE LAGMAX+1.
!     INTEGER LAGS(NW)
!        THE ARRAY USED TO STORE THE LAG WINDOW TRUCCATION
!        POINTS USED FOR EACH SET OF SPECTRUM VALUES.
!     INTEGER LDSMIN
!        THE MINIMUM LENGTH ALLOWED FOR DSTAK.
!     INTEGER LDSTAK
!        THE LENGTH OF THE VECTOR DSTAK IN COMMON CSTAK.
!     INTEGER LPCV
!        THE LENGTH OF THE VECTORS USED FOR PLOTTING.
!     INTEGER LWORK
!        THE LENGTH OF THE VECTOR W.
!     INTEGER LY
!        THE LENGTH OF THE VECTORS Y1 AND Y2.
!     INTEGER M
!        THE NUMBER OF SERIES FOR WHICH THE COVARIANCES WERE COMPUTED
!     INTEGER N
!        THE INTEGER NUMBER OF OBSERVATIONS IN EACH SERIES
!     LOGICAL NEWPG
!        THE LOGICAL VARIABLE USED TO DETERMINE IF OUTPUT
!        WILL BEGIN ON A NEW PAGE (TRUE) OR NOT (FALSE).
!     INTEGER NF
!        THE NUMBER OF FREQUENCIES AT WHICH THE SPECTRUM IS
!        TO BE COMPUTED.
!     INTEGER NFFT
!        THE NUMBER OF OBSERVATIONS IN THE EXTENDED SERIES.
!     INTEGER NFUSED
!        THE NUMBER OF FREQUENCIES ACTUALLY USED.
!     INTEGER NLPPC(INLPPC,JNLPPC,M)
!         THE ARRAY CONTAINING THE NUMBER OF LAG PRODUCT PAIRS.
!     CHARACTER*1 NMSUB(6)
!        THE ARRAY CONTAINING THE NAME OF THIS SUBROUTINE.
!     INTEGER NPRT
!        A CODE USED TO SPECIFY THE TYPE OF PLOT.
!        IF NPRT < 0 THE PLOT IS DECIBLES/LINEAR
!        IF NPRT = 0 THE PLOT IS SUPPRESSED.
!        IF NPRT > 0 THE PLOT IS LOG/LINEAR
!     INTEGER NPTS
!        THE NUMBER OF X, Y CO-ORDINATES TO BE PLOTTED.
!     INTEGER NW
!        THE VARIABLE USED TO DETERMINE THE NUMBER OF DIFFERENT
!        BANDWIDTHS TO BE USED.
!     INTEGER NWUSED
!        THE NUMBER OF DIFFERENT BANDWIDTHS ACTUALLY USED.
!     LOGICAL OPTION(4)
!        AN INDICATOR ARRAY USED TO DESIGNATE WHETHER ANY OF THE
!        FOUR POSSIBLE OPTIONS (F, M, V, OR S) HAVE BEEN USED (TRUE)
!        OR NOT (FALSE).
!     REAL(KIND=WP) :: PHAS(IPHAS,NW)
!        THE PHASE COMPONENT OF THE BIVARIATE SPECTRUM.
!     REAL(KIND=WP) :: SPCF1(NF), SPCF2(NF)
!        THE ARRAYS IN WHICH THE SPECTRUM IS STORED.
!     LOGICAL UNIVAR
!        THE LOGICAL VARIABLE USED TO DETERMINE IF THE OUTPUT
!        IS FOR UNIVARIATE (TRUE) OR BIVARIATE (FALSE) SPECTRA.
!     REAL(KIND=WP) :: W(LW)
!        THE VECTOR OF WINDOWS.
!     EXTERNAL WINDOW
!        THE SUBROUTINE USED TO COMPUTE THE WINDOW.
!     REAL(KIND=WP) :: WORK(LWORK)
!        THE VECTOR OF WORK SPACE.
!     REAL(KIND=WP) :: XAXIS(LPCV)
!        THE X AXIS VALUES FOR THE SPECTRUM PLOT.
!     REAL(KIND=WP) :: XPLTMN, XPLTMX
!        THE MINIMUM AND MAXIMUM VALUES TO BE PLOTTED FOR THE X AXIS.
!     REAL(KIND=WP) :: YAXIS(LPCV)
!        THE Y AXIS VALUES FOR THE SPECTRUM PLOTS.
!     REAL(KIND=WP) :: YMEAN1, YMEAN2
!        THE MEAN OF THE OBSERVED TIME SERIES
!     REAL(KIND=WP) :: YMISS1, YMISS2
!        THE USER SUPPLIED CODE WHICH IS USED TO DETERMINE WHETHER OR
!        NOT AN OBSERVATION IN THE SERIES IS MISSING.  IF Y(I) = YMISS,
!        THE VALUE IS ASSUMED MISSING, OTHERWISE IT IS NOT.
!     REAL(KIND=WP) :: YPLTMN, YPLTMX
!        THE MINIMUM AND MAXIMUM VALUES TO BE PLOTTED FOR THE Y AXIS.
!     REAL(KIND=WP) :: Y1(N), Y2(N)
!         THE ARRAY CONTAINING THE OBSERVED TIME SERIES.
!
!
!  STATEMENT FUNCTION DEFINITIONS
!
      i3c(i,j,k) = i + (j-1)*iccov + (k-1)*jccov*iccov
      i3n(i,j,k) = i + (j-1)*inlppc + (k-1)*jnlppc*inlppc
!
      nfused = nf
      if (option(4)) then
        fmn = max(fmin, 0.0e0)
        fmx = min(fmax, 0.5e0)
        if (fmn.ge.fmx) then
          fmn = 0.0e0
          fmx = 0.5e0
        end if
      else
!
!       SET VARIOUS VALUES FOR SHORT FORMS OF CALL STATEMENT
!
        nprt = -1
        fmn = 0.0e0
        fmx = 0.5e0
        lagmx1 = lagmax + 1
      end if
!
!     CHECK FOR ERRORS
!
     call bfser(nmsub, n, lagmax, iccov, jccov, inlppc, jnlppc, m,&
    &           index1, index2, icspc2, iphas, nf, nw, lags,&
     &           ldstak, ldsmin, ly, nfft, option)
!
      if (ierr.eq.1) return
!
!     SET VARIOUS PROGRAM PARAMETERS.
!
      alpha = 0.95e0
      delta = 1.0e0
!
!     COMPUTE COVARIANCES
!
      laglst = lagmax
      if (option(1)) then
       call acvff(y1, n, nfft, ymean1,&
    &             ccov(i3c(1,index1,index1)),&
     &             lagmax, iccov, n, work, nfft)
       call acvff(y2, n, nfft, ymean2,&
    &             ccov(i3c(1,index2,index2)),&
     &             lagmax, iccov, n, work, nfft)
       call ccvff(y1, y2, n, nfft, lagmax,&
    &             ccov(i3c(1,index1,index2)),&
     &             ccov(i3c(1,index2,index1)), iccov, n, work, lwork)
!
      else
        if (option(3)) then
          if (option(2)) laglst = lstlag(nlppc,lagmax,inlppc)
        else
          if (option(2)) then
           call acvfm(y1, ymiss1, n, ymean1,&
    &                 ccov(i3c(1,index1,index1)),&
     &                 lagmax, laglst, nlppc, iccov)
           call acvfm(y2, ymiss2, n, ymean2,&
    &                 ccov(i3c(1,index2,index2)),&
     &                 lagmax, laglst, nlppc, iccov)
           call ccvfm(y1, ymiss1, y2, ymiss2, n, lagmax, ymean1,&
    &                 ymean2, ccov(i3c(1,index1,index2)),&
    &                 ccov(i3c(1,index2,index1)), iccov,&
    &                 nlppc(i3n(1,index1,index2)),&
     &                 nlppc(i3n(1,index2,index1)))
!
          else
           call acvf(y1, n, ymean1, ccov(i3c(1,index1,index1)), lagmax,&
     &                iccov)
           call acvf(y2, n, ymean2, ccov(i3c(1,index2,index2)), lagmax,&
     &                iccov)
           call ccvf(y1, y2, n, lagmax, ymean1, ymean2,&
    &                ccov(i3c(1,index1,index2)),&
     &                ccov(i3c(1,index2,index1)), iccov)
          end if
        end if
      end if
!
      if (laglst.le.0) then
!
!     AN ERROR HAS BEEN DETECTED
!
         ierr = 2
         return
      end if
!
!     COMPUTE THE VECTOR OF LAG WINDOW TRUNCATION POINTS, ORDERED
!     SMALLEST TO LARGEST.
!
      nwused = nw
     if (.not.option(4)) call bfslag(ccov, laglst, lags, n, nw, nwused,&
     &                                iccov, jccov, index1, index2)
!
!     BEGIN COMPUTING FOURIER SPECTRUM FOR SERIES
!
      univar = .false.
!
      ilog = 0
!
      xpltmn = fmn
      xpltmx = fmx
!
      ypltmn = 0.0e0
      ypltmx = 1.0e0
!
!     SET FREQUENCIES FOR THE SPECTRUM.
!
      call setfrq(freq, nf, 1, fmn, fmx, delta)
!
!     COMPUTE AND PLOT SPECTRUM VALUES.
!
      newpg = .false.
!
!     COMPUTE THE EVEN AND ODD CCVF ESTIMATES
!
      ceven(1) = ccov(i3c(1,index1,index2))
      codd(1) = 0.0e0
      do 30 i=1,laglst
        ceven(i+1) = 0.5e0*&
    &                (ccov(i3c(i+1,index1,index2))+&
     &                 ccov(i3c(i+1,index2,index1)))
        codd(i+1) = 0.5e0*&
    &               (ccov(i3c(i+1,index1,index2))-&
     &                ccov(i3c(i+1,index2,index1)))
   30 continue
!
      do 60 i=1,nwused
         lag = lags(i)
         if (lag.gt.laglst) then
            ispcer = 2
            df = 0.0e0
         else
!
            ispcer = 0
!
!     COMPUTE THE WINDOW, AND EFFECTIVE DEGREES OF FREEDOM AND
!     BANDWIDTH BASED ON THE WINDOW
!
            call window(lag, w, lw)
            if (option(2)) then
              call dfbwm(n, lag, w, lw, nlppc(i3n(1,index1,index2)),&
     &                    nlppc(i3n(1,index2,index1)), inlppc, df, bw)
            else
               call dfbw(n, lag, w, lw, df, bw)
            end if
!
!     COMPUTE THE SPECTRUM FOR EACH INDIVIDUAL SERIES
!
           call ufsest(ccov(i3c(1,index1,index1)), w, lag, spcf1,&
     &                  nfused, iccov, lagmax, nf, freq, delta)
!
           call ufsest(ccov(i3c(1,index2,index2)), w, lag, spcf2,&
     &                  nfused, iccov, lagmax, nf, freq, delta)
!
           call bfsmn(spcf1, spcf2, ceven, codd, w, lw, lag, df, nprt,&
    &                 nf, cspc2(1+(i-1)*icspc2), phas(1+(i-1)*iphas),&
    &                 freq, npts, xaxis,&
     &                 yaxis, isym, lpcv, alpha, lagmx1, delta)
!
            if (nprt.eq.0) go to 60
!
         end if
        call ufsout(xaxis, yaxis, isym, npts, bw, int(df+0.5e0), lag,&
    &               lagmax, newpg, ispcer, nfused+5, xpltmn, xpltmx,&
    &               ypltmn, ypltmx, ilog, phas(1+(i-1)*iphas), freq,&
     &               nf, univar, nmsub)
!
         newpg = .true.
!
   60 continue
!
      return
!
      end
