!PPFF
      real(kind=wp) function ppff(p, nu1, nu2)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS FUNCTION IS A VERSION OF DATAPLOT SUBROUTINE FPPF,
!     WITH MODIFICATIONS NECESSARY TO CORRESPOND TO STARPAC CONVENTIONS.
!
!     PURPOSE--THIS SUBROUTINE COMPUTES THE PERCENT POINT
!              FOR THE F DISTRIBUTION
!              WITH INTEGER DEGREES OF FREEDOM
!              PARAMETERS = NU1 AND NU2.
!              THIS DISTRIBUTION IS DEFINED FOR ALL NON-NEGATIVE X.
!              THE PROBABILITY DENSITY FUNCTION IS GIVEN
!              IN THE REFERENCES BELOW.
!     INPUT  ARGUMENTS--P      = THE SINGLE PRECISION VALUE
!                                (BETWEEN 0.0E0 AND 1.0E0)
!                                AT WHICH THE PERCENT POINT
!                                FUNCTION IS TO BE EVALUATED.
!                     --NU1    = THE INTEGER DEGREES OF FREEDOM
!                                FOR THE NUMERATOR OF THE F RATIO.
!                                NU1 SHOULD BE POSITIVE.
!                     --NU2    = THE INTEGER DEGREES OF FREEDOM
!                                FOR THE DENOMINATOR OF THE F RATIO.
!                                NU2 SHOULD BE POSITIVE.
!     OUTPUT ARGUMENTS--PPFF    = THE SINGLE PRECISION PERCENT POINT
!                                FUNCTION VALUE.
!     OUTPUT--THE SINGLE PRECISION PERCENT POINT
!             FUNCTION VALUE PPFF FOR THE F DISTRIBUTION
!             WITH DEGREES OF FREEDOM
!             PARAMETERS = NU1 AND NU2.
!     PRINTING--NONE UNLESS AN INPUT ARGUMENT ERROR CONDITION EXISTS.
!     RESTRICTIONS--P SHOULD BE BETWEEN
!                   0.0E0 (INCLUSIVELY) AND 1.0E0 (EXCLUSIVELY).
!                 --NU1 SHOULD BE A POSITIVE INTEGER VARIABLE.
!                 --NU2 SHOULD BE A POSITIVE INTEGER VARIABLE.
!     LANGUAGE--ANSI FORTRAN.
!     REFERENCES--NATIONAL BUREAU OF STANDARDS APPLIED MATHEMATICS
!                 SERIES 55, 1964, PAGES 946-947,
!                 FORMULAE 26.6.4, 26.6.5, 26.6.8, AND 26.6.15.
!               --JOHNSON AND KOTZ, CONTINUOUS UNIVARIATE
!                 DISTRIBUTIONS--2, 1970, PAGE 83, FORMULA 20,
!                 AND PAGE 84, THIRD FORMULA.
!               --PAULSON, AN APPROXIMATE NORMAILIZATION
!                 OF THE ANALYSIS OF VARIANCE DISTRIBUTION,
!                 ANNALS OF MATHEMATICAL STATISTICS, 1942,
!                 NUMBER 13, PAGES 233-135.
!               --SCHEFFE AND TUKEY, A FORMULA FOR SAMPLE SIZES
!                 FOR POPULATION TOLERANCE LIMITS, 1944,
!                 NUMBER 15, PAGE 217.
!     WRITTEN BY--JAMES J. FILLIBEN
!                 STATISTICAL ENGINEERING DIVISION
!                 CENTER FOR APPLIED MATHEMATICS
!                 NATIONAL BUREAU OF STANDARDS
!                 WASHINGTON, D. C. 20234
!                 PHONE--301-921-3651
!     NOTE-- THIS ROUTINE WAS ADAPTED FROM DATAPLOT SUBROUTINE
!            FPPF WITH PERMISSION FROM THE AUTHOR.  DATAPLOT IS
!            A REGISTERED TRADEMARK.
!
!           THIS SUBROUTINE MAY NOT BE COPIED, EXTRACTED,
!           MODIFIED, OR OTHERWISE USED IN A CONTEXT
!           OUTSIDE OF THIS LANGUAGE/SYSTEM.
!     LANGUAGE--ANSI FORTRAN (1966)
!     VERSION NUMBER--82.3
!     ORIGINAL VERSION--MAY       1978.
!     UPDATED         --AUGUST    1979.
!     UPDATED         --DECEMBER  1981.
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   p
     integer&
     &   nu1,nu2
!
!  LOCAL SCALARS
     real(kind=wp) ::&
    &   anu1,anu2,expf,pcalc,sdf,tol,x,xdel,xlow,xmax,&
     &   xmid,xmin,xn,xup,zn
     integer&
     &   ibug,icount,iprt,maxit
!
!  EXTERNAL FUNCTIONS
!      REAL(KIND=WP) ::
!     +   CDFF,PPFNML
!      EXTERNAL CDFF,PPFNML
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL IPRINT
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,exp,sqrt
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL ANU1
!        THE (REAL) DEGREES OF FREEDOM IN THE NUMERATOR.
!     REAL ANU2
!        THE (REAL) DEGREES OF FREEDOM IN THE DENOMINATOR.
!     REAL EXPF
!        *
!     INTEGER IBUG
!        *
!     INTEGER ICOUNT
!        *
!     INTEGER IPRT
!        THE UNIT NUMBER FOR PRINTED OUTPUT.
!     INTEGER MAXIT
!        *
!     INTEGER NU1
!        THE DEGREES OF FREEDOM IN THE NUMERATOR.
!     INTEGER  NU2
!        THE DEGREES OF FREEDOM IN THE DENOMINATOR.
!     REAL P
!        THE VALUE (BETWEEN 0.0E0 AND 1.0E0) AT WHICH THE PERCENT POINT
!        IS TO BE CALCULATED.
!     REAL PCALC
!        *
!     REAL SDF
!        *
!     REAL TOL
!        *
!     REAL X
!        *
!     REAL XDEL
!        *
!     REAL XLOW
!        *
!     REAL XMAX
!        *
!     REAL XMID
!        *
!     REAL XMIN
!        *
!     REAL XN
!        *
!     REAL XUP
!        *
!     REAL ZN
!        *
!
!---------------------------------------------------------------------
!
!     COMMON /MACH/IRD,IPR,CPUMIN,CPUMAX,NUMBPC,NUMCPW,NUMBPW
!     COMMON /PRINT/IFEEDB,IPRINT
!
!-----START POINT-----------------------------------------------------
!
!     CHECK THE INPUT ARGUMENTS FOR ERRORS
!
      call iprint(iprt)
!
      ppff = 0.0e0
      if (nu1.le.0) go to 10
      if (nu2.le.0) go to 20
      if (p.lt.0.0e0 .or. p.ge.1.0e0) go to 30
      go to 40
   10 write (iprt,1010)
      write (iprt,1040) nu1
      ppff = 0.0e0
      return
   20 write (iprt,1020)
      write (iprt,1040) nu2
      ppff = 0.0e0
      return
   30 write (iprt,1000)
      write (iprt,1030) p
      ppff = 0.0e0
      return
   40 continue
!
!-----START POINT-----------------------------------------------------
!
      ibug = 0.0e0
!
      tol = 0.000001e0
      maxit = 100
      xmin = 0.0e0
      xmax = 10.0e30
      xlow = xmin
      xup = xmax
!
      anu1 = nu1
      anu2 = nu2
!
      expf = 0.5e0*((1.0e0/anu2)-(1.0e0/anu1))
      sdf = sqrt(0.5e0*((1.0e0/anu2)+(1.0e0/anu1)))
      zn = ppfnml(p)
      xn = expf + zn*sdf
      xmid = exp(2.0e0*xn)
      if (ibug.eq.1) write (iprt,1050) xmid
!
      if (p.eq.0.0e0) go to 50
      go to 60
   50 continue
      ppff = xmin
      return
   60 continue
!
      icount = 0
!
   70 continue
      x = xmid
      pcalc = cdff(x,anu1,anu2)
      if (pcalc.eq.p) go to 130
      if (pcalc.gt.p) go to 100
!
   80 continue
      xlow = xmid
      x = xmid*2.0e0
      if (x.ge.xup) go to 90
      xmid = x
      if (ibug.eq.1) write (iprt,1050) xmid
      pcalc = cdff(x,anu1,anu2)
      if (pcalc.eq.p) go to 130
      if (pcalc.lt.p) go to 80
      xup = x
   90 continue
      xmid = (xlow+xup)/2.0e0
      if (ibug.eq.1) write (iprt,1050) xmid
      go to 120
!
  100 continue
      xup = xmid
      x = xmid/2.0e0
      if (x.le.xlow) go to 110
      xmid = x
      if (ibug.eq.1) write (iprt,1050) xmid
      pcalc = cdff(x,anu1,anu2)
      if (pcalc.eq.p) go to 130
      if (pcalc.gt.p) go to 100
      xlow = x
  110 continue
      xmid = (xlow+xup)/2.0e0
      if (ibug.eq.1) write (iprt,1050) xmid
!
  120 continue
      xdel = abs(xmid-xlow)
      icount = icount + 1
      if (xdel.lt.tol .or. icount.gt.maxit) go to 130
      go to 70
!
  130 continue
      ppff = xmid
!
      return
1000 format (' ', 49h***** fatal error--the first  input argument to t,&
    &   59hhe fppf subroutine is outside the allowable (0,1) interval ,&
     &   5h*****)
1010 format (' ', 49h***** fatal error--the second input argument to t,&
     &   42hhe fppf   subroutine is non-positive *****)
1020 format (' ', 49h***** fatal error--the third  input argument to t,&
     &   42hhe fcdf   subroutine is non-positive *****)
1030 format (' ', 35h***** the value of the argument is , e15.8,&
     &   6h *****)
 1040 format (' ', 35h***** the value of the argument is , i8, 6h *****)
 1050 format (' ', 7hxmid = , e15.7)
      end
