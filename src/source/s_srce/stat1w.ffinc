!STAT1W
     subroutine stat1w(y, wt, n, ymed, ymin, ymax, ymidrg, yrange,&
     &   ncells, ylb, yub, ydistr, nnzw)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS COMPUTES STATISTICS FOR A VECTOR Y THAT REQUIRE OR CAN
!     MAKE USE OF SORTEDNESS IN THE VECTOR.  WEIGHTS ARE USED.
!
!     THIS SUBROUTINE IS BASED ON A MODIFICATION OF THE STATIS
!     CODE USED IN OMNITAB, VERSION 5 (6/16/72), WRITTED BY
!     SALLY PEAVY.  THE ORIGINAL ADAPTATION TO STARPAC WAS MADE
!     BY JANET DONALDSON.
!
!     WRITTEN BY - JOHN E. KOONTZ
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  MAY 17, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   ylb,ymax,ymed,ymidrg,ymin,yrange,yub
     integer&
     &   n,ncells,nnzw
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   wt(n),y(n),ydistr(ncells)
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   dely,yt
     integer&
     &   i,ic,ic1,kk,l,m,m1,max,maxy,miny,n2
!
!  INTRINSIC FUNCTIONS
      intrinsic mod
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: DELY
!        THE WIDTH OF AN INTERVAL ONE TENTH THE RANGE OF THE
!        DATA IN Y.
!     INTEGER I
!        A LOOP INDEX.
!     INTEGER IC
!        PREVIOUS SIGN IN RUNS CALCULATION.
!     INTEGER IC1
!        COUNT IN FREQUENCY DISTRIBUTION CALCULATIONS.
!     INTEGER KK
!        A BACKWARDS, BOULDER, COLORADO LOOP INDEX.
!     INTEGER L
!        A LOOP INDEX.
!     INTEGER M
!        A LOOP INDEX.
!     INTEGER MAX
!        INDEX OF A MAXIMUM ELEMENT.
!     INTEGER MAXY
!        LAST ELEMENT OF Y, THE LARGEST ONE.
!     INTEGER MINY
!        FIRST ELEMENT OF Y, THE LEAST ONE.
!     INTEGER M1
!        ...
!     INTEGER N
!        INPUT PARAMETER.  THE LENGTH OF Y AND WT.
!     INTEGER NCELLS
!        THE NUMBER OF CELLS IN THE FREQUENCY DISTRIBUTION.
!     INTEGER NNZW
!        INPUT PARAMETER.  THE NUMBER OF POSITIVE ELEMENTS IN WT.
!     INTEGER N2
!        (NNZW + 1)/2
!     REAL(KIND=WP) :: WT(N)
!        INPUT PARAMETER.  THE VECTOR OF WEIGHTS FOR THE
!        Y OBSERVATIONS.
!     REAL(KIND=WP) :: Y(N)
!        INPUT PARAMETER.  A SET OF N DATA POINTS, SORTED
!        INTO ASCENDING ORDER.
!     REAL(KIND=WP) :: YDISTR(NCELLS)
!        OUTPUT PARAMETER.  THE NUMBERS OF Y VALUES WITH
!        POSITIVE WEIGHTS IN EACH OF TEN EQUAL LENGTH INTERVALS.
!        THAT DIVIDE THE RANGE OF Y VALUES.
!     REAL(KIND=WP) :: YLB
!        THE LOWER BOUND FOR THE FREQUENCY DISTRIBUTION.
!        IF YLB = YUB, THE MINIMUM OBSERVATION WILL BE USED.
!     REAL(KIND=WP) :: YMAX
!        OUTPUT PARAMETER.  THE MAXIMUM OF THE OBSERVATIONS Y HAVING
!        POSITIVE WEIGHT.
!     REAL(KIND=WP) :: YMED
!        OUTPUT PARAMETER.  THE MEDIAN OF THE OBSERVATIONS Y.
!     REAL(KIND=WP) :: YMIDRG
!        OUTPUT PARAMETER.  THE MIDRANGE OF THE OBSERVATIONS Y.
!     REAL(KIND=WP) :: YMIN
!        OUTPUT PARAMETER.  THE MINIMUM OF THE OBSERVATIONS Y HAVING
!        POSITIVE WEIGHT.
!     REAL(KIND=WP) :: YRANGE
!        OUTPUT PARAMETER.  THE RANGE OF THE OBSERVATIONS Y.
!     REAL(KIND=WP) :: YT
!        THE MAXIMUM VALUE IN EACH INTERVAL IN THE FREQUENCY
!        DISTRIBUTIONS CALCULATIONS.
!     REAL(KIND=WP) :: YUB
!        THE UPPER BOUND FOR THE FREQUENCY DISTRIBUTION.
!        IF YLB = YUB, THE MAXIMUM OBSERVATION WILL BE USED.
!
!     CALCULATE THE MEDIAN.
!
      n2 = (nnzw+1)/2
      m = 1
      do 10 i=1,n
         if (i.gt.n2) go to 20
         m = i
         if (wt(m).le.0.0e0) n2 = n2 + 1
   10 continue
   20 m1 = m
      if (mod(nnzw,2).ne.0) go to 40
      do 30 m1=m,n
         if (wt(m1).gt.0.0e0) go to 40
   30 continue
   40 ymed = (y(i)+y(m1))/2.0e0
!
!     CALCULATE THE MIDRANGE, RANGE, MINIMUM, AND MAXIMUM.
!
      max = n - nnzw + 1
      do 50 i=1,max
         miny = i
         if (wt(miny).gt.0.0e0) go to 60
   50 continue
   60 do 70 i=1,max
         kk = n + 1 - i
         maxy = kk
         if (wt(maxy).gt.0.0e0) go to 80
   70 continue
   80 ymidrg = (y(miny)+y(maxy))/2.0e0
      yrange = y(maxy) - y(miny)
      ymin = y(miny)
      ymax = y(maxy)
!
!     COMPUTE FREQUENCY DISTRIBUTION
!
      dely = yrange
      yt = ymin
      if (ylb.ge.yub) go to 5
         dely = yub - ylb
         yt = ylb
    5 continue
      dely = dely / ncells
      yt = yt + dely
      l = 0
      ic1 = 0
      do 110 i=2,ncells
         ic = 0
   90    l = l + 1
         if (l.gt.n) go to 100
         if (wt(l).le.0.0e0) go to 90
         if (y(l).gt.yt) go to 100
         ic = ic + 1
         ic1 = ic1 + 1
         go to 90
  100    ydistr(i-1) = ic
         l = l - 1
         yt = yt + dely
  110 continue
      ydistr(ncells) = nnzw - ic1
      return
      end
