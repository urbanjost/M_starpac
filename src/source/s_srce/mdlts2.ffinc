!MDLTS2
     subroutine mdlts2 (par, rests, y, npar, n, nfac, mspect, pmu,&
     &  pardf, npardf, t, temp, parar, parma, mbo, n1, n2, iflag)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS IS THE MODEL ROUTINE FOR PACKS SPECIFICATION OF
!     BOX-JENKINS MODELS.
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  JANUARY 4, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   pmu
     integer&
     &   iflag,mbo,n,n1,n2,nfac,npar,npardf
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
    &   par(npar),parar(*),pardf(*),parma(*),rests(n1:n2),t(*),&
     &   temp(*),y(n)
     integer&
     &   mspect(nfac,4)
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   fplpm,resmax,wtest
     integer&
    &   i,imod,imod1,ipar,ipq,istart,j,k,l,maxord,mbo1,np,nparar,&
     &   nparma
     logical&
     &   parle1
!
!  EXTERNAL FUNCTIONS
     real(kind=wp) ::&
     &   r1mach
!       EXTERNAL R1MACH
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,log,mod,sign,sqrt
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: FPLPM
!        THE FLOATING POINT LARGEST POSITIVE MAGNITUDE.
!     INTEGER I
!        AN INDEX VARIABLE.
!     INTEGER IFLAG
!        AN INDICATOR VARIABLE DESIGNATING WHETHER THE BACK FORECASTS
!        WERE ESSENTIALLY ZERO (IFLAG=0) OR NOT (IFLAG=1).
!     INTEGER IMOD
!        AN INDEX VARIABLE.
!     INTEGER IPAR
!        AN INDEX VARIABLE.
!     INTEGER IPQ
!        AN INDEX VARIABLE.
!     INTEGER ISTART
!        ***
!     INTEGER J
!        AN INDEX VARIABLE.
!     INTEGER K
!        AN INDEX VARIABLE.
!     INTEGER L
!        AN INDEX VARIABLE.
!     INTEGER MAXORD
!        THE LARGEST BACK ORDER.
!     INTEGER MBO
!        THE MAXIMUM BACK ORDER OPERATOR.
!     INTEGER MBO1
!        THE VALUE MBO+1
!     INTEGER MSPECT(NFAC,4)
!        THE ARRAY CONTAINING THE VALUES OF P, D, Q, AND S FOR EACH FACT
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NFAC
!        THE NUMBER OF FACTORS IN THE MODEL
!     INTEGER NP
!        THE NUMBER OF PARAMETERS IN THE EXPANDED TERM.
!     INTEGER NPAR
!        THE NUMBER OF PARAMETERS IN THE MODEL.
!     INTEGER NPARAR
!        THE NUMBER OF AUTOREGRESSIVE PARAMETERS
!     INTEGER NPARDF
!        THE ORDER OF THE EXPANDED DIFFERENCE FILTER.
!     INTEGER NPARMA
!        THE LENGTH OF THE VECTOR PARMA
!     INTEGER N1
!        THE LOWER BOUND FOR RESTS.
!     INTEGER N2
!        THE UPPER BOUND FOR RESTS.
!     REAL(KIND=WP) :: PAR(NPAR)
!        THE CURRENT ESTIMATES OF THE PARAMETERS.
!     REAL(KIND=WP) :: PARAR(MBO)
!        THE AUTOREGRESSIVE PARAMETERS
!     REAL(KIND=WP) :: PARDF(NPARDF)
!        THE VECTOR CONTAINING THE DIFFERENCE FILTER PARAMETERS.
!     LOGICAL PARLE1
!        A FLAG INDICATING WHETHER ALL OF THE MOVING AVERAGE PARAMETERS
!        ARE LESS THAN OR EQUAL TO 1 (PARLE1 = .TRUE.) OR NOT
!        (PARLE1 = .FALSE.)
!     REAL(KIND=WP) :: PARMA(MBO)
!        THE MOVING AVERAGE PARAMETERS
!     REAL(KIND=WP) :: PMU
!        THE VALUE OF MU, I.E., THE TREND OR MEAN.
!     REAL(KIND=WP) :: RESMAX
!        THE LARGEST POSSIBLE RESIDUAL WHICH WILL STILL AVOID OVERFLOW.
!     REAL(KIND=WP) :: RESTS(N1:N2)
!        THE PREDICTED VALUE OF THE FIT.
!     REAL(KIND=WP) :: T(2*MBO)
!        A TEMPORARY WORK VECTOR.
!     REAL(KIND=WP) :: TEMP(MBO)
!        A TEMPORARY WORK VECTOR
!     REAL(KIND=WP) :: WTEST
!        THE TEST VALUE USED TO DETERMINE IF THE DIFFERENCED SERIES
!        BACK FORECAST IS EFFECTIVELY ZERO OR NOT.
!     REAL(KIND=WP) :: Y(N)
!        THE DEPENDENT VARIABLE.
!
      fplpm = r1mach(2)
!
!     ZERO THE PARAMETER ARRAYS PARAR AND PARMA
!
      do 10 i=1,mbo
         t(i) = 0.0e0
         temp(i) = 0.0e0
   10 continue
!
      np = 0
      ipar = 0
      nparar = 0
      istart = 0
!
!     EXPAND THE MODEL AND STORE AUTOREGRESSIVE PARAMETERS IN PARAR
!     AND MOVING AVERAGE PARAMETERS IN PARMA
!
      do 110 ipq = 1, 3, 2
         do 100 l=1,nfac
            if (mspect(l,ipq).eq.0) go to 100
            maxord = mspect(l,ipq)*mspect(l,4)
            do 90 k = mspect(l,4), maxord, mspect(l,4)
               ipar = ipar + 1
               temp(k) = temp(k) + par(ipar)
               do 80 i = 1, np
                  temp(k+i) = temp(k+i) - t(i)*par(ipar)
   80          continue
   90       continue
            np = np + maxord
            do 95 k = 1, np
               t(k) = temp(k)
   95       continue
  100    continue
          if (ipq.ne.3) then
            ipar = ipar + 1
            pmu = par(ipar)
            nparar = np
            do 105 k =1, nparar
               parar(k) = t(k)
               t(k) = 0.0e0
               temp(k) = 0.0e0
  105       continue
            np = 0
         end if
  110 continue
      nparma = np
      parle1 = .true.
      do 115 k =1, nparma
         parma(k) = t(k)
         if (abs(parma(k)).gt.1.0e0) parle1 = .false.
  115 continue
!
!     COMPUTE FITTED VALUES AND RESIDUALS FOR MODEL.
!
!     COMPUTE W, THE DIFFERENCED SERIES MINUS ITS MEAN, AND STORE IN
!     RESTS(NPARDF+1) TO RESTS(N2)
!
      do 140 i = npardf+1, n2, 1
         rests(i) = y(i) - pmu
         do 130 j = 1,npardf
            rests(i) = rests(i) - pardf(j)*y(i-j)
  130    continue
  140 continue
      wtest = abs(rests(npardf+1))*0.01
!
!     BACK FORECAST THE ERROR, E, FOR I = N-NPARAR TO NPARDF+1, AND
!     THE DIFFERENCED SERIES FOR I = NPARDF TO N1
!
      mbo1 = mbo+1
      iflag = 0
      do 170 i = n2-nparar,npardf+1,-1
         imod = mod(i+1-n1,mbo1) + 1
         t(imod) = rests(i)
         do 150 j = 1,nparar
            t(imod) = t(imod) - parar(j)*rests(i+j)
  150    continue
         do 160 j = 1,nparma
           if ((i+j.gt.npardf) .and. (i+j.le.n))&
     &         t(imod) = t(imod) + parma(j)*t(mod(i+j+1-n1,mbo1)+1)
  160    continue
  170 continue
      do 175 i = npardf,n1,-1
         imod = mod(i+1-n1,mbo1) + 1
         rests(i) = 0.0e0
         do 163 j = 1,nparar
            rests(i) = rests(i) + parar(j)*rests(i+j)
  163    continue
         do 166 j = 1,nparma
           if ((i+j.gt.npardf) .and. (i+j.le.n))&
    &         rests(i) = rests(i) -&
     &                    parma(j)*t(mod(i+j+1-n1,mbo1)+1)
  166    continue
         istart = i
         if ((istart.le.1) .and. (abs(rests(i)).le.wtest)) go to 180
  175 continue
      iflag = 1
!
!     COMPUTE RESIDUALS AND STORE VALUES IN RESTS
!
  180 continue
      do 210 i = istart,n2,1
         imod = mod(i+1-n1,mbo1) + 1
         t(imod) = rests(i)
         do 190 j = 1,nparar
            if (i-j.ge.istart) t(imod) = t(imod) - parar(j)*rests(i-j)
  190    continue
!
         if (parle1) then
!
!     COMPUTE RESIDUALS WHERE THERE IS NO CHANCE OF OVERFLOW
!
            do 200 j = 1,nparma
              if (i-j.ge.istart)&
     &            t(imod) = t(imod) + parma(j)*t(mod(i-j+1-n1,mbo1)+1)
  200       continue
         else
!
!     COMPUTE RESIDUALS WHERE THERE IS A CHANCE OF OVERFLOW
!
            do 205 j = 1,nparma
               if (i-j.ge.istart) then
                  imod1 = mod(i-j+1-n1,mbo1)+1
                  if (parma(j).ne.0.0e0 .and. t(imod1).ne.0.0e0) then
                    if (log(abs(parma(j)))+log(abs(t(imod1))).lt.&
    &                         log(fplpm)&
    &                     .and.&
    &                     (sign(1.0_wp,t(imod)).ne.&
    &                         sign(1.0_wp,parma(j)*t(imod1))&
    &                     .or.&
    &                     log(abs(parma(j)))+log(abs(t(imod1))).lt.&
     &                         log(fplpm-abs(t(imod))))) then
                        t(imod) = t(imod) + parma(j)*t(imod1)
                     else
                        go to 300
                     end if
                  end if
               end if
  205       continue
         end if
         if (i-mbo.ge.istart) then
            rests(i-mbo) = t(mod(i-mbo+1-n1,mbo1)+1)
         end if
  210 continue
      do 220 i = n-mbo+1,n
        rests(i) = t(mod(i-mbo+2-n1,mbo1)+1)
  220 continue
!
      do 230 i = n1, istart-1
         rests(i) = 0.0e0
  230 continue
!
      return
!
!     SET RESIDUALS TO LARGEST POSSIBLE VALUE
!
  300 resmax = sqrt(fplpm/(n2-n1+1))
      do 310 i=n1,n2
         rests(i) = resmax
  310 continue
!
      return
!
      end
