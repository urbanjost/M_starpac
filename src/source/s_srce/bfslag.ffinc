!BFSLAG
     subroutine bfslag(ccov, lagmax, lags, n, nw, nwused, iccov,&
     &   jccov, index1, index2)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS ROUTINE COMPUTES THE LAG WINDOW TRUNCATION POINTS FOR
!     FOURIER BIVARIATE SPECTRUM ANALYSIS.
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 2, 1985
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   iccov,index1,index2,jccov,lagmax,n,nw,nwused
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   ccov(iccov,jccov,*)
     integer&
     &   lags(*)
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   covmx,covmxi,fac11,fac12,fac21,fac22,p95lim
     integer&
     &   i,j,k,lag,nwm1
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,max,real,sqrt
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL CCOV(ICCOV,JCCOV,*)
!        THE COVARIANCES.
!     REAL COVMX
!        THE MAXIMUM COVARIANCE VALUE.
!     REAL COVMXI
!        THE MAXIMUM COVARIANCE VALUE FOR THE ITH LAG.
!     REAL FAC11, FAC12, FAC21, FAC22
!        FACTORS USED TO COMPUTE THE CORRELATION COEFFICIENTS.
!     INTEGER I
!        AN INDEX VARIABLE
!     INTEGER ICCOV
!        THE FIRST DIMENSION OF THE ARRAY CCOV.
!     INTEGER INDEX1, INDEX2
!        THE INDICES OF THE COVARIANCES OF THE TWO SERIES.
!     INTEGER J
!        AN INDEX VALUE.
!     INTEGER JCCOV
!        THE SECOND DIMENSION OF THE ARRAY CCOV.
!     INTEGER K
!        AN INDEX VALUE.
!     INTEGER LAG, LAGMAX
!        THE INDEXING VARIABLE INDICATING THE LAG VALUE OF THE
!        BIVARIATE COVARIANCE BEING COMPUTED AND THE MAXIMUM LAG
!        TO BE USED, RESPECTIVELY.
!     INTEGER LAGS(NW)
!        THE ARRAY USED TO STORE THE LAG WINDOW TRUCCATION
!        POINTS USED FOR EACH SET OF SPECTRUM VALUES.
!     INTEGER N
!        THE INTEGER NUMBER OF OBSERVATIONS IN EACH SERIES
!     INTEGER NW
!        THE NUMBER OF DIFFERENT BANDWIDTHS REQUESTED.
!     INTEGER NWM1, NWUSED
!        THE NUMBER OF DIFFERENT BANDWIDTHS MINUS 1, AND THE
!        ACTUAL NUMBER OF BANDWIDTHS ACTUALLY USED.
!     REAL P95LIM
!        THE 95 PERCENT CONFIDENT LIMIT FOR WHITE NOISE.
!
      lags(nw) = lagmax
      if (lags(nw).le.32) go to 30
!
!     COMPUTE 95 PERCENT CONFIDENCE LIMITS ON BIVARIATECOVARIANCES,
!     ASSUMING WHITE NOISE.
!
      p95lim = 1.96e0/sqrt(real(n))
!
      fac11 = ccov(1,index1,index1)
      fac12 = sqrt(ccov(1,index1,index1)*ccov(1,index2,index2))
      fac21 = fac12
      fac22 = ccov(1,index2,index2)
!
!     CHECK FOR FIRST CVF EXCEEDING 95 PERCENT LIMIT ON WHITE NOISE
!
      do 10 i=1,lagmax
         lag = lagmax + 1 - i
        covmxi = max(abs(ccov(lag,index1,index1)*fac11),abs(ccov(lag,&
    &      index1,index2)*fac12),abs(ccov(lag,index2,index1)*fac21),&
     &      abs(ccov(lag,index2,index2)*fac22))
         if (covmxi.ge.p95lim) go to 30
         lags(nw) = lags(nw) - 1
   10 continue
!
!     IF NO ACVF EXCEEDS WHITE NOISE LIMITS, CHECK FOR LARGEST ACVF.
!
      lags(nw) = 1
      covmx = abs(ccov(2,1,1)*fac11)
      do 20 lag=1,lagmax
        covmxi = max(abs(ccov(lag,index1,index1)*fac11),abs(ccov(lag,&
    &      index1,index2)*fac12),abs(ccov(lag,index2,index1)*fac21),&
     &      abs(ccov(lag,index2,index2)*fac22))
         if (covmxi.le.covmx) go to 20
         lags(nw) = lag
         covmx = covmxi
   20 continue
!
!     COMPUTE LAG WINDOW TRUNCATION POINTS
!
   30 lags(nw) = lags(nw)*3.0e0/2.0e0
      if (lags(nw).lt.32) lags(nw) = 32
      if (lags(nw).gt.lagmax) lags(nw) = lagmax
      nwused = nw
      if (nw.eq.1) return
      nwm1 = nw - 1
      do 40 i=1,nwm1
         k = nw - i
         lags(k) = lags(k+1)/2
   40 continue
!
!     CHECK WHETHER ALL NW LAG WINDOW TRUNCATION POINTS CAN BE USED.
!
      nwused = nw
      if (lags(1).ge.4) return
!
!     RECONSTURCT -LAGS- VECTOR IF NOT ALL TRUNCATION POINTS ARE
!     TO BE USED
!
      do 50 i=2,nw
         nwused = nwused - 1
         if (lags(i).ge.4) go to 60
   50 continue
!
   60 do 70 i=1,nwused
         j = nw - nwused + i
         lags(i) = lags(j)
   70 continue
!
      return
      end
