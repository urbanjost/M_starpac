!DCKCRV
     subroutine dckcrv(j, d, par, npar, eta, tau, mdl, xm, n,&
     &   nrow, m, ixm, pv, pvtemp, msg, lmsg, fd, parmx, pvpstp, stp)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS ROUTINE CHECKS WHETHER HIGH CURVATURE COULD BE THE CAUSE
!     OF THE DISAGREEMENT BETWEEN THE NUMERICAL AND ANALYTIC DERIVATIVES
!
!     WRITTEN BY  -  ROBERT B. SCHNABEL (CODED BY JANET R. DONALDSON)
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  APRIL 2, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   d,eta,fd,parmx,pv,pvpstp,stp,tau
     integer&
     &   ixm,j,lmsg,m,n,npar,nrow
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   par(npar),pvtemp(n),xm(ixm,m)
     integer&
     &   msg(lmsg)
!
!  SUBROUTINE ARGUMENTS
       external mdl
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   curve,fplrs,pvmcrv,pvpcrv,stpcrv,temp,third
!
!  EXTERNAL FUNCTIONS
     real(kind=wp) ::&
     &   r1mach
!       EXTERNAL R1MACH
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL DCKFPA
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,sign
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL CURVE
!        A MEASURE OF THE CURVATURE IN THE MODEL.
!     REAL D
!        THE SCALAR IN WHICH ROW   NROW   OF THE DERIVATIVE
!        MATRIX WITH RESPECT TO THE JTH UNKNOWN PARAMETER
!        IS STORED.
!     REAL ETA
!        THE RELATIVE NOISE IN THE MODEL.
!     REAL FD
!        THE FORWARD DIFFERENCE QUOTIENT DERIVATIVE WITH RESPECT TO THE
!        JTH PARAMETER.
!     REAL FPLRS
!        THE FLOATING POINT LARGEST RELATIVE SPACING.
!     INTEGER IXM
!        THE FIRST DIMENSION OF THE INDEPENDENT VARIABLE ARRAY.
!     INTEGER J
!        THE INDEX OF THE PARTIAL DERIVATIVE BEING EXAMINED.
!     INTEGER LMSG
!        THE LENGTH OF THE VECTOR MSG.
!     INTEGER M
!        THE NUMBER OF INDEPENDENT VARIABLES.
!     EXTERNAL MDL
!        THE NAME OF THE USER SUPPLIED SUBROUTINE WHICH COMPUTES THE
!        PREDICTED VALUES BASED ON THE CURRENT PARAMETER ESTIMATES.
!     INTEGER MSG(LMSG)
!        AN ARRAY USED TO STORE MESSAGE PARAMETERS.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NPAR
!        THE NUMBER OF UNKNOWN PARAMETERS IN THE MODEL.
!     INTEGER NROW
!        THE NUMBER OF THE ROW OF THE INDEPENDENT VARIABLE ARRAY AT
!        WHICH THE DERIVATIVE IS TO BE CHECKED.
!     REAL PAR(NPAR)
!        THE ARRAY IN WHICH THE CURRENT ESTIMATES OF THE UNKNOWN
!        PARAMETERS ARE STORED.
!     REAL PARMX
!        THE MAXIMUM OF THE CURRENT PARAMETER ESTIMATE.
!     REAL PV
!        THE SCALAR IN WHICH THE PREDICTED VALUE FROM THE MODEL FOR
!        ROW   NROW   IS STORED.
!     REAL PVMCRV
!        THE PREDICTED VALUE FOR ROW    NROW   OF THE MODEL
!        BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J)-STPCRV.
!     REAL PVPCRV
!        THE PREDICTED VALUE FOR ROW    NROW   OF THE MODEL
!        BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J)+STPCRV.
!     REAL PVPSTP
!        THE PREDICTED VALUE FOR ROW    NROW   OF THE MODEL
!        BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J) + STP.
!     REAL PVTEMP(N)
!        THE VECTOR OF PREDICTED VALUES FROM THE MODEL.
!     REAL STP
!        THE STEP SIZE CURRENTLY BEING EXAMINED FOR THE FINITE DIFFERENC
!        DERIVATIVE
!     REAL STPCRV
!        THE STEP SIZE SELECTED TO CHECK FOR CURVATURE IN THE MODEL.
!     REAL TAU
!        THE AGREEMENT TOLERANCE.
!     REAL TEMP
!        A TEMPORARY LOCATION IN WHICH THE CURRENT ESTIMATE OF THE JTH
!        PARAMETER IS STORED.
!     REAL THIRD
!        THE VALUE ONE THIRD.
!     REAL XM(IXM,M)
!        THE ARRAY IN WHICH ONE ROW OF THE INDEPENDENT VARIABLE ARRAY
!        IS STORED.
!
      fplrs = r1mach(4)
!
      third = 1.0e0/3.0e0
!
      stpcrv = (eta**third*parmx*sign(1.0e0,par(j))+par(j)) - par(j)
!
      temp = par(j)
      par(j) = temp + stpcrv
      call mdl(par, npar, xm, n, m, ixm, pvtemp)
!
      pvpcrv = pvtemp(nrow)
!
      par(j) = temp - stpcrv
      call mdl(par, npar, xm, n, m, ixm, pvtemp)
      par(j) = temp
!
      pvmcrv = pvtemp(nrow)
!
!     ESTIMATE CURVATURE BY SECOND DERIVATIVE OF MODEL WITH RESPECT TO
!     PAR(J)
!
      curve = ((pvpcrv+pvmcrv)-2*pv) / (stpcrv*stpcrv)
     curve = curve + (eta ** third) * (abs(pvpcrv) +&
     &   abs(pvmcrv) + 2.0e0 * abs(pv)) / (parmx * parmx)
!
!     COMPARE NUMERICAL AND ANALYTICAL DERIVATIVES USING A FUDGE
!     FACTOR OF 10.0E0.
!
      if (abs(curve*stp)*5.0e0.lt.abs(fd-d)) then
!
!     CURVATURE CANNOT ACCOUNT FOR DISCREPANCY.
!     CHECK IF FINITE PRECISION ARITHMETIC COULD BE THE CULPRIT.
!
        call dckfpa(j,d,par,npar,eta,tau,mdl,xm,n,nrow,&
     &      m,ixm,pv,pvtemp,msg,lmsg,fd,parmx,stp,pvpstp,curve)
!
      else
!
!     HIGH CURVATURE COULD BE THE PROBLEM.  TRY A SMALLER STEP SIZE.
!     COMPUTE SMALLER STEPSIZE
!
        stp = (2.0e0*tau*abs(d)*sign(1.0e0,par(j))/abs(curve)+par(j))&
     &          - par(j)
!
         if (abs(stp).le.fplrs*abs(par(j))) then
!
!     NEW STEP SIZE IS TOO SMALL TO USE.
!
            if (msg(1).eq.0) msg(1) = 1
            msg(j+1) = 1
         else
!
!     TRY NEW STEP SIZE
!
            temp = par(j)
            par(j) = temp + stp
            call mdl(par, npar, xm, n, m, ixm, pvtemp)
            par(j) = temp
            pvpstp = pvtemp(nrow)
!
!     COMPUTE THE NEW NUMERICAL DERIVATIVE
!
            fd = (pvpstp-pv)/stp
!
!     CHECK WHETHER THE NEW NUMERICAL DERIVATIVE IS NOT OK
!
            if (abs(fd-d).gt.2.0e0*tau*abs(d)) then
!
!     NUMERICAL DERIVATIVE COMPUTED USING NEW STEP SIZE DOES
!     NOT AGREE WITH ANALYTIC DERIVATIVE.
!
!     CHECK IF THE PROBLEM COULD BE THE FORWARD DIFFERENCE QUOTIENT
!     DERIVATIVE.
!     (FUDGE FACTOR IS 2)
!
               if (abs(stp*(fd-d)).ge.2.0e0*eta*abs(pv+pvpstp)) then
!
!     FINITE PRECISION COULD NOT BE THE CULPRIT
!
                  msg(1) = 2
                  msg(j+1) = 2
               else
!
!     FINITE PRECISION MAY BE THE CULPRIT
!
                  if (msg(1).eq.0) msg(1) = 1
                  msg(j+1) = 1
               end if
            end if
         end if
      end if
      return
!
      end
