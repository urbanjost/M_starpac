!RANDU
      real(kind=wp) function randu(jd)
!***BEGIN PROLOGUE  RANDU  (ORIGINALLY UNI)
!***DATE WRITTEN   810915
!***REVISION DATE  900315
!***CATEGORY NO.  L6A21
!***KEYWORDS  RANDOM NUMBERS, UNIFORM RANDOM NUMBERS
!***AUTHOR    BLUE, JAMES
!             KAHANER, DAVID
!             APPLIED AND COMPUTATIONAL MATHEMATICS DIVISTION, NIST
!
!             MARSAGLIA, GEORGE
!             COMPUTER SCIENCE DEPT., WASH STATE UNIV
!
!             MODIFIED BY -
!             DONALDSON, JANET
!             APPLIED AND COMPUTATIONAL MATHEMATICS DIVISTION, NIST
!
!***PURPOSE  THIS ROUTINE GENERATES QUASI UNIFORM RANDOM NUMBERS ON
!             (0,1] AND CAN BE USED ON ANY COMPUTER WHICH ALLOWS
!             INTEGERS AT LEAST AS LARGE AS 32767.
!***DESCRIPTION
!
!       THIS ROUTINE GENERATES QUASI UNIFORM RANDOM NUMBERS ON THE
!       INTERVAL (0,1].  IT CAN BE USED WITH ANY COMPUTER WHICH ALLOWS
!       INTEGERS AT LEAST AS LARGE AS 32767.
!
!
!   USE
!       FIRST TIME....
!                   Z = RANDU(JD)
!                     HERE JD IS ANY  N O N - Z E R O  INTEGER.
!                     THIS CAUSES INITIALIZATION OF THE PROGRAM
!                     AND THE FIRST RANDOM NUMBER TO BE RETURNED AS Z.
!       SUBSEQUENT TIMES...
!                   Z = RANDU(0)
!                     CAUSES THE NEXT RANDOM NUMBER TO BE RETURNED AS Z.
!
!
!===================================================================
!   NOTE: USERS WHO WISH TO TRANSPORT THIS PROGRAM FROM ONE COMPUTER
!         TO ANOTHER SHOULD READ THE FOLLOWING INFORMATION:
!
!   MACHINE DEPENDENCIES...
!      MDIG = A LOWER BOUND ON THE NUMBER OF BINARY DIGITS AVAILABLE
!              FOR REPRESENTING INTEGERS, INCLUDING THE SIGN BIT.
!              THIS VALUE MUST BE AT LEAST 16, BUT MAY BE INCREASED
!              IN LINE WITH REMARK A BELOW.
!
!   REMARKS...
!     A. THIS PROGRAM CAN BE USED IN TWO WAYS:
!        (1) TO OBTAIN REPEATABLE RESULTS ON DIFFERENT COMPUTERS,
!            SET 'MDIG' TO THE SMALLEST OF ITS VALUES ON EACH, OR,
!        (2) TO ALLOW THE LONGEST SEQUENCE OF RANDOM NUMBERS TO BE
!            GENERATED WITHOUT CYCLING (REPEATING) SET 'MDIG' TO THE
!            LARGEST POSSIBLE VALUE.
!     B. THE SEQUENCE OF NUMBERS GENERATED DEPENDS ON THE INITIAL
!          INPUT 'JD' AS WELL AS THE VALUE OF 'MDIG'.
!          IF MDIG=16 ONE SHOULD FIND THAT
!            THE FIRST EVALUATION
!              Z=RANDU(305) GIVES Z=.027832881...
!            THE SECOND EVALUATION
!              Z=RANDU(0) GIVES   Z=.56102176...
!            THE THIRD EVALUATION
!              Z=RANDU(0) GIVES   Z=.41456343...
!            THE THOUSANDTH EVALUATION
!              Z=RANDU(0) GIVES   Z=.19797357...
!
!***REFERENCES  MARSAGLIA G., "COMMENTS ON THE PERFECT UNIFORM RANDOM
!                 NUMBER GENERATOR", UNPUBLISHED NOTES, WASH S. U.
!***ROUTINES CALLED  I1MACH,XERROR
!***END PROLOGUE  RANDU
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   jd
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   one,zero
     integer&
     &   i,j,j0,j1,jseed,k,k0,k1,m1,m2,mdig
!
!  LOCAL ARRAYS
     integer&
     &   m(17)
!
!  EXTERNAL FUNCTIONS
!      INTEGER
!     &   I1MACH
!       EXTERNAL I1MACH
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL XERROR
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,min,mod,real
!
!  SAVE STATEMENT
      save i,j,m,m1,m2
!
!
     data m(1),m(2),m(3),m(4),m(5),m(6),m(7),m(8),m(9),m(10),m(11),&
    &     m(12),m(13),m(14),m(15),m(16),m(17)/30788,23052,2053,19346,&
    &     10646,19427,23975,19049,10949,19693,29746,26748,2796,23890,&
     &     29168,31924,16499/
      data m1,m2,i,j/32767,256,5,17/
      data zero,one /0.0e0,1.0e0/
!
!***FIRST EXECUTABLE STATEMENT  RANDU
      if (jd.ne.0) then
!  FILL
          mdig = i1mach(8) + 1
!
!  MODIFICATION SO SAME NUMBERS WILL BE GENERATED ON ALL MACHINES
!  WITH I1MACH(8) AT LEAST 31
!
          mdig = min(mdig,32)
!
!  BE SURE THAT MDIG AT LEAST 16...
          if (mdig.lt.16) call xerror('RANDU--MDIG LESS THAN 16',22,1,2)
          m1 = 2** (mdig-2) + (2** (mdig-2)-1)
          m2 = 2** (mdig/2)
          jseed = min(abs(jd),m1)
          if (mod(jseed,2).eq.0) jseed = jseed - 1
          k0 = mod(9069,m2)
          k1 = 9069/m2
          j0 = mod(jseed,m2)
          j1 = jseed/m2
          do 10 i = 1,17
              jseed = j0*k0
              j1 = mod(jseed/m2+j0*k1+j1*k0,m2/2)
              j0 = mod(jseed,m2)
              m(i) = j0 + m2*j1
   10     continue
          i = 5
          j = 17
      end if
!  BEGIN MAIN LOOP HERE
      k = m(i) - m(j)
      if (k.lt.0) k = k + m1
      m(j) = k
      i = i - 1
      if (i.eq.0) i = 17
      j = j - 1
      if (j.eq.0) j = 17
      randu = real(k)/real(m1)
!
!  MODIFICATION SO RANDOM NUMBERS IN (0,1] RATHER THAN [0,1)
!
      if (randu.eq.zero) randu = one
      end
