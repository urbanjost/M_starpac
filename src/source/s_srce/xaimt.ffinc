!XAIMT
      subroutine xaimt(ldstak,typ)
      real(kind=wp),intent(in) :: typ
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     ROUTINE TO TEST THE TIME SERIES MODEL ESTIMATION ROUTINES.
!
!     SERIES Y IS THE AIRLINE DATA LISTED ON PAGE 531 OF BOX AND JENKINS
!
!     WRITTEN BY - JANET R. DONALDSON
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 2, 1985
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   ldstak
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  ARRAYS IN COMMON
      double precision dstak(12)
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   delta,rsd,stopp,stopss
     integer&
     &   i,ifcst,iprt,ivaprx,ivcv,mit,nfac,npar,npare,nprt,ny
!
!  LOCAL ARRAYS
     real(kind=wp) ::&
    &   fcst(50,5),fcstsd(50),par(50),pv(200),res(200),scale(50),&
    &   sdpv(200),sdres(200),stp(50),vcv(10,10),y(200),ylog(200),&
     &   yt(200)
     integer&
     &   ifixed(50),mspec(4,50)
!
!  EXTERNAL SUBROUTINES
!      EXTERNAL AIME,AIMEC,AIMES,AIMF,AIMFS,IPRINT
!
!  INTRINSIC FUNCTIONS
      intrinsic log
!
!  COMMON BLOCKS
      common /cstak/dstak
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: DELTA
!        THE MAXIMUM CHANGE ALLOWED IN THE MODEL PARAMETERS AT THE
!        FIRST ITERATION.
!     DOUBLE PRECISION DSTAK(12)
!        THE DOUBLE PRECISION VERSION OF THE /CSTAK/ WORK AREA.
!     REAL(KIND=WP) :: FCST(50,5)
!        THE FORECASTS.
!     REAL(KIND=WP) :: FCSTSD(50)
!        THE STANDARD DEVIATIONS OF THE FORECASTS.
!     INTEGER I
!        *
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST.
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED.
!        IF IERR .GE. 1, ERRORS WERE DETECTED.
!     INTEGER IFCST
!        THE FIRST DIMENSION OF THE ARRAY FCST.
!     INTEGER IFIXED(50)
!        THE INDICATOR VALUES USED TO DESIGNATE WHETHER THE
!        PARAMETERS ARE TO BE OPTIMIZED OR ARE TO BE HELD FIXED.  IF
!        IFIXED(I).NE.0, THEN PAR(I) WILL BE OPTIMIZED.  IF
!        IFIXED(I).EQ.0, THEN PAR(I) WILL BE HELD FIXED.
!        IFIXED(I).LT.0, THEN ALL PAR(I),I=1,NPAR, WILL BE OPTIMIZED..
!     INTEGER IPRT
!        THE UNIT NUMBER FOR PRINTED OUTPUT.
!     INTEGER IVAPRX
!        AN INDICATOR VALUE USED TO DESIGNATE WHICH OPTION IS TO BE USED
!        TO COMPUTE THE VARIANCE COVARIANCE MATRIX (VCV), WHERE
!        IVAPRX LE 0 INDICATES THE THE DEFAULT OPTION WILL BE USED
!        IVAPRX EQ 1 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(HESSIAN)*TRANSPOSE(JACOBIAN)*JACOBIAN
!                          *INVERSE(HESSIAN)
!                    USING BOTH THE MODEL SUBROUTINE THE USER SUPPLIED
!                    DERIVATIVE SUBROUTINE WHEN IT IS AVAILABLE
!        IVAPRX EQ 2 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(HESSIAN)
!                    USING BOTH THE MODEL SUBROUTINE THE USER SUPPLIED
!                    DERIVATIVE SUBROUTINE WHEN IT IS AVAILABLE
!        IVAPRX EQ 3 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(TRANSPOSE(JACOBIAN)*JACOBIAN)
!                    USING BOTH THE MODEL SUBROUTINE THE USER SUPPLIED
!                    DERIVATIVE SUBROUTINE WHEN IT IS AVAILABLE
!        IVAPRX EQ 4 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(HESSIAN)*TRANSPOSE(JACOBIAN)*JACOBIAN
!                          *INVERSE(HESSIAN)
!                    USING ONLY THE MODEL SUBROUTINE
!        IVAPRX EQ 5 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(HESSIAN)
!                    USING ONLY THE MODEL SUBROUTINE
!        IVAPRX EQ 6 INDICATES THE VCV IS TO BE COMPUTED BY
!                       INVERSE(TRANSPOSE(JACOBIAN)*JACOBIAN)
!                    USING ONLY THE MODEL SUBROUTINE
!        IVAPRX GE 7 INDICATES THE DEFAULT OPTION WILL BE USED
!     INTEGER IVCV
!        THE FIRST DIMENSION OF THE VARIANCE COVARIANCE MATRIX VCV.
!     INTEGER LDSTAK
!        THE LENGTH OF THE ARRAY DSTAK.
!     INTEGER MIT
!        THE MAXIMUM NUMBER OF ITERATIONS ALLOWED.
!     INTEGER MSPEC(4,50)
!        THE ARRAY CONTAINING THE VALUES OF P, D, Q, AND S FOR EACH
!        FACTOR.
!     INTEGER NFAC
!        THE NUMBER OF FACTORS IN THE MODEL
!     INTEGER NPAR
!        THE NUMBER OF UNKNOWN PARAMETERS IN THE MODEL.
!     INTEGER NPARE
!        THE NUMBER OF PARAMETERS ESTIMATED BY THE ROUTINE.
!     INTEGER NPRT
!        THE PARAMETER USED TO INDICATE HOW MUCH PRINTED OUTPUT IS
!        TO BE PROVIDED.
!     INTEGER NY
!        THE NUMBER OF OBSERVATIONS.
!     REAL(KIND=WP) :: PAR(50)
!        THE ARRAY IN WHICH THE CURRENT ESTIMATES OF THE UNKNOWN
!        PARAMETERS ARE STORED.
!     REAL(KIND=WP) :: PV(200)
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!     REAL(KIND=WP) :: RES(200)
!        THE RESIDUALS FROM THE FIT.
!     REAL(KIND=WP) :: RSD
!        THE VALUE OF THE RESIDUAL STANDARD DEVIATION AT THE SOLUTION.
!     REAL(KIND=WP) :: SCALE(50)
!        A VALUE TO INDICATE USE OF THE DEFAULT VALUES OF
!        THE TYPICAL SIZE OF THE UNKNOWN PARAMETERS.
!     REAL(KIND=WP) :: SDPV(200)
!        THE STANDARD DEVIATION OF THE PREDICTED VALUE.
!     REAL(KIND=WP) :: SDRES(200)
!        THE STANDARD DEVIATIONS OF THE RESIDUALS.
!     REAL(KIND=WP) :: STOPP
!        THE STOPPING CRITERION FOR THE TEST BASED ON THE MAXIMUM SCALED
!        RELATIVE CHANGE IN THE ELEMENTS OF THE MODEL PARAMETER VECTOR
!     REAL(KIND=WP) :: STOPSS
!        THE STOPPING CRITERION FOR THE TEST BASED ON THE RATIO OF THE
!        PREDICTED DECREASE IN THE RESIDUAL SUM OF SQUARES (COMPUTED
!        BY STARPAC) TO THE CURRENT RESIDUAL SUM OF SQUARES ESTIMATE.
!     REAL(KIND=WP) :: STP(50)
!        THE RCSTEP SIZE ARRAY.
!     REAL(KIND=WP) :: VCV(10,10)
!        THE COVARIANCE MATRIX.
!     REAL(KIND=WP) :: Y(200),YLOG(200),YT(200)
!        THE ARRAY OF THE DEPENDENT VARIABLE.
!
!
     data    y(  1),   y(  2),   y(  3),   y(  4),   y(  5),   y(  6)&
     &    / 112.0_wp, 118.0_wp, 132.0_wp, 129.0_wp, 121.0_wp, 135.0_wp/
     data    y(  7),   y(  8),   y(  9),   y( 10),   y( 11),   y( 12)&
     &    / 148.0_wp, 148.0_wp, 136.0_wp, 119.0_wp, 104.0_wp, 118.0_wp/
     data    y( 13),   y( 14),   y( 15),   y( 16),   y( 17),   y( 18)&
     &    / 115.0_wp, 126.0_wp, 141.0_wp, 135.0_wp, 125.0_wp, 149.0_wp/
     data    y( 19),   y( 20),   y( 21),   y( 22),   y( 23),   y( 24)&
     &    / 170.0_wp, 170.0_wp, 158.0_wp, 133.0_wp, 114.0_wp, 140.0_wp/
     data    y( 25),   y( 26),   y( 27),   y( 28),   y( 29),   y( 30)&
     &    / 145.0_wp, 150.0_wp, 178.0_wp, 163.0_wp, 172.0_wp, 178.0_wp/
     data    y( 31),   y( 32),   y( 33),   y( 34),   y( 35),   y( 36)&
     &    / 199.0_wp, 199.0_wp, 184.0_wp, 162.0_wp, 146.0_wp, 166.0_wp/
     data    y( 37),   y( 38),   y( 39),   y( 40),   y( 41),   y( 42)&
     &    / 171.0_wp, 180.0_wp, 193.0_wp, 181.0_wp, 183.0_wp, 218.0_wp/
     data    y( 43),   y( 44),   y( 45),   y( 46),   y( 47),   y( 48)&
     &    / 230.0_wp, 242.0_wp, 209.0_wp, 191.0_wp, 172.0_wp, 194.0_wp/
     data    y( 49),   y( 50),   y( 51),   y( 52),   y( 53),   y( 54)&
     &    / 196.0_wp, 196.0_wp, 236.0_wp, 235.0_wp, 229.0_wp, 243.0_wp/
     data    y( 55),   y( 56),   y( 57),   y( 58),   y( 59),   y( 60)&
     &    / 264.0_wp, 272.0_wp, 237.0_wp, 211.0_wp, 180.0_wp, 201.0_wp/
     data    y( 61),   y( 62),   y( 63),   y( 64),   y( 65),   y( 66)&
     &    / 204.0_wp, 188.0_wp, 235.0_wp, 227.0_wp, 234.0_wp, 264.0_wp/
     data    y( 67),   y( 68),   y( 69),   y( 70),   y( 71),   y( 72)&
     &    / 302.0_wp, 293.0_wp, 259.0_wp, 229.0_wp, 203.0_wp, 229.0_wp/
     data    y( 73),   y( 74),   y( 75),   y( 76),   y( 77),   y( 78)&
     &    / 242.0_wp, 233.0_wp, 267.0_wp, 269.0_wp, 270.0_wp, 315.0_wp/
     data    y( 79),   y( 80),   y( 81),   y( 82),   y( 83),   y( 84)&
     &    / 364.0_wp, 347.0_wp, 312.0_wp, 274.0_wp, 237.0_wp, 278.0_wp/
     data    y( 85),   y( 86),   y( 87),   y( 88),   y( 89),   y( 90)&
     &    / 284.0_wp, 277.0_wp, 317.0_wp, 313.0_wp, 318.0_wp, 374.0_wp/
     data    y( 91),   y( 92),   y( 93),   y( 94),   y( 95),   y( 96)&
     &    / 413.0_wp, 405.0_wp, 355.0_wp, 306.0_wp, 271.0_wp, 306.0_wp/
     data    y( 97),   y( 98),   y( 99),   y(100),   y(101),   y(102)&
     &    / 315.0_wp, 301.0_wp, 356.0_wp, 348.0_wp, 355.0_wp, 422.0_wp/
     data    y(103),   y(104),   y(105),   y(106),   y(107),   y(108)&
     &    / 465.0_wp, 467.0_wp, 404.0_wp, 347.0_wp, 305.0_wp, 336.0_wp/
     data    y(109),   y(110),   y(111),   y(112),   y(113),   y(114)&
     &    / 340.0_wp, 318.0_wp, 362.0_wp, 348.0_wp, 363.0_wp, 435.0_wp/
     data    y(115),   y(116),   y(117),   y(118),   y(119),   y(120)&
     &    / 491.0_wp, 505.0_wp, 404.0_wp, 359.0_wp, 310.0_wp, 337.0_wp/
     data    y(121),   y(122),   y(123),   y(124),   y(125),   y(126)&
     &    / 360.0_wp, 342.0_wp, 406.0_wp, 396.0_wp, 420.0_wp, 472.0_wp/
     data    y(127),   y(128),   y(129),   y(130),   y(131),   y(132)&
     &    / 548.0_wp, 559.0_wp, 463.0_wp, 407.0_wp, 362.0_wp, 405.0_wp/
     data    y(133),   y(134),   y(135),   y(136),   y(137),   y(138)&
     &    / 417.0_wp, 391.0_wp, 419.0_wp, 461.0_wp, 472.0_wp, 535.0_wp/
     data    y(139),   y(140),   y(141),   y(142),   y(143),   y(144)&
     &    / 622.0_wp, 606.0_wp, 508.0_wp, 461.0_wp, 390.0_wp, 432.0_wp/
!
      call iprint(iprt)
!
!     COMMENCE BODY OF ROUTINE
!
!     TEST AGAINST PUBLISHED RESULTS
!
      ny = 144
      do 10 i = 1, ny
         ylog(i) = log(y(i))
   10 continue
!
      nfac = 2
      mspec(1,1) = 0
      mspec(2,1) = 1
      mspec(3,1) = 1
      mspec(4,1) = 1
!
      mspec(1,2) = 0
      mspec(2,2) = 1
      mspec(3,2) = 1
      mspec(4,2) = 12
!
      npar = 3
      par(1) = 0.0e0
      par(2) = 0.40e0
      par(3) = 0.60e0
!
      ifixed(1) = 1
      ifixed(2) = 0
      ifixed(3) = 0
!
      stopss = -1.0e0
      stopp = -1.0e0
      scale(1) = -1.0e0
      scale(2) = 1.0e-7
      scale(3) = 1.0e-7
      stp(1) = -1.0e0
      stp(2) = 1.0e-7
      stp(3) = 1.0e-7
      mit = 0
      nprt = -1
      delta = -1.0e0
      ivaprx = -1
!
      write(iprt, 1000)
     call aimec (ylog, ny, mspec, nfac,&
    &   par, npar, res,ldstak, ifixed,stp, mit, stopss, stopp,&
     &   scale, delta, ivaprx, nprt)
!
      write (iprt, 1005)
      par(1) = 0.0e0
      par(2) = 0.395e0
      par(3) = 0.615e0
     call aimfs (ylog, ny, mspec, nfac,&
     &   par, npar, ldstak, ny/10+1, 1, [ny], nprt, fcst, 50, fcstsd)
!
      scale(1) = 1.0e-7
      scale(2) = 1.0e-7
      scale(3) = 1.0e-7
!
      nfac = 2
      mspec(1,1) = 0
      mspec(2,1) = 1
      mspec(3,1) = 1
      mspec(4,1) = 1
!
      mspec(1,2) = 0
      mspec(2,2) = 0
      mspec(3,2) = 1
      mspec(4,2) = 12
!
      write (iprt, 1000)
     call aimec (ylog, ny, mspec, nfac,&
    &   par, npar, res,ldstak, ifixed,stp, mit, stopss, stopp,&
     &   scale, delta, ivaprx, nprt)
      ny = 20
      write (iprt, 1000)
     call aimec (ylog, ny, mspec, nfac,&
    &   par, npar, res,ldstak, ifixed,stp, mit, stopss, stopp,&
     &   scale, delta, ivaprx, nprt)
!
      nfac = 2
      mspec(1,1) = 0
      mspec(2,1) = 0
      mspec(3,1) = 1
      mspec(4,1) = 1
!
      mspec(1,2) = 0
      mspec(2,2) = 0
      mspec(3,2) = 1
      mspec(4,2) = 12
!
      ny = 144
      write (iprt, 1000)
     call aimec (ylog, ny, mspec, nfac,&
    &   par, npar, res,ldstak, ifixed,stp, mit, stopss, stopp,&
     &   scale, delta, ivaprx, nprt)
!
!     EXAMPLE FROM PAGE 212 OF BOX AND JENKINS (1970)
!     N.B. ADD PRINT STATEMENTS TO MDLTS2 TO CHECK COMPUTATIONS
!          AT FIRST CALL AGAINST THOSE LISTED ON PAGE 214.
!
      write(iprt, 1000)
      ny = 10
      yt(1) = 460.0e0
      yt(2) = 457.0e0
      yt(3) = 452.0e0
      yt(4) = 459.0e0
      yt(5) = 462.0e0
      yt(6) = 459.0e0
      yt(7) = 463.0e0
      yt(8) = 479.0e0
      yt(9) = 493.0e0
      yt(10) = 490.0e0
!
      nfac = 1
      mspec(1,1) = 0
      mspec(2,1) = 1
      mspec(3,1) = 1
      mspec(4,1) = 1
!
      npar = 2
      par(1) = 0.0e0
      par(2) = 0.5e0
!
      ifixed(1) = 1
      ifixed(2) = 0
!
     call aimec (yt, ny, mspec, nfac,&
    &   par, npar, res,ldstak, ifixed,stp, mit, stopss, stopp,&
     &   scale, delta, ivaprx, nprt)
!
!     EXAMPLE FROM PAGE 216 OF BOX AND JENKINS (1970)
!     N.B. ADD PRINT STATEMENTS TO MDLTS2 TO CHECK COMPUTATIONS
!          AT FIRST CALL AGAINST THOSE LISTED ON PAGE 218.
!
      write(iprt, 1000)
      ny = 12
      yt(1) = 2.0e0
      yt(2) = 0.8e0
      yt(3) = -0.3e0
      yt(4) = -0.3e0
      yt(5) = -1.9e0
      yt(6) = 0.3e0
      yt(7) = 3.2e0
      yt(8) = 1.6e0
      yt(9) = -0.7e0
      yt(10) = 3.0e0
      yt(11) = 4.3e0
      yt(12) = 1.1e0
!
      nfac = 1
      mspec(1,1) = 1
      mspec(2,1) = 0
      mspec(3,1) = 1
      mspec(4,1) = 1
!
      npar = 3
      par(1) = 0.3e0
      par(2) = 0.0e0
      par(3) = 0.7e0
!
      ifixed(1) = 0
      ifixed(2) = 1
      ifixed(3) = 0
!
     call aimec (yt, ny, mspec, nfac,&
    &   par, npar, res, ldstak, ifixed, stp, mit, stopss, stopp,&
     &   scale, delta, ivaprx, nprt)
!
!     TEST ERROR MESSAGES
!
      write (iprt, 1010)
      ny = 0
      nfac = 0
     call aime (yt, ny, mspec, nfac,&
     &   par, npar, res, ldstak)
     call aimec (yt, ny, mspec, nfac,&
    &   par, npar, res, ldstak, ifixed, stp, mit, stopss, stopp,&
     &   scale, delta, ivaprx, nprt)
     call aimes (yt, ny, mspec, nfac,&
    &   par, npar, res, ldstak, ifixed, stp, mit, stopss, stopp,&
    &   scale, delta, ivaprx, nprt, npare, rsd, pv, sdpv, sdres, vcv,&
     &   ivcv)
      call aimf (y, ny, mspec, nfac, par, npar, ldstak)
     call aimfs (y, ny, mspec, nfac,&
     &   par, npar, ldstak, ny/10+1, 1, [ny], nprt, fcst, 50, fcstsd)
!
      ny = 144
      nfac = 2
      mspec(1,1) = -1
     call aime (yt, ny, mspec, nfac,&
     &   par, npar, res, ldstak)
     call aimec (yt, ny, mspec, nfac,&
    &   par, npar, res, ldstak, ifixed, stp, mit, stopss, stopp,&
     &   scale, delta, ivaprx, nprt)
     call aimes (yt, ny, mspec, nfac,&
    &   par, npar, res, ldstak, ifixed, stp, mit, stopss, stopp,&
    &   scale, delta, ivaprx, nprt, npare, rsd, pv, sdpv, sdres, vcv,&
     &   ivcv)
      call aimf (y, ny, mspec, nfac, par, npar, ldstak)
     call aimfs (y, ny, mspec, nfac,&
     &   par, npar, ldstak, ny/10+1, 1, [ny], nprt, fcst, 50, fcstsd)
      ny = 144
      nfac = 2
      mspec(1,1) = 0
      npar = 1
     call aime (yt, ny, mspec, nfac,&
     &   par, npar, res, ldstak)
     call aimec (yt, ny, mspec, nfac,&
    &   par, npar, res, ldstak, ifixed, stp, mit, stopss, stopp,&
     &   scale, delta, ivaprx, nprt)
     call aimes (yt, ny, mspec, nfac,&
    &   par, npar, res, ldstak, ifixed, stp, mit, stopss, stopp,&
    &   scale, delta, ivaprx, nprt, npare, rsd, pv, sdpv, sdres, vcv,&
     &   ivcv)
      call aimf (y, ny, mspec, nfac, par, npar, ldstak)
     call aimfs (y, ny, mspec, nfac,&
     &   par, npar, ldstak, ny/10+1, 1, [ny], nprt, fcst, 50, fcstsd)
      ny = 144
      nfac = 2
      mspec(1,1) = 0
      npar = 3
      do 20 i = 1, npar
        ifixed(i) = 1
   20 continue
      ivcv = 0
      ifcst = 0
     call aimec (yt, ny, mspec, nfac,&
    &   par, npar, res, ldstak, ifixed, stp, mit, stopss, stopp,&
     &   scale, delta, ivaprx, nprt)
     call aimes (yt, ny, mspec, nfac,&
    &   par, npar, res, ldstak, ifixed, stp, mit, stopss, stopp,&
    &   scale, delta, ivaprx, nprt, npare, rsd, pv, sdpv, sdres, vcv,&
     &   ivcv)
     call aimfs (y, ny, mspec, nfac,&
     &   par, npar, ldstak, ny/10+1, 1, [ny], nprt, fcst, ifcst, fcstsd)
      do 30 i = 1, npar
        ifixed(i) = 1
   30 continue
      ivcv = 0
      stp(2) = -1.0e0
      scale(2) = -1.0e0
     call aimec (yt, ny, mspec, nfac,&
    &   par, npar, res, ldstak, ifixed, stp, mit, stopss, stopp,&
     &   scale, delta, ivaprx, nprt)
      return
!
!     FORMAT STATEMENTS
!
 1000 format ('1TEST OF ARIMA ESTIMATION ROUTINES')
 1005 format ('1TEST OF ARIMA FORECASTING ROUTINES')
 1010 format ('1TEST OF ERROR CHECKING FACILITIES')
      end
