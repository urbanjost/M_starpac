!LLER
     subroutine ller(nmsub, ixm, ivcv, n, npar, lpar, ldstak, wt, lnwt,&
     &   weight, nnzw, ifit, save)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS IS THE ERROR CHECKING ROUTINE FOR THE LINEAR LEAST
!     SQUARES LLSTING ROUTINES.
!
!     WRITTEN BY  -  JANET R. DONALDSON
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  DECEMBER 29, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   ifit,ivcv,ixm,ldstak,lnwt,lpar,n,nnzw,npar
     logical&
     &   save,weight
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   wt(*)
     character&
     &   nmsub(6)*1
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  LOCAL SCALARS
     integer&
     &   i,ldsmin,nzw
     logical&
     &   head
!
!  LOCAL ARRAYS
     logical&
     &   error(10)
     character&
    &   livcv(8)*1,lixm(8)*1,llds(8)*1,llpar(8)*1,ln(8)*1,&
    &   ln1(8)*1,lnc(8)*1,lndeg(8)*1,lndeg1(8)*1,lnpar(8)*1,&
     &   lone(8)*1,lwt(8)*1,lzero(8)*1
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL EISGE,EISII,ERVWT,LDSCMP
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     LOGICAL ERROR(10)
!        VALUE(S) INDICATING WHETHER AN ERROR WAS DETECTED (TRUE) OR NOT
!        (FALSE).
!     LOGICAL HEAD
!        A FLAG INDICATING WHETHER THE HEADING SHOULD BE PRINTED
!        (TRUE) OR NOT (FALSE).  IF A HEADING IS PRINTED, THE VALUE
!        OF HEAD WILL BE CHANGED TO FALSE.
!     INTEGER I
!        AN INDEX.
!     INTEGER IERR
!        THE INTEGER VALUE RETURNED BY THIS ROUTINE DESIGNATING
!        WHETHER ANY ERRORS WERE DETECTED IN THE PARAMETER LIST.
!        IF IERR .EQ. 0, NO ERRORS WERE DETECTED.
!        IF IERR .GE. 1, ERRORS WERE DETECTED.
!     INTEGER IFIT
!        THE INDICATOR VALUE DESIGNATING WHETHER THE LLS IS OF A
!        GENERAL MODEL (IFIT=3) OR A POLYNOMIAL MODEL (IFIT=1).
!     INTEGER IVCV
!        THE FIRST DIMENSION OF THE VARIANCE COVARIANCE MATRIX VCV.
!     INTEGER IXM
!        THE FIRST DIMENSION OF THE INDEPENDENT VARIABLE ARRAY.
!     INTEGER LDSTAK
!        THE LENGTH OF THE ARRAY DSTAK.
!     INTEGER LDSMIN
!        THE MINIMUM LENGTH ALLOWED FOR THE ARRAY DSTAK.
!     CHARACTER*1 LIVCV(8), LIXM(8), LLPAR(8), LLDS(8), LN(8), LNC(8),
!    *   LNDEG(8), LNDEG1(8), LNPAR(8), LN1(8), LONE(8), LWT(8),
!    *   LZERO(8)
!        THE ARRAY(S) CONTAINING THE NAME(S) OF INPUT PARAMETER(S)
!        CHECKED FOR ERRORS.
!     INTEGER LPAR
!        THE ACTUAL LENGTH OF THE VECTOR P.
!     INTEGER LNWT
!        THE ACTUAL LENGTH OF THE VECTOR WT.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NPAR
!        THE NUMBER OF UNKNOWN PARAMETERS IN THE MODEL.
!     CHARACTER*1 NMSUB(6)
!        THE NAME OF THE SUBROUTINE CALLING THE ERROR CHECKING
!        SUBROUTINES.
!     INTEGER NNZW
!        THE NUMBER OF NON ZERO WEIGHTS.
!     INTEGER NZW
!        THE NUMBER OF ZERO WEIGHTS.
!     LOGICAL SAVE
!        THE VARIABLE USED TO INDICATE WHETHER ANY RESULTS OTHER THAN
!        THE RESIDUALS ARE TO VE SAVED (TRUE) OR NOT (FALSE).
!     LOGICAL WEIGHT
!        THE VARIABLE USED TO INDICATE WHETHER WEIGHTED ANALYSIS IS TO
!        BE PERFORMED (TRUE) OR NOT (FALSE).
!     REAL WT(LNWT)
!        THE USER SUPPLIED WEIGHTS.
!
!     SET UP NAME ARRAYS
!
     data livcv(1), livcv(2), livcv(3), livcv(4), livcv(5), livcv(6),&
     &   livcv(7), livcv(8) /'I','V','C','V',' ',' ',' ',' '/
     data lixm(1), lixm(2), lixm(3), lixm(4), lixm(5), lixm(6),&
     &   lixm(7), lixm(8) /'I','X','M',' ',' ',' ',' ',' '/
     data llds(1), llds(2), llds(3), llds(4), llds(5), llds(6),&
     &   llds(7), llds(8) /'L','D','S','T','A','K',' ',' '/
     data llpar(1), llpar(2), llpar(3), llpar(4), llpar(5), llpar(6),&
     &   llpar(7), llpar(8) /'L','P','A','R',' ',' ',' ',' '/
     data ln(1), ln(2), ln(3), ln(4), ln(5), ln(6), ln(7), ln(8) /'N',&
     &   ' ',' ',' ',' ',' ',' ',' '/
     data lndeg(1), lndeg(2), lndeg(3), lndeg(4), lndeg(5), lndeg(6),&
     &   lndeg(7), lndeg(8) /'N','D','E','G',' ',' ',' ',' '/
     data lndeg1(1), lndeg1(2), lndeg1(3), lndeg1(4), lndeg1(5),&
    &   lndeg1(6), lndeg1(7), lndeg1(8) /'N','D','E','G','+','1',&
     &   ' ',' '/
     data lnpar(1), lnpar(2), lnpar(3), lnpar(4), lnpar(5),&
    &   lnpar(6), lnpar(7), lnpar(8) /'N','P','A','R',' ',' ',' ',&
     &   ' '/
     data ln1(1), ln1(2), ln1(3), ln1(4), ln1(5), ln1(6),&
     &   ln1(7), ln1(8) /'N','-','1',' ',' ',' ',' ',' '/
     data lone(1), lone(2), lone(3), lone(4), lone(5), lone(6),&
     &   lone(7), lone(8) /'O','N','E',' ',' ',' ',' ',' '/
     data lwt(1), lwt(2), lwt(3), lwt(4), lwt(5), lwt(6), lwt(7),&
     &   lwt(8) /'W','T',' ',' ',' ',' ',' ',' '/
     data lzero(1), lzero(2), lzero(3), lzero(4), lzero(5), lzero(6),&
     &   lzero(7), lzero(8) /'Z','E','R','O',' ',' ',' ',' '/
!
!     ERROR CHECKING
!
      ierr = 0
      head = .true.
!
      do 10 i=1,10
         error(i) = .false.
   10 continue
!
      if (ifit.eq.1) go to 30
!
      do 20 i = 1, 8
         lnc(i) = lnpar(i)
   20 continue
      go to 50
!
   30 continue
      do 40 i = 1, 8
         lnc(i) = lndeg1(i)
   40 continue
!
   50 continue
!
      call eisge(nmsub, ln, n, 1, 1, head, error(1), ln)
!
     if (ifit.eq.3)&
    &   call eisii(nmsub, lnpar, npar, 1, n, 1, head, error(2), lone,&
     &   ln)
     if (ifit.eq.1)&
    &   call eisii(nmsub, lndeg, npar-1, 0, n-1, 1, head, error(2),&
     &      lzero, ln1)
!
      call eisge(nmsub, lixm, ixm, n, 3, head, error(4), ln)
!
     if (save .and. (ifit.eq.1))&
     &   call eisge(nmsub, llpar, lpar, npar, 7, head, error(5), lndeg1)
!
     if (save)&
     &    call eisge(nmsub, livcv, ivcv, npar, 3, head, error(6), lnc)
!
      if (error(1) .or. error(2) .or. error(3)) go to 70
!
      nnzw = n
     if (weight) call ervwt(nmsub, lwt, wt, n, npar, head, nnzw,&
     &   nzw, 2, error(8), lnc)
!
     call ldscmp(15, 0, 0, 0, 0, 0, 'S',&
     &            6*n + npar*(n+2*npar+5) + 1, ldsmin)
!
      call eisge(nmsub, llds, ldstak, ldsmin, 9, head, error(9), llds)
!
      do 60 i=1,10
         if (error(i)) go to 70
   60 continue
      return
!
   70 continue
      ierr = 1
      return
!
      end
