!STATER
      subroutine stater(nmsub, wt, n, ldstak, wts, nnzw, stack, ierr)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS SUBROUTINE CHECKS INPUT PARAMETERS TO THE USER
!     CALLABLE MEMBERS OF THE STAT FAMILY OF ROUTINES
!     FOR ERRORS AND REPORTS ANY THAT IT FINDS, BESIDES
!     RETURNING A FLAG INDICATING THAT ERRORS HAVE BEEN
!     FOUND.
!
!     WRITTEN BY - JOHN E. KOONTZ
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS
!
!     CREATION DATE  -  MAY 17, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     integer&
     &   ierr,ldstak,n,nnzw
     logical&
     &   stack,wts
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   wt(*)
     character&
     &   nmsub(6)*1
!
!  LOCAL SCALARS
     integer&
     &   ldsmin,nzw
     logical&
     &   head,ier1,ier2,ier3
!
!  LOCAL ARRAYS
     character&
     &   llds(8)*1,ln(8)*1,lthree(8)*1,lwt(8)*1
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL EISGE,ERVWT,LDSCMP
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     LOGICAL HEAD
!        A FLAG INDICATING WHETHER THE HEADING SHOULD BE PRINTED
!        (TRUE) OR NOT (FALSE).  IF A HEADING IS PRINTED, THE VALUE
!        OF HEAD WILL BE CHANGED TO FALSE.
!     INTEGER IERR
!        OUTPUT PARAMETER.  A FLAG INDICATING WHETHER OR
!        NOT AN ERROR HAS BEEN FOUND.  0 = OK, 1 = ERROR.
!     LOGICAL IER1
!        TRUE IF N .LT. 3
!     LOGICAL IER2
!        TRUE IF LDSTAK .LT. (N + 13)/2.0E0
!     LOGICAL IER3
!        TRUE IF SOME WT .LT. 0.0E0 OR NNZW .LT. 3
!     INTEGER LDSMIN
!        MINIMUM LENGTH OF FRAMEWORK AREA IN DOUBLE
!        PRECISION ELEMENTS.
!     INTEGER LDSTAK
!        INPUT PARAMETER.  THE NUMBER OF LOCATIONS PROVIDED IN
!        THE FRAMEWORK AREA.
!     CHARACTER*1 LLDS(8), LN(8), LTHREE(8), LWT(8)
!        THE ARRAY(S) CONTAINING THE NAME(S) FO THE VARIALBE(S) CHECKED
!        FOR ERRORS
!     INTEGER N
!        INPUT PARAMETER.  THE NUMBER OF ELEMENTS IN Y AND WT.
!     CHARACTER*1 NMSUB(6)
!        THE NAME OF THE CALLING SUBROUTINE
!     INTEGER NNZW
!        OUTPUT PARAMETER.  IF WTS, THEN SET EQUAL TO THE
!        NUMBER OF VALUES IN WT WHICH ARE POSITIVE.  ELSE,
!        UNDEFINED.
!     INTEGER NZW
!        THE NUMBER OF ZERO WEIGHTS.
!     LOGICAL STACK
!        A FLAG INDICATING WHETHER THIS ROUTINE USES THE STACK (TRUE)
!        OR NOT (FALSE).
!     REAL(KIND=WP) :: WT(N)
!        INPUT PARAMETER.  THE VECTOR OF WEIGHTS CORRESPONDING
!        TO THE VECTOR Y.
!     LOGICAL WTS
!        INPUT PARAMETER.  A FLAG INDICATING WHETHER OR NOT
!        THERE IS REALLY A VECTOR WT (TRUE), OR ONLY A DUMMY PARAMETER
!        (FALSE).
!
!     INITIALIZE NAME VECTORS
!
     data llds(1), llds(2), llds(3), llds(4), llds(5), llds(6),&
     &  llds(7), llds(8) / 'L', 'D', 'S', 'T', 'A', 'K', ' ', ' '/
     data     ln(1),    ln(2),    ln(3),    ln(4),    ln(5),    ln(6),&
     &  ln(7), ln(8)  / 'N', ' ', ' ', ' ', ' ', ' ', ' ', ' '/
     data lthree(1),lthree(2),lthree(3),lthree(4),lthree(5),lthree(6),&
     &  lthree(7), lthree(8) / 'T', 'H', 'R', 'E', 'E', ' ', ' ', ' '/
     data    lwt(1),   lwt(2),   lwt(3),   lwt(4),   lwt(5),   lwt(6),&
     &  lwt(7), lwt(8) / 'W', 'T', ' ', ' ', ' ', ' ', ' ', ' '/
!
!     INITIALIZE ERROR FLAGS
!
      ier1 = .false.
      ier2 = .false.
      ier3 = .false.
!
      ierr = 0
!
      head = .true.
!
!     CHECK TO SEE THAT THERE ARE AT LEAST THREE DATA POINTS.
!
      call eisge(nmsub, ln, n, 3, 2, head, ier1, lthree)
!
!     CHECK TO SEE THAT AN AMOUNT OF WORK AREA EQUAL
!     IN LENGTH TO THE REQUIREMENTS OF THE PERMUTATION
!     VECTOR WILL BE AVAILABLE.
!
      if (stack) then
         call ldscmp(1, 0, n, 0, 0, 0, 'S', 0, ldsmin)
         call eisge(nmsub, llds, ldstak, ldsmin, 9, head, ier2, llds)
      end if
!
!     IF THERE ARE WEIGHTS
!     CHECK TO SEE THAT AT LEAST THREE DATA ITEMS HAVE NONZERO WEIGHTS.
!
      nnzw = n
      if (wts) then
        call ervwt(nmsub, lwt, wt, n, 3, head, nnzw, nzw, 1, ier3,&
     &              lthree)
      end if
!
!     SEE IF ANY ERRORS WERE FOUND.
!
      if (ier1 .or. ier2 .or. ier3) ierr = 1
      return
      end
