!STPSEL
      SUBROUTINE STPSEL(XM, N, M, IXM, MDL, PAR, NPAR,
     &   NEXMPT, STP, NFAIL, IFAIL, J, ETA3, RELTOL, ABSTOL, TAUABS,
     &   STPLOW, STPMID, STPUP, ITEMP, FD, FDLAST, FDSAVE, PV, PVNEW)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS SUBROUTINE SELECTS NEW STEP SIZES UNITL EITHER
!     THE NUMBER OF OBSERVATIONS AT WHICH THE SELECTION CRITERIA
!     IS NOT MET DOES NOT EXCEED NEXMPT OR UNTIL NO FURTHER
!     IMPROVEMENT CAN BE MADE.
!
!     WRITTEN BY  -  ROBERT B. SCHNABEL (CODED BY JANET R. DONALDSON)
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  APRIL 2, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
      REAL(KIND=WP) ::
     &   ABSTOL,ETA3,RELTOL,STP,STPLOW,STPMID,STPUP,TAUABS
      INTEGER
     &   IXM,J,M,N,NEXMPT,NFAIL,NPAR
!
!  ARRAY ARGUMENTS
      REAL(KIND=WP) ::
     &   FD(N),FDLAST(N),FDSAVE(N),PAR(NPAR),PV(N),PVNEW(N),XM(IXM,M)
      INTEGER
     &   IFAIL(N),ITEMP(N)
!
!  SUBROUTINE ARGUMENTS
       EXTERNAL MDL
!
!  SCALARS IN COMMON
      REAL(KIND=WP) ::
     &   Q
!
!  LOCAL SCALARS
      REAL(KIND=WP) ::
     &   FACTOR,STP1,STP2,STPNEW,TEMP
      INTEGER
     &   NCOUNT
      LOGICAL
     &   FAIL,FIRST,FORWRD,HICURV,SUCCES
!
!  EXTERNAL SUBROUTINES
!       EXTERNAL ABSCOM,CMPFD,ICOPY,RELCOM,STPADJ
!
!  INTRINSIC FUNCTIONS
      INTRINSIC ABS
!
!  COMMON BLOCKS
      COMMON /NOTOPT/Q
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL ABSTOL
!        THE ABSOLUTE AGREEMENT TOLERANCE.
!     REAL ETA3
!        THE CUBE ROOT OF THE RELATIVE NOISE IN THE MODEL
!     REAL FACTOR
!        A FACTOR USED IN COMPUTING THE STEP SIZE.
!     LOGICAL FAIL
!        THE VARIABLE USED TO INDICATE WHETHER A STEP SIZE
!        CANNOT BE SELECTED WHICH WILL SUCCESSFULLY MEET THE CRITERIA.
!     REAL FD(N)
!        THE FORWARD DIFFERENCE QUOTIENT APPROXIMATION TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER
!     REAL FDLAST(N)
!        THE FORWARD DIFFERENCE QUOTIENT APPROXIMATION TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER
!        COMPUTED WITH THE MOST RECENT STEP SIZE SELECTED.
!     REAL FDSAVE(N)
!        A VECTOR USED TO SAVE THE BEST OF THE
!        THE FORWARD DIFFERENCE QUOTIENT APPROXIMATIONS TO THE
!        DERIVATIVE OF THE MODEL WITH RESPECT TO THE JTH PARAMETER
!     LOGICAL FIRST
!        THE VARIABLE USED TO INDICATE WHETHER THIS STEP SIZE
!        IS BEING USED FOR THE FIRST TIME OR WHETHER IT HAS BEEN
!        PREVIOUSLY ADJUSTED.
!     LOGICAL FORWRD
!        THE VARIABLE USED TO INDICATE THE DIRECTION OF CHANGE IN
!        THE STEP SIZE.
!     LOGICAL HICURV
!        THE VARIABLE USED TO INDICATE WHETHER THE MODEL HAS
!        HIGH CURVATURE.
!     INTEGER IFAIL(N)
!        AN INDICATOR VECTOR USED TO DESIGNATE THOSE OBSERVATIONS
!        FOR WHICH THE STEP SIZE DOES NOT MEET THE CRITERIA.
!     INTEGER ITEMP(N)
!        A TEMPORARY VECTOR USED FOR STORING PAST VALUES OF ITEMP.
!     INTEGER IXM
!        THE FIRST DIMENSION OF THE INDEPENDENT VARIABLE ARRAY.
!     INTEGER J
!        THE INDEX OF THE PARAMETER BEING EXAMINED.
!     INTEGER M
!        THE NUMBER OF INDEPENDENT VARIABLES.
!     EXTERNAL MDL
!        THE NAME OF THE USER SUPPLIED SUBROUTINE WHICH COMPUTES THE
!        PREDICTED VALUES BASED ON THE CURRENT PARAMETER ESTIMATES.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NPAR
!        THE NUMBER OF UNKNOWN PARAMETERS IN THE MODEL.
!     INTEGER NCOUNT
!        THE NUMBER OF OBSERVATIONS AT WHICH THE NEW STEP SIZE DOES
!        SATISFY THE CRITERIA.
!     INTEGER NEXMPT
!        THE NUMBER OF OBSERVATIONS FOR WHICH A GIVEN STEP SIZE
!        DOES NOT HAVE TO BE SATISFACTORY AND THE SELECTED STEP
!        SIZE STILL BE CONSIDERED OK.
!     INTEGER NFAIL
!        A VECTOR CONTAINING FOR EACH OBSERVATION THE NUMBER OF
!        OBSERVATIONS FOR WHICH THE STEP SIZE DID NOT MEET THE CRITERIA.
!     REAL PAR(NPAR)
!        THE ARRAY IN WHICH THE CURRENT ESTIMATES OF THE UNKNOWN
!        PARAMETERS ARE STORED.
!     REAL PV(N)
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!     REAL PVNEW(N)
!        THE PREDICTED VALUE BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J)+STPCD.
!     REAL Q
!        A DUMMY VARIABLE WHICH IS USED, ALONG WITH COMMON NOTOPT (NO
!        OPTIMIZATION), TO COMPUTE THE STEP SIZE.
!     REAL STP
!        THE STEP SIZE CURRENTLY BEING EXAMINED FOR THE FORWARD
!        DIFFERENCE APPROXIMATION TO THE DERIVATIVE.
!     REAL STPLOW
!        THE LOWER LIMIT ON THE STEP SIZE.
!     REAL STPMID
!        THE MIDPOINT OF THE ACCEPTABLE RANGE OF THE STEP SIZE.
!     REAL STPNEW
!        THE VALUE OF THE NEW STEP SIZE BEING TESTED.
!     REAL STPUP
!        THE UPPER LIMIT ON THE STEP SIZE.
!     REAL STP1, STP2
!        TEMPORARY STORAGE LOCATIONS FOR STEP SIZES.
!     LOGICAL SUCCES
!        THE VARIABLE USED TO INDICATE WHETHER THE STEP SIZE
!        SUCCESSFULLY MEETS THE CRITERIA USED TO SELECT THE STEP
!        SIZES.
!     REAL RELTOL
!        THE RELATIVE AGREEMENT TOLERANCE.
!     REAL TAUABS
!        THE ABSOLUTE AGREEMENT TOLERANCE.
!     REAL TEMP
!        A TEMPORARY LOCATION IN WHICH THE CURRENT ESTIMATE OF THE JTH
!        PARAMETER IS STORED.
!     REAL XM(IXM,M)
!        THE ARRAY IN WHICH ONE ROW OF THE INDEPENDENT VARIABLE ARRAY
!        IS STORED.
!
      CALL SCOPY(N, FD, 1, FDSAVE, 1)
!
      FACTOR = 10.0E0
      IF (ABS(STP) .GT. STPMID) FACTOR = 0.1E0
!
      STPNEW = STP * FACTOR
      STP1 = STPNEW
      STP2 = STPNEW
!
      Q = STPNEW + PAR(J)
      STPNEW = Q - PAR(J)
!
      FIRST = .TRUE.
      FORWRD = .TRUE.
      SUCCES = .FALSE.
      FAIL = .FALSE.
!
      NFAIL = N + 1
!
!     REPEAT FOLLOWING UNTIL (SUCCES) OR (FAIL)
!
   10 CONTINUE
!
      CALL SCOPY(N, FD, 1, FDLAST, 1)
!
      TEMP = PAR(J)
      PAR(J) = TEMP + STPNEW
!
      CALL MDL(PAR, NPAR, XM, N, M, IXM, PVNEW)
!
      PAR(J) = TEMP
!
      CALL CMPFD(N, STPNEW, PVNEW, PV, FD)
!
      CALL RELCOM(N, FD, FDLAST, RELTOL, ABSTOL, NCOUNT, ITEMP)
!
      IF (NCOUNT.LE.NEXMPT) THEN
            SUCCES = .TRUE.
            NFAIL = NCOUNT
            CALL ICOPY(N, ITEMP, 1, IFAIL, 1)
            IF (ABS(ABS(STPNEW) - STPMID) .GT.
     &         ABS(ABS(STPNEW/FACTOR) - STPMID)) THEN
                  STP = STPNEW / FACTOR
            ELSE
                  STP = STPNEW
            END IF
      ELSE
            IF (NCOUNT.LT.NFAIL) THEN
                  NFAIL = NCOUNT
                  STP1 = STPNEW
                  STP2 = STPNEW / FACTOR
                  CALL ICOPY(N, ITEMP, 1, IFAIL, 1)
            END IF
            IF (FIRST) THEN
                  FIRST = .FALSE.
                  CALL ABSCOM(N, FD, FDLAST, TAUABS, NCOUNT)
                  IF (NCOUNT.LE.NEXMPT) THEN
                         HICURV = .TRUE.
                  ELSE
                         HICURV = .FALSE.
                  END IF
            END IF
            STPNEW = STPNEW * FACTOR
            Q = STPNEW + PAR(J)
            STPNEW = Q - PAR(J)
            IF ((FACTOR.GT.1.0E0 .AND. ABS(STPNEW).GT.STPUP) .OR.
     &          (FACTOR.LT.1.0E0 .AND. ABS(STPNEW).LT.STPLOW)) THEN
                  IF (FORWRD) THEN
                        FORWRD = .FALSE.
                        FACTOR = 1.0E0 / FACTOR
                        STPNEW = STP * FACTOR
                        Q = STPNEW + PAR(J)
                        STPNEW = Q - PAR(J)
                        CALL SCOPY(N, FDSAVE, 1, FD, 1)
                        STPLOW = STPLOW * (ETA3)
                        STPUP = STPUP / (ETA3)
                  ELSE
                        FAIL = .TRUE.
                  END IF
            END IF
      END IF
!
      IF (.NOT.(SUCCES.OR.FAIL)) GO TO 10
!
      IF (SUCCES .AND. FORWRD) THEN
            CALL STPADJ(XM, N, M, IXM, MDL, PAR, NPAR,
     &         NEXMPT, STP, NFAIL, IFAIL, J, RELTOL, ABSTOL, STPLOW,
     &         STPMID, STPUP, ITEMP, FD, FDLAST, PV, PVNEW)
            RETURN
      ELSE
            IF (SUCCES) THEN
                  RETURN
            ELSE
!                 IF (HICURV) NFAIL = -NFAIL
!
                  IF (ABS(STP1).LT.ABS(STP2)) THEN
                        STP = STP1
                        RETURN
                  ELSE
                        STP = STP2
                        RETURN
                  END IF
            END IF
      END IF
!
      END
