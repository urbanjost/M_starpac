!STAT2W
     subroutine stat2w(y, wt, n, nnzw, sts, sumda, sumdi, sumwd2,&
     &   sumd2, sumd3, sumd4, sumw)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     THIS SUBROUTINE COMPUTES FOR A VECTOR Y THE STATISTICS THAT DO
!     NOT REQUIRE SORTING OF THE VECTOR, THAT IS, THOSE NOT COMPUTED
!     BY STAT1W.  WEIGHTS ARE USED IN THE CALCULATIONS.
!
!     THIS SUBROUTINE IS BASED ON A MODIFICATION OF THE STATIS
!     CODE USED IN OMNITAB, VERSION 5 (6/16/72), WRITTEN BY
!     SALLY PEAVY.  THE ORIGINAL ADAPTATION TO STARPAC WAS
!     DONE BY JANET DONALDSON.
!
!     WRITTEN BY - JOHN E. KOONTZ
!                  STATISTICAL ENGINEERING DIVISION
!                  NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  MAY 17, 1982
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   sumd2,sumd3,sumd4,sumda,sumdi,sumw,sumwd2
     integer&
     &   n,nnzw
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   sts(53),wt(n),y(n)
!
!  SCALARS IN COMMON
     integer&
     &   ierr
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   dif,t,ta,tk1,tk2
     integer&
     &   i,ic,ici,icount,idruns,iminus,iplus,irun,j
!
!  EXTERNAL FUNCTIONS
     real(kind=wp) ::&
     &   cdff,ppfchs,ppft
!       EXTERNAL CDFF,PPFCHS,PPFT
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,sqrt
!
!  COMMON BLOCKS
      common /errchk/ierr
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL DIF
!        THE SUM OF THE DIFFERENCES BETWEEN SUCCEEDING ELEMENTS
!        IN Y.
!     INTEGER I
!        A LOOP INDEX.
!     INTEGER IC
!        PREVIOUS SIGN IN RUNS CALCULATION.
!     INTEGER ICI
!        CURRENT SIGN IN RUNS CALCULATION.
!     INTEGER ICOUNT
!        USED IN RUNS CALCULATIONS.
!     INTEGER IDRUNS
!        THE NUMBER OF RUNS.
!     INTEGER IERR
!        AN ERROR FLAG SET IN COMMON ERRCHK.
!     INTEGER IMINUS, IPLUS
!        COUNTS OF SIGNS OF DEVIATIONS.
!     INTEGER IRUN
!        THE NUMBER OF RUNS UP AND DOWN.
!     INTEGER J
!        A LOOP INDEX.
!     INTEGER N
!        INPUT PARAMETER.  THE LENGTH OF Y AND WT.
!     INTEGER NNZW
!        INPUT PARAMETER.  THE NUMBER OF POSITIVE ELEMENTS IN WT.
!     REAL STS(53)
!        OUTPUT PARAMETER.  THE VECTOR OF 53 STATISTICS COMPUTED.
!     ROW STATISTIC                    ROW STATISTIC
!         1  LENGTH OF VECTOR             TESTS FOR NONRANDOMNESS
!         2  NUMBER OF NONZERO WEIGHTS    23  NUMBER OF RUNS UP AND DOWN
!        MEASURES OF LOCATION             24  EXPECTED NUMBER OF RUNS
!         3  UNWEIGHTED MEAN              25  S.D. OF NUMBER OF RUNS
!         4  WEIGHTED MEAN                26  MEAN SQR. SUCCESSIVE DIFF.
!         5  MEDIAN                       27  MEAN SQR. SUCC. DIFF./VAR.
!         6  MID-RANGE                    DEVIATIONS FROM WTD MEAN
!         7  25 P.C. UNWTD. TRIMMED MEAN  28  NUMBER OF + SIGNS
!         8  25 P.C. WTD. TRIMMED MEAN    29  NUMBER OF - SIGNS
!        MEASURES OF DISPERSION           30  NUMBER OF RUNS
!         9  STANDARD DEVIATION (S.D.)    31  EXPECTED NUMBER OF RUNS
!        10  S.D. OF MEAN                 32  S.D. OF RUNS
!        11  RANGE                        33  DIFF./S.D. OF RUNS
!        12  MEAN VARIATION               OTHER STATISTICS
!        13  VARIANCE (VAR.)              34  MINIMUM
!        14  COEFFICIENT OF VARIATION     35  MAXIMUM
!        CONFIDENCE INTERVALS             36  BETA 1
!        15  LOWER CONFIDENCE LIMIT, MEAN 37  BETA 2
!        16  UPPER CONFIDENCE LIMIT, MEAN 38  WTD. SUM OF VALUES
!        17  LOWER CONFIDENCE LIMIT, S.D. 39  WTD. SUM OF SQUARES
!        18  UPPER CONFIDENCE LIMIT, S.D. 40  WTD. SUM OF SQRD. DEVS.
!        LINEAR TREND STATISTICS          41  STUDENTS T
!        19  SLOPE                        42  WTD. SUM OF ABS. VALUES
!        20  S.D. OF SLOPE                43  WTD. AVG. ABS. VALUES
!        21  SLOPE/S.D. OF SLOPE = T      44-53 FREQ. DISTRIBUTION
!        22  PROB ( X .GT. ABS(OBS. T))
!     REAL SUMDA
!        INPUT PARAMETER.  THE SUM OF THE ABSOLUTE VALUES OF THE
!        DIFFERENCES DIFF.
!     REAL SUMDI
!        INPUT PARAMETER.  THE SUM OF THE PRODUCTS OF I AND THE
!        ITH DIFFERENCE DIFF.
!     REAL SUMD2
!        INPUT PARAMETER.  THE SUM OF THE SQUARES OF THE
!        DIFFERENCES DIFF.
!     REAL SUMD3
!        INPUT PARAMETER.  THE SUM OF THE CUBES OF THE
!        DIFFERENCES DIFF.
!     REAL SUMD4
!        INPUT PARAMETER.  THE SUM OF THE HYPERCUBES OF THE
!        DIFFERENCES DIFF.
!     REAL SUMW
!        INPUT PARAMETER.  THE SUM OF THE WEIGHTS VECTOR WT.
!     REAL SUMWD2
!        INPUT PARAMETER.  THE WEIGHTED SUM OF THE SQUARED
!        DIFFERENCES DIFF.
!     REAL T
!        A RESIDUAL (Y(I) - MEANY)
!     REAL TA
!        A TEMPORARY VARIABLE IN THE RUNS CALCULATION.
!     REAL TK1, TK2
!        CHI-SQUARED VALUES.
!     REAL WT(N)
!        INPUT PARAMETER.  THE VECTOR OF WEIGHTS FOR THE
!        Y OBSERVATIONS.
!     REAL Y(N)
!        INPUT PARAMETER.  A SET OF N DATA POINTS, SORTED
!        INTO ASCENDING ORDER.
!
!
!     BEGIN STORAGE OF STATISTICS.
!
      sts(1) = n
      sts(2) = nnzw
      sts(24) = (2.0e0*sts(2)-1.0e0)/3.0e0
      sts(25) = sqrt((16.0e0*sts(2)-29.0e0)/90.0e0)
      sts(43) = sts(42)/sumw
!
!     COMPUTE RESIDUALS AND STANDARD DEVIATIONS.
!
      ici = 0
      iplus = 0
      iminus = 0
      idruns = 0
      ic = 0
      do 30 i=1,n
         if (wt(i).le.0.0e0) go to 30
         t = y(i) - sts(4)
         if (t.lt.0.0e0) go to 10
         iplus = iplus + 1
         ici = 1
         go to 20
   10    iminus = iminus + 1
         ici = -1
   20    if (ic.eq.ici) go to 30
         ic = ici
         idruns = idruns + 1
   30 continue
      sts(28) = iplus
      sts(29) = iminus
      sts(31) = 1.0e0 + (2.0e0*sts(28)*sts(29)/sts(2))
     sts(32) =&
    &   sqrt((2.0e0*sts(28)*sts(29)*(2.0e0*sts(28)*sts(29)-&
    &                                     sts(28)-sts(29)))/&
     &        ((sts(28)+sts(29))**2*(sts(2)-1.0e0)))
      sts(30) = idruns
      sts(33) = 0.0e0
     if (sts(32).ne.0.0e0)&
     &   sts(33) = (sts(30)-sts(31))/sts(32)
      sts(13) = sumwd2/(sts(2)-1.0e0)
      sts(9) = sqrt(sts(13))
      sts(10) = sts(9)/(sqrt(sumw))
     if (sts(4).ne.0.0e0)&
     &   sts(14) = 100.0e0*abs(sts(9)/sts(4))
      if (sts(4).eq.0.0e0) sts(14) = 0.0e0
      sts(36) = 0.0e0
     if (sumd2.ne.0.0e0)&
     &   sts(36) = (sumd3/sts(2))**2/((sumd2/sts(2))**3)
      sts(37) = 0.0e0
     if (sumd2.ne.0.0e0)&
     &   sts(37) = (sumd4/sts(2))/((sumd2/sts(2))**2)
      sts(40) = sumwd2
      sts(19) = (12.0e0*sumdi)/(sts(2)*(sts(2)**2-1.0e0))
     sts(20) = (1.0e0/(sts(2)-2.0e0)*&
    &             (12.0e0*(sumd2/(sts(2)*(sts(2)**2-1.0e0)))-&
     &              sts(19)**2))
      if (sts(20).le.0.0e0) sts(20) = 0.0e0
      sts(20) = sqrt(sts(20))
      if (sts(20).eq.0.0e0) sts(21) = 0.0e0
      if (sts(20).gt.0.0e0) sts(21) = sts(19)/sts(20)
!
      sts(22) = 1.0e0 - cdff(sts(21)*sts(21), 1.0e0, sts(2)-2.0e0)
!
!     COMPUTE NUMBER OF RUNS IN THE DATA.
!
      dif = 0.0e0
      irun = 1
      ta = 0.0e0
      do 50 i=1,n
         if (i.ge.n) go to 60
         if (wt(i).le.0.0e0) go to 50
         j = i
   40    j = j + 1
         if (j.ge.n) go to 60
         if (wt(j).le.0.0e0) go to 40
         ta = y(j) - y(i)
         if (ta.ne.0.0e0) go to 60
   50 continue
   60 icount = 0
      do 80 i=1,n
         if (wt(i).le.0.0e0) go to 80
         icount = icount + 1
         if (icount.ge.nnzw) go to 80
         j = i
   70    j = j + 1
         if (wt(j).le.0.0e0) go to 70
         t = y(j) - y(i)
         dif = dif + t*t
         if (ta*t.ge.0.0e0) go to 80
         ta = t
         irun = irun + 1
   80 continue
      sts(23) = irun
      sts(26) = dif/(sts(2)-1.0e0)
      sts(27) = 0.0e0
     if (sts(13).ne.0.0e0)&
     &   sts(27) = sts(26)/sts(13)
      sts(41) = 0.0e0
     if (sts(9).ne.0.0e0)&
     &   sts(41) = (sts(4)*sqrt(sumw))/sts(9)
      sts(12) = sumda/sts(2)
      t = ppft(0.975e0, nnzw-1)
      tk1 = ppfchs(0.975e0, nnzw-1)
      tk2 = ppfchs(0.025e0, nnzw-1)
      sts(15) = sts(4) - t*sts(10)
      sts(16) = sts(4) + t*sts(10)
      sts(17) = sqrt((sts(2)-1.0e0)/tk1)*sts(9)
      sts(18) = sqrt((sts(2)-1.0e0)/tk2)*sts(9)
      return
      end
