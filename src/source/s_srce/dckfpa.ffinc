!DCKFPA
     subroutine dckfpa(j, d, par, npar, eta, tau, mdl, xm, n,&
    &   nrow, m, ixm, pv, pvtemp, msg, lmsg, fd, parmx, stp, pvpstp,&
     &   curve)
!
!     LATEST REVISION  -  03/15/90  (JRD)
!
!     CHECK WHETHER FINITE PRECISION ARITHMETIC COULD POSSIBLY BE THE
!     PROBLEM
!
!     WRITTEN BY  -  ROBERT B. SCHNABEL (CODED BY JANET R. DONALDSON)
!                    STATISTICAL ENGINEERING DIVISION
!                    NATIONAL BUREAU OF STANDARDS, BOULDER, COLORADO
!
!     CREATION DATE  -  APRIL 2, 1981
!
!
!  VARIABLE DECLARATIONS
!
!  SCALAR ARGUMENTS
     real(kind=wp) ::&
     &   curve,d,eta,fd,parmx,pv,pvpstp,stp,tau
     integer&
     &   ixm,j,lmsg,m,n,npar,nrow
!
!  ARRAY ARGUMENTS
     real(kind=wp) ::&
     &   par(npar),pvtemp(n),xm(ixm,m)
     integer&
     &   msg(lmsg)
!
!  SUBROUTINE ARGUMENTS
       external mdl
!
!  LOCAL SCALARS
     real(kind=wp) ::&
     &   temp
     logical&
     &   large
!
!  INTRINSIC FUNCTIONS
      intrinsic abs,sign
!
!     VARIABLE DEFINITIONS (ALPHABETICALLY)
!
!     REAL(KIND=WP) :: CURVE
!        A MEASURE OF THE CURVATURE IN THE MODEL.
!     REAL(KIND=WP) :: D
!        THE SCALAR IN WHICH ROW   NROW   OF THE DERIVATIVE
!        MATRIX WITH RESPECT TO THE JTH UNKNOWN PARAMETER
!        IS STORED.
!     REAL(KIND=WP) :: ETA
!        THE RELATIVE NOISE IN THE MODEL
!     REAL(KIND=WP) :: FD
!        THE FORWARD DIFFERENCE QUOTIENT DERIVATIVE WITH RESPECT TO THE
!        JTH PARAMETER
!     INTEGER IXM
!        THE FIRST DIMENSION OF THE INDEPENDENT VARIABLE ARRAY.
!     INTEGER J
!        THE INDEX OF THE PARTIAL DERIVATIVE BEING EXAMINED.
!     LOGICAL LARGE
!        AN INDICATOR VALUE INDICATING WHETHER THE RECOMMENDED
!        INCREASE IN THE STEP SIZE WOULD BE GREATER THAN PARMX.
!     INTEGER LMSG
!        THE LENGTH OF THE VECTOR MSG.
!     INTEGER M
!        THE NUMBER OF INDEPENDENT VARIABLES.
!     EXTERNAL MDL
!        THE NAME OF THE USER SUPPLIED SUBROUTINE WHICH COMPUTES THE
!        PREDICTED VALUES BASED ON THE CURRENT PARAMETER ESTIMATES.
!     INTEGER MSG(LMSG)
!        AN ARRAY USED TO STORE MESSAGE PARAMETERS.
!     INTEGER N
!        THE NUMBER OF OBSERVATIONS.
!     INTEGER NPAR
!        THE NUMBER OF UNKNOWN PARAMETERS IN THE MODEL.
!     INTEGER NROW
!        THE NUMBER OF THE ROW OF THE INDEPENDENT VARIABLE ARRAY AT
!        WHICH THE DERIVATIVE IS TO BE CHECKED.
!     REAL(KIND=WP) :: PAR(NPAR)
!        THE ARRAY IN WHICH THE CURRENT ESTIMATES OF THE UNKNOWN
!        PARAMETERS ARE STORED.
!     REAL(KIND=WP) :: PARMX
!        THE MAXIMUM OF THE CURRENT PARAMETER ESTIMATE AND THE
!        TYPICAL VALUE OF THAT PARAMETER
!     REAL(KIND=WP) :: PV
!        THE SCALAR IN WHICH THE PREDICTED VALUE FROM THE MODEL FOR
!        ROW   NROW   IS STORED.
!     REAL(KIND=WP) :: PVPSTP
!        THE PREDICTED VALUE FOR ROW    NROW   OF THE MODEL
!        BASED ON THE CURRENT PARAMETER ESTIMATES
!        FOR ALL BUT THE JTH PARAMETER VALUE, WHICH IS PAR(J) + STP.
!     REAL(KIND=WP) :: PVTEMP(N)
!        THE VECTOR OF PREDICTED VALUES FROM THE MODEL.
!     REAL(KIND=WP) :: STP
!        THE STEP SIZE CURRENTLY BEING EXAMINED FOR THE FINITE DIFFERENC
!        DERIVATIVE
!     REAL(KIND=WP) :: TAU
!        THE AGREEMENT TOLERANCE.
!     REAL(KIND=WP) :: TEMP
!        A TEMPORARY LOCATION IN WHICH THE CURRENT ESTIMATE OF THE JTH
!        PARAMETER IS STORED.
!     REAL(KIND=WP) :: XM(IXM,M)
!        THE ARRAY IN WHICH ONE ROW OF THE INDEPENDENT VARIABLE ARRAY
!        IS STORED.
!
!     CHECK WHETHER FINITE PRECISION COULD BE THE PROBLEM
!
     if (abs(stp*(fd-d)) .ge.&
     &   10.0e0*eta*(abs(pv)+abs(pvpstp))) then
!
!     DISCREPANCY BETWEEN NUMERICAL AND ANALYTICAL DERIVATIVES CANNOT
!     BE ACCOUNTED FOR BY FINITE PRECISION ARITHMETIC
!
         msg(1) = 2
         msg(j+1) = 2
         return
!
      end if
!
!     FINITE PRECISION ARITHMETIC COULD BE THE PROBLEM.
!
!     TRY A LARGER STEP SIZE
!
     stp = (eta*(abs(pv)+abs(pvpstp))*sign(1.0_wp,par(j))/&
     &   (tau*abs(d))+par(j)) - par(j)
!
      large = .false.
!
      if (abs(stp).gt.parmx) then
         stp = parmx*sign(1.0_wp,par(j))
         large = .true.
      end if
!
!     CALCULATE NUMERICAL DERIVATIVE USNG NEW, LARGER, STEPSIZE
!
      temp = par(j)
      par(j) = par(j) + stp
      call mdl(par, npar, xm, n, m, ixm, pvtemp)
      par(j) = temp
!
      pvpstp = pvtemp(nrow)
!
      fd = (pvpstp-pv)/stp
!
!     CHECK FOR AGREEMENT
!
      if ((abs(fd-d)).le.2.0e0*tau*abs(d)) then
!
!     FORWARD DIFFERENCE QUOTIENT AND ANALYTIC DERIVATIVES AGREE FOR
!     THIS STEP SIZE
!
         return
      end if
!
!     FORWARD DIFFERENCE QUOTIENT AND ANALYTIC DERIVATIVES STILL
!     DISAGREE
!
!     CHECK IF CURVATURE IS THE PROBLEM
!
      if (abs(curve*stp) .lt. abs(fd-d) .and. (.not. large)) then
!
!        CURVATURE COULDNT BE THE CULPRIT
!
             msg(1) = 2
             msg(j+1) = 2
             return
      else
!
!        CURVATURE MAY BE THE CULPRIT
!
             if (msg(1).eq.0) msg(1) = 1
             if (large) msg(j+1) = 6
             if (.not. large) msg(j+1) = 1
             return
      end if
!
      end
